
week12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08008f90  08008f90  00018f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009540  08009540  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009548  08009548  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000078  080095c8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  080095c8  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa11  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020c1  00000000  00000000  0002fab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00031b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  00032af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017732  00000000  00000000  00033968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3b9  00000000  00000000  0004b09a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000944fb  00000000  00000000  00056453  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea94e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004888  00000000  00000000  000ea9cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f74 	.word	0x08008f74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008f74 	.word	0x08008f74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b972 	b.w	8000f28 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9e08      	ldr	r6, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	4688      	mov	r8, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d14b      	bne.n	8000d02 <__udivmoddi4+0xa6>
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	d967      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	b14a      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c76:	f1c2 0720 	rsb	r7, r2, #32
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c82:	4095      	lsls	r5, r2
 8000c84:	ea47 0803 	orr.w	r8, r7, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c94:	fa1f fc85 	uxth.w	ip, r5
 8000c98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cae:	f080 811b 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8118 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb8:	3f02      	subs	r7, #2
 8000cba:	442b      	add	r3, r5
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cd0:	45a4      	cmp	ip, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	192c      	adds	r4, r5, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x290>
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x290>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	442c      	add	r4, r5
 8000ce8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cec:	eba4 040c 	sub.w	r4, r4, ip
 8000cf0:	2700      	movs	r7, #0
 8000cf2:	b11e      	cbz	r6, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfc:	4639      	mov	r1, r7
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xbe>
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	f000 80eb 	beq.w	8000ee2 <__udivmoddi4+0x286>
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d12:	4638      	mov	r0, r7
 8000d14:	4639      	mov	r1, r7
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f783 	clz	r7, r3
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d147      	bne.n	8000db2 <__udivmoddi4+0x156>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd0>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80fa 	bhi.w	8000f20 <__udivmoddi4+0x2c4>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	4698      	mov	r8, r3
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000d3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xe8>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 808f 	bne.w	8000e6c <__udivmoddi4+0x210>
 8000d4e:	1b49      	subs	r1, r1, r5
 8000d50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d54:	fa1f f885 	uxth.w	r8, r5
 8000d58:	2701      	movs	r7, #1
 8000d5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5e:	0c23      	lsrs	r3, r4, #16
 8000d60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb08 f10c 	mul.w	r1, r8, ip
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x124>
 8000d70:	18eb      	adds	r3, r5, r3
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x122>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	f200 80cd 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1a59      	subs	r1, r3, r1
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x14c>
 8000d98:	192c      	adds	r4, r5, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x14a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80b6 	bhi.w	8000f12 <__udivmoddi4+0x2b6>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e79f      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000db2:	f1c7 0c20 	rsb	ip, r7, #32
 8000db6:	40bb      	lsls	r3, r7
 8000db8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dd0:	4325      	orrs	r5, r4
 8000dd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd6:	0c2c      	lsrs	r4, r5, #16
 8000dd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ddc:	fa1f fa8e 	uxth.w	sl, lr
 8000de0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de4:	fb09 f40a 	mul.w	r4, r9, sl
 8000de8:	429c      	cmp	r4, r3
 8000dea:	fa02 f207 	lsl.w	r2, r2, r7
 8000dee:	fa00 f107 	lsl.w	r1, r0, r7
 8000df2:	d90b      	bls.n	8000e0c <__udivmoddi4+0x1b0>
 8000df4:	eb1e 0303 	adds.w	r3, lr, r3
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	f080 8087 	bcs.w	8000f0e <__udivmoddi4+0x2b2>
 8000e00:	429c      	cmp	r4, r3
 8000e02:	f240 8084 	bls.w	8000f0e <__udivmoddi4+0x2b2>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4473      	add	r3, lr
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	b2ad      	uxth	r5, r5
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1da>
 8000e24:	eb1e 0404 	adds.w	r4, lr, r4
 8000e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2c:	d26b      	bcs.n	8000f06 <__udivmoddi4+0x2aa>
 8000e2e:	45a2      	cmp	sl, r4
 8000e30:	d969      	bls.n	8000f06 <__udivmoddi4+0x2aa>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4474      	add	r4, lr
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	eba4 040a 	sub.w	r4, r4, sl
 8000e42:	454c      	cmp	r4, r9
 8000e44:	46c2      	mov	sl, r8
 8000e46:	464b      	mov	r3, r9
 8000e48:	d354      	bcc.n	8000ef4 <__udivmoddi4+0x298>
 8000e4a:	d051      	beq.n	8000ef0 <__udivmoddi4+0x294>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d069      	beq.n	8000f24 <__udivmoddi4+0x2c8>
 8000e50:	ebb1 050a 	subs.w	r5, r1, sl
 8000e54:	eb64 0403 	sbc.w	r4, r4, r3
 8000e58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e5c:	40fd      	lsrs	r5, r7
 8000e5e:	40fc      	lsrs	r4, r7
 8000e60:	ea4c 0505 	orr.w	r5, ip, r5
 8000e64:	e9c6 5400 	strd	r5, r4, [r6]
 8000e68:	2700      	movs	r7, #0
 8000e6a:	e747      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f703 	lsr.w	r7, r0, r3
 8000e74:	4095      	lsls	r5, r2
 8000e76:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e82:	4338      	orrs	r0, r7
 8000e84:	0c01      	lsrs	r1, r0, #16
 8000e86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e8a:	fa1f f885 	uxth.w	r8, r5
 8000e8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb07 f308 	mul.w	r3, r7, r8
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x256>
 8000ea2:	1869      	adds	r1, r5, r1
 8000ea4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea8:	d22f      	bcs.n	8000f0a <__udivmoddi4+0x2ae>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d92d      	bls.n	8000f0a <__udivmoddi4+0x2ae>
 8000eae:	3f02      	subs	r7, #2
 8000eb0:	4429      	add	r1, r5
 8000eb2:	1acb      	subs	r3, r1, r3
 8000eb4:	b281      	uxth	r1, r0
 8000eb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb00 f308 	mul.w	r3, r0, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x27e>
 8000eca:	1869      	adds	r1, r5, r1
 8000ecc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ed0:	d217      	bcs.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d915      	bls.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4429      	add	r1, r5
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ee0:	e73b      	b.n	8000d5a <__udivmoddi4+0xfe>
 8000ee2:	4637      	mov	r7, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e709      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee8:	4607      	mov	r7, r0
 8000eea:	e6e7      	b.n	8000cbc <__udivmoddi4+0x60>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000ef0:	4541      	cmp	r1, r8
 8000ef2:	d2ab      	bcs.n	8000e4c <__udivmoddi4+0x1f0>
 8000ef4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef8:	eb69 020e 	sbc.w	r2, r9, lr
 8000efc:	3801      	subs	r0, #1
 8000efe:	4613      	mov	r3, r2
 8000f00:	e7a4      	b.n	8000e4c <__udivmoddi4+0x1f0>
 8000f02:	4660      	mov	r0, ip
 8000f04:	e7e9      	b.n	8000eda <__udivmoddi4+0x27e>
 8000f06:	4618      	mov	r0, r3
 8000f08:	e795      	b.n	8000e36 <__udivmoddi4+0x1da>
 8000f0a:	4667      	mov	r7, ip
 8000f0c:	e7d1      	b.n	8000eb2 <__udivmoddi4+0x256>
 8000f0e:	4681      	mov	r9, r0
 8000f10:	e77c      	b.n	8000e0c <__udivmoddi4+0x1b0>
 8000f12:	3802      	subs	r0, #2
 8000f14:	442c      	add	r4, r5
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0x14c>
 8000f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f1c:	442b      	add	r3, r5
 8000f1e:	e72f      	b.n	8000d80 <__udivmoddi4+0x124>
 8000f20:	4638      	mov	r0, r7
 8000f22:	e708      	b.n	8000d36 <__udivmoddi4+0xda>
 8000f24:	4637      	mov	r7, r6
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0xa0>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f002 fce6 	bl	8003908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f001 ff72 	bl	8002e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f002 f91c 	bl	800317c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f44:	f002 f8fa 	bl	800313c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f48:	f002 f8ce 	bl	80030e8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000f4c:	f002 f824 	bl	8002f98 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000f50:	f001 ffd0 	bl	8002ef4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f54:	f002 f858 	bl	8003008 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f58:	f002 f8a2 	bl	80030a0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f5c:	48cb      	ldr	r0, [pc, #812]	; (800128c <main+0x35c>)
 8000f5e:	f005 f8ba 	bl	80060d6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f62:	48cb      	ldr	r0, [pc, #812]	; (8001290 <main+0x360>)
 8000f64:	f005 f8db 	bl	800611e <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	49ca      	ldr	r1, [pc, #808]	; (8001294 <main+0x364>)
 8000f6c:	48ca      	ldr	r0, [pc, #808]	; (8001298 <main+0x368>)
 8000f6e:	f002 fec1 	bl	8003cf4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	48c8      	ldr	r0, [pc, #800]	; (800129c <main+0x36c>)
 8000f7a:	f004 f8ad 	bl	80050d8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		/*Method 2 Interrupt Mode*/
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 64);
 8000f7e:	2240      	movs	r2, #64	; 0x40
 8000f80:	49c7      	ldr	r1, [pc, #796]	; (80012a0 <main+0x370>)
 8000f82:	48c8      	ldr	r0, [pc, #800]	; (80012a4 <main+0x374>)
 8000f84:	f005 fd58 	bl	8006a38 <HAL_UART_Receive_IT>

		/*Method 2 W/ 1 Char Received*/
		int16_t inputchar = UARTRecieveIT();
 8000f88:	f002 fa10 	bl	80033ac <UARTRecieveIT>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80fb      	strh	r3, [r7, #6]
		if(inputchar!=-1)
 8000f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d011      	beq.n	8000fbe <main+0x8e>
		{
			//Display Input
			sprintf(TxDataBuffer, "%c\r\n", inputchar);
 8000f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	49c1      	ldr	r1, [pc, #772]	; (80012a8 <main+0x378>)
 8000fa2:	48c2      	ldr	r0, [pc, #776]	; (80012ac <main+0x37c>)
 8000fa4:	f006 fbd8 	bl	8007758 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fa8:	48c0      	ldr	r0, [pc, #768]	; (80012ac <main+0x37c>)
 8000faa:	f7ff f919 	bl	80001e0 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	49bd      	ldr	r1, [pc, #756]	; (80012ac <main+0x37c>)
 8000fb8:	48ba      	ldr	r0, [pc, #744]	; (80012a4 <main+0x374>)
 8000fba:	f005 fca4 	bl	8006906 <HAL_UART_Transmit>
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////

		/*MENU*/
		switch(state)
 8000fbe:	4bbc      	ldr	r3, [pc, #752]	; (80012b0 <main+0x380>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	2b36      	cmp	r3, #54	; 0x36
 8000fc6:	f201 838d 	bhi.w	80026e4 <main+0x17b4>
 8000fca:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <main+0xa0>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	080010ad 	.word	0x080010ad
 8000fd4:	080010e5 	.word	0x080010e5
 8000fd8:	08001163 	.word	0x08001163
 8000fdc:	0800189f 	.word	0x0800189f
 8000fe0:	08001f9f 	.word	0x08001f9f
 8000fe4:	080026e5 	.word	0x080026e5
 8000fe8:	080026e5 	.word	0x080026e5
 8000fec:	080026e5 	.word	0x080026e5
 8000ff0:	080026e5 	.word	0x080026e5
 8000ff4:	080026e5 	.word	0x080026e5
 8000ff8:	080026e5 	.word	0x080026e5
 8000ffc:	080026e5 	.word	0x080026e5
 8001000:	080026e5 	.word	0x080026e5
 8001004:	080026e5 	.word	0x080026e5
 8001008:	080026e5 	.word	0x080026e5
 800100c:	080026e5 	.word	0x080026e5
 8001010:	080026e5 	.word	0x080026e5
 8001014:	080026e5 	.word	0x080026e5
 8001018:	080026e5 	.word	0x080026e5
 800101c:	080026e5 	.word	0x080026e5
 8001020:	080026e5 	.word	0x080026e5
 8001024:	080026e5 	.word	0x080026e5
 8001028:	080026e5 	.word	0x080026e5
 800102c:	080026e5 	.word	0x080026e5
 8001030:	080026e5 	.word	0x080026e5
 8001034:	080026e5 	.word	0x080026e5
 8001038:	080026e5 	.word	0x080026e5
 800103c:	080026e5 	.word	0x080026e5
 8001040:	080026e5 	.word	0x080026e5
 8001044:	080026e5 	.word	0x080026e5
 8001048:	080026e5 	.word	0x080026e5
 800104c:	080026e5 	.word	0x080026e5
 8001050:	08001193 	.word	0x08001193
 8001054:	080026e5 	.word	0x080026e5
 8001058:	080026e5 	.word	0x080026e5
 800105c:	080026e5 	.word	0x080026e5
 8001060:	080026e5 	.word	0x080026e5
 8001064:	080026e5 	.word	0x080026e5
 8001068:	080026e5 	.word	0x080026e5
 800106c:	080026e5 	.word	0x080026e5
 8001070:	080026e5 	.word	0x080026e5
 8001074:	080026e5 	.word	0x080026e5
 8001078:	080026e5 	.word	0x080026e5
 800107c:	08001919 	.word	0x08001919
 8001080:	080026e5 	.word	0x080026e5
 8001084:	080026e5 	.word	0x080026e5
 8001088:	080026e5 	.word	0x080026e5
 800108c:	080026e5 	.word	0x080026e5
 8001090:	080026e5 	.word	0x080026e5
 8001094:	080026e5 	.word	0x080026e5
 8001098:	080026e5 	.word	0x080026e5
 800109c:	080026e5 	.word	0x080026e5
 80010a0:	080026e5 	.word	0x080026e5
 80010a4:	080026e5 	.word	0x080026e5
 80010a8:	08001fc5 	.word	0x08001fc5
		{
		case start_Menu:
			sprintf(Menu, "Menu\r\n 0.Sawtooth\n\r 1.Sine wave\n\r 2.Square wave\n\r");
 80010ac:	4a81      	ldr	r2, [pc, #516]	; (80012b4 <main+0x384>)
 80010ae:	4b82      	ldr	r3, [pc, #520]	; (80012b8 <main+0x388>)
 80010b0:	4614      	mov	r4, r2
 80010b2:	461d      	mov	r5, r3
 80010b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80010c4:	487b      	ldr	r0, [pc, #492]	; (80012b4 <main+0x384>)
 80010c6:	f7ff f88b 	bl	80001e0 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	4978      	ldr	r1, [pc, #480]	; (80012b4 <main+0x384>)
 80010d4:	4873      	ldr	r0, [pc, #460]	; (80012a4 <main+0x374>)
 80010d6:	f005 fc16 	bl	8006906 <HAL_UART_Transmit>
			state = wait_input;
 80010da:	4b75      	ldr	r3, [pc, #468]	; (80012b0 <main+0x380>)
 80010dc:	2202      	movs	r2, #2
 80010de:	701a      	strb	r2, [r3, #0]
			break;
 80010e0:	f001 bb00 	b.w	80026e4 <main+0x17b4>
		case wait_input:
			switch(inputchar)
 80010e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e8:	2b30      	cmp	r3, #48	; 0x30
 80010ea:	d00a      	beq.n	8001102 <main+0x1d2>
 80010ec:	2b30      	cmp	r3, #48	; 0x30
 80010ee:	dc03      	bgt.n	80010f8 <main+0x1c8>
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d032      	beq.n	800115c <main+0x22c>
 80010f6:	e019      	b.n	800112c <main+0x1fc>
 80010f8:	2b31      	cmp	r3, #49	; 0x31
 80010fa:	d009      	beq.n	8001110 <main+0x1e0>
 80010fc:	2b32      	cmp	r3, #50	; 0x32
 80010fe:	d00e      	beq.n	800111e <main+0x1ee>
 8001100:	e014      	b.n	800112c <main+0x1fc>
				break;
			case '0':
//				v_h = 0;
//				v_l = 0;
//				freq = 0;
				wave = 0;
 8001102:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <main+0x38c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
				state = Menu_0;
 8001108:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <main+0x380>)
 800110a:	2203      	movs	r2, #3
 800110c:	701a      	strb	r2, [r3, #0]
				break;
 800110e:	e026      	b.n	800115e <main+0x22e>
			case '1':
				wave = 1;
 8001110:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <main+0x38c>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
				state = Menu_1;
 8001116:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <main+0x380>)
 8001118:	2204      	movs	r2, #4
 800111a:	701a      	strb	r2, [r3, #0]
				break;
 800111c:	e01f      	b.n	800115e <main+0x22e>
			case '2':
				wave = 2;
 800111e:	4b67      	ldr	r3, [pc, #412]	; (80012bc <main+0x38c>)
 8001120:	2202      	movs	r2, #2
 8001122:	701a      	strb	r2, [r3, #0]
				state = Menu_2;
 8001124:	4b62      	ldr	r3, [pc, #392]	; (80012b0 <main+0x380>)
 8001126:	2205      	movs	r2, #5
 8001128:	701a      	strb	r2, [r3, #0]
				break;
 800112a:	e018      	b.n	800115e <main+0x22e>
			default:
				sprintf(Menu, "Error! You can press only 0. 1. or 2.\r\n");
 800112c:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <main+0x384>)
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <main+0x390>)
 8001130:	4614      	mov	r4, r2
 8001132:	461d      	mov	r5, r3
 8001134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001140:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001144:	485b      	ldr	r0, [pc, #364]	; (80012b4 <main+0x384>)
 8001146:	f7ff f84b 	bl	80001e0 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	4958      	ldr	r1, [pc, #352]	; (80012b4 <main+0x384>)
 8001154:	4853      	ldr	r0, [pc, #332]	; (80012a4 <main+0x374>)
 8001156:	f005 fbd6 	bl	8006906 <HAL_UART_Transmit>
				break;
 800115a:	e000      	b.n	800115e <main+0x22e>
				break;
 800115c:	bf00      	nop
			}
			break;
 800115e:	f001 bac1 	b.w	80026e4 <main+0x17b4>
		case Menu_0:
			sprintf(Menu, "Sawtooth\r\n a.freq Up +1Hz\r\n s.freq up +0.1Hz\r\n"
 8001162:	4a54      	ldr	r2, [pc, #336]	; (80012b4 <main+0x384>)
 8001164:	4b57      	ldr	r3, [pc, #348]	; (80012c4 <main+0x394>)
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	23ce      	movs	r3, #206	; 0xce
 800116c:	461a      	mov	r2, r3
 800116e:	f006 fadf 	bl	8007730 <memcpy>
					      " d.freq down -1Hz\r\n f.freq down -0.1Hz\r\n"
						  " q.V high up +0.1V\r\n w.V high down -0.1V\r\n e.V low up +0.1V\r\n"
						  " r.V low down -0.1V\r\n 0.Slope up\r\n 1.Slope down\r\n x.back\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001172:	4850      	ldr	r0, [pc, #320]	; (80012b4 <main+0x384>)
 8001174:	f7ff f834 	bl	80001e0 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	494c      	ldr	r1, [pc, #304]	; (80012b4 <main+0x384>)
 8001182:	4848      	ldr	r0, [pc, #288]	; (80012a4 <main+0x374>)
 8001184:	f005 fbbf 	bl	8006906 <HAL_UART_Transmit>
			state = Menu_0_wait_input;
 8001188:	4b49      	ldr	r3, [pc, #292]	; (80012b0 <main+0x380>)
 800118a:	2221      	movs	r2, #33	; 0x21
 800118c:	701a      	strb	r2, [r3, #0]
			break;
 800118e:	f001 baa9 	b.w	80026e4 <main+0x17b4>
		case Menu_0_wait_input:
			switch(inputchar)
 8001192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001196:	2b65      	cmp	r3, #101	; 0x65
 8001198:	f000 8283 	beq.w	80016a2 <main+0x772>
 800119c:	2b65      	cmp	r3, #101	; 0x65
 800119e:	dc12      	bgt.n	80011c6 <main+0x296>
 80011a0:	2b31      	cmp	r3, #49	; 0x31
 80011a2:	f000 834d 	beq.w	8001840 <main+0x910>
 80011a6:	2b31      	cmp	r3, #49	; 0x31
 80011a8:	dc07      	bgt.n	80011ba <main+0x28a>
 80011aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ae:	f000 8373 	beq.w	8001898 <main+0x968>
 80011b2:	2b30      	cmp	r3, #48	; 0x30
 80011b4:	f000 832f 	beq.w	8001816 <main+0x8e6>
 80011b8:	e35d      	b.n	8001876 <main+0x946>
 80011ba:	2b61      	cmp	r3, #97	; 0x61
 80011bc:	d018      	beq.n	80011f0 <main+0x2c0>
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	f000 80e1 	beq.w	8001386 <main+0x456>
 80011c4:	e357      	b.n	8001876 <main+0x946>
 80011c6:	2b72      	cmp	r3, #114	; 0x72
 80011c8:	f000 82c2 	beq.w	8001750 <main+0x820>
 80011cc:	2b72      	cmp	r3, #114	; 0x72
 80011ce:	dc06      	bgt.n	80011de <main+0x2ae>
 80011d0:	2b66      	cmp	r3, #102	; 0x66
 80011d2:	f000 8132 	beq.w	800143a <main+0x50a>
 80011d6:	2b71      	cmp	r3, #113	; 0x71
 80011d8:	f000 8192 	beq.w	8001500 <main+0x5d0>
 80011dc:	e34b      	b.n	8001876 <main+0x946>
 80011de:	2b77      	cmp	r3, #119	; 0x77
 80011e0:	f000 81fc 	beq.w	80015dc <main+0x6ac>
 80011e4:	2b78      	cmp	r3, #120	; 0x78
 80011e6:	f000 8342 	beq.w	800186e <main+0x93e>
 80011ea:	2b73      	cmp	r3, #115	; 0x73
 80011ec:	d074      	beq.n	80012d8 <main+0x3a8>
 80011ee:	e342      	b.n	8001876 <main+0x946>
			{
			case -1:  //No Input
				break;
			case 'a':
				freq +=1;
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <main+0x398>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <main+0x398>)
 8001200:	edc3 7a00 	vstr	s15, [r3]
				sum_freq = (freq*10.0)-(((int)freq)*10);
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <main+0x398>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9a5 	bl	8000558 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <main+0x39c>)
 8001214:	f7ff f9f8 	bl	8000608 <__aeabi_dmul>
 8001218:	4603      	mov	r3, r0
 800121a:	460c      	mov	r4, r1
 800121c:	4625      	mov	r5, r4
 800121e:	461c      	mov	r4, r3
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <main+0x398>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	ee17 2a90 	vmov	r2, s15
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f97c 	bl	8000534 <__aeabi_i2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f828 	bl	8000298 <__aeabi_dsub>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4618      	mov	r0, r3
 800124e:	4621      	mov	r1, r4
 8001250:	f7ff fc74 	bl	8000b3c <__aeabi_d2iz>
 8001254:	4602      	mov	r2, r0
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <main+0x3a0>)
 8001258:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <main+0x398>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <main+0x3a0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	ee17 2a90 	vmov	r2, s15
 800126c:	4919      	ldr	r1, [pc, #100]	; (80012d4 <main+0x3a4>)
 800126e:	4811      	ldr	r0, [pc, #68]	; (80012b4 <main+0x384>)
 8001270:	f006 fa72 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <main+0x384>)
 8001276:	f7fe ffb3 	bl	80001e0 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	490c      	ldr	r1, [pc, #48]	; (80012b4 <main+0x384>)
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <main+0x374>)
 8001286:	f005 fb3e 	bl	8006906 <HAL_UART_Transmit>
				break;
 800128a:	e306      	b.n	800189a <main+0x96a>
 800128c:	20000518 	.word	0x20000518
 8001290:	200005f8 	.word	0x200005f8
 8001294:	20000094 	.word	0x20000094
 8001298:	200005b0 	.word	0x200005b0
 800129c:	40020000 	.word	0x40020000
 80012a0:	200000f8 	.word	0x200000f8
 80012a4:	20000698 	.word	0x20000698
 80012a8:	08008f90 	.word	0x08008f90
 80012ac:	200000d8 	.word	0x200000d8
 80012b0:	20000006 	.word	0x20000006
 80012b4:	20000118 	.word	0x20000118
 80012b8:	08008f98 	.word	0x08008f98
 80012bc:	20000004 	.word	0x20000004
 80012c0:	08008fcc 	.word	0x08008fcc
 80012c4:	08008ff4 	.word	0x08008ff4
 80012c8:	20000000 	.word	0x20000000
 80012cc:	40240000 	.word	0x40240000
 80012d0:	200000b4 	.word	0x200000b4
 80012d4:	080090c4 	.word	0x080090c4
			case 's':
				freq +=0.1;
 80012d8:	4bb7      	ldr	r3, [pc, #732]	; (80015b8 <main+0x688>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f93b 	bl	8000558 <__aeabi_f2d>
 80012e2:	a3b3      	add	r3, pc, #716	; (adr r3, 80015b0 <main+0x680>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7fe ffd8 	bl	800029c <__adddf3>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	4618      	mov	r0, r3
 80012f2:	4621      	mov	r1, r4
 80012f4:	f7ff fc4a 	bl	8000b8c <__aeabi_d2f>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4baf      	ldr	r3, [pc, #700]	; (80015b8 <main+0x688>)
 80012fc:	601a      	str	r2, [r3, #0]
				sum_freq = (freq*10.0)-(((int)freq)*10);
 80012fe:	4bae      	ldr	r3, [pc, #696]	; (80015b8 <main+0x688>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f928 	bl	8000558 <__aeabi_f2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4bab      	ldr	r3, [pc, #684]	; (80015bc <main+0x68c>)
 800130e:	f7ff f97b 	bl	8000608 <__aeabi_dmul>
 8001312:	4603      	mov	r3, r0
 8001314:	460c      	mov	r4, r1
 8001316:	4625      	mov	r5, r4
 8001318:	461c      	mov	r4, r3
 800131a:	4ba7      	ldr	r3, [pc, #668]	; (80015b8 <main+0x688>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001324:	ee17 2a90 	vmov	r2, s15
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f8ff 	bl	8000534 <__aeabi_i2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4620      	mov	r0, r4
 800133c:	4629      	mov	r1, r5
 800133e:	f7fe ffab 	bl	8000298 <__aeabi_dsub>
 8001342:	4603      	mov	r3, r0
 8001344:	460c      	mov	r4, r1
 8001346:	4618      	mov	r0, r3
 8001348:	4621      	mov	r1, r4
 800134a:	f7ff fbf7 	bl	8000b3c <__aeabi_d2iz>
 800134e:	4602      	mov	r2, r0
 8001350:	4b9b      	ldr	r3, [pc, #620]	; (80015c0 <main+0x690>)
 8001352:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 8001354:	4b98      	ldr	r3, [pc, #608]	; (80015b8 <main+0x688>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	4b98      	ldr	r3, [pc, #608]	; (80015c0 <main+0x690>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee17 2a90 	vmov	r2, s15
 8001366:	4997      	ldr	r1, [pc, #604]	; (80015c4 <main+0x694>)
 8001368:	4897      	ldr	r0, [pc, #604]	; (80015c8 <main+0x698>)
 800136a:	f006 f9f5 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800136e:	4896      	ldr	r0, [pc, #600]	; (80015c8 <main+0x698>)
 8001370:	f7fe ff36 	bl	80001e0 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29a      	uxth	r2, r3
 8001378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137c:	4992      	ldr	r1, [pc, #584]	; (80015c8 <main+0x698>)
 800137e:	4893      	ldr	r0, [pc, #588]	; (80015cc <main+0x69c>)
 8001380:	f005 fac1 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001384:	e289      	b.n	800189a <main+0x96a>
			case 'd':
				freq -=1;
 8001386:	4b8c      	ldr	r3, [pc, #560]	; (80015b8 <main+0x688>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001390:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001394:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <main+0x688>)
 8001396:	edc3 7a00 	vstr	s15, [r3]
				if(freq <= 0)
 800139a:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <main+0x688>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a8:	d803      	bhi.n	80013b2 <main+0x482>
				{
					freq = 0;
 80013aa:	4b83      	ldr	r3, [pc, #524]	; (80015b8 <main+0x688>)
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
				}
				sum_freq = (freq*10.0)-(((int)freq)*10);
 80013b2:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <main+0x688>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8ce 	bl	8000558 <__aeabi_f2d>
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <main+0x68c>)
 80013c2:	f7ff f921 	bl	8000608 <__aeabi_dmul>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4625      	mov	r5, r4
 80013cc:	461c      	mov	r4, r3
 80013ce:	4b7a      	ldr	r3, [pc, #488]	; (80015b8 <main+0x688>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d8:	ee17 2a90 	vmov	r2, s15
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8a5 	bl	8000534 <__aeabi_i2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7fe ff51 	bl	8000298 <__aeabi_dsub>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	4618      	mov	r0, r3
 80013fc:	4621      	mov	r1, r4
 80013fe:	f7ff fb9d 	bl	8000b3c <__aeabi_d2iz>
 8001402:	4602      	mov	r2, r0
 8001404:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <main+0x690>)
 8001406:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <main+0x688>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	4b6b      	ldr	r3, [pc, #428]	; (80015c0 <main+0x690>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	ee17 2a90 	vmov	r2, s15
 800141a:	496a      	ldr	r1, [pc, #424]	; (80015c4 <main+0x694>)
 800141c:	486a      	ldr	r0, [pc, #424]	; (80015c8 <main+0x698>)
 800141e:	f006 f99b 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001422:	4869      	ldr	r0, [pc, #420]	; (80015c8 <main+0x698>)
 8001424:	f7fe fedc 	bl	80001e0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001430:	4965      	ldr	r1, [pc, #404]	; (80015c8 <main+0x698>)
 8001432:	4866      	ldr	r0, [pc, #408]	; (80015cc <main+0x69c>)
 8001434:	f005 fa67 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001438:	e22f      	b.n	800189a <main+0x96a>
			case 'f':
				freq -=0.1;
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <main+0x688>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f88a 	bl	8000558 <__aeabi_f2d>
 8001444:	a35a      	add	r3, pc, #360	; (adr r3, 80015b0 <main+0x680>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7fe ff25 	bl	8000298 <__aeabi_dsub>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	4618      	mov	r0, r3
 8001454:	4621      	mov	r1, r4
 8001456:	f7ff fb99 	bl	8000b8c <__aeabi_d2f>
 800145a:	4602      	mov	r2, r0
 800145c:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <main+0x688>)
 800145e:	601a      	str	r2, [r3, #0]
				if(freq <= 0)
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <main+0x688>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d803      	bhi.n	8001478 <main+0x548>
				{
					freq = 0;
 8001470:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <main+0x688>)
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
				}
				sum_freq = (freq*10.0)-(((int)freq)*10);
 8001478:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <main+0x688>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f86b 	bl	8000558 <__aeabi_f2d>
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <main+0x68c>)
 8001488:	f7ff f8be 	bl	8000608 <__aeabi_dmul>
 800148c:	4603      	mov	r3, r0
 800148e:	460c      	mov	r4, r1
 8001490:	4625      	mov	r5, r4
 8001492:	461c      	mov	r4, r3
 8001494:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <main+0x688>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149e:	ee17 2a90 	vmov	r2, s15
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f842 	bl	8000534 <__aeabi_i2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe feee 	bl	8000298 <__aeabi_dsub>
 80014bc:	4603      	mov	r3, r0
 80014be:	460c      	mov	r4, r1
 80014c0:	4618      	mov	r0, r3
 80014c2:	4621      	mov	r1, r4
 80014c4:	f7ff fb3a 	bl	8000b3c <__aeabi_d2iz>
 80014c8:	4602      	mov	r2, r0
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <main+0x690>)
 80014cc:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <main+0x688>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d8:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <main+0x690>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	4938      	ldr	r1, [pc, #224]	; (80015c4 <main+0x694>)
 80014e2:	4839      	ldr	r0, [pc, #228]	; (80015c8 <main+0x698>)
 80014e4:	f006 f938 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80014e8:	4837      	ldr	r0, [pc, #220]	; (80015c8 <main+0x698>)
 80014ea:	f7fe fe79 	bl	80001e0 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	4934      	ldr	r1, [pc, #208]	; (80015c8 <main+0x698>)
 80014f8:	4834      	ldr	r0, [pc, #208]	; (80015cc <main+0x69c>)
 80014fa:	f005 fa04 	bl	8006906 <HAL_UART_Transmit>
				break;
 80014fe:	e1cc      	b.n	800189a <main+0x96a>
			case 'q':
				v_h +=0.1;
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <main+0x6a0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f827 	bl	8000558 <__aeabi_f2d>
 800150a:	a329      	add	r3, pc, #164	; (adr r3, 80015b0 <main+0x680>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7fe fec4 	bl	800029c <__adddf3>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4618      	mov	r0, r3
 800151a:	4621      	mov	r1, r4
 800151c:	f7ff fb36 	bl	8000b8c <__aeabi_d2f>
 8001520:	4602      	mov	r2, r0
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <main+0x6a0>)
 8001524:	601a      	str	r2, [r3, #0]
				sum_VH = (v_h*10.0)-(((int)v_h)*10);
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <main+0x6a0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f814 	bl	8000558 <__aeabi_f2d>
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <main+0x68c>)
 8001536:	f7ff f867 	bl	8000608 <__aeabi_dmul>
 800153a:	4603      	mov	r3, r0
 800153c:	460c      	mov	r4, r1
 800153e:	4625      	mov	r5, r4
 8001540:	461c      	mov	r4, r3
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <main+0x6a0>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800154c:	ee17 2a90 	vmov	r2, s15
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ffeb 	bl	8000534 <__aeabi_i2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fe97 	bl	8000298 <__aeabi_dsub>
 800156a:	4603      	mov	r3, r0
 800156c:	460c      	mov	r4, r1
 800156e:	4618      	mov	r0, r3
 8001570:	4621      	mov	r1, r4
 8001572:	f7ff fae3 	bl	8000b3c <__aeabi_d2iz>
 8001576:	4602      	mov	r2, r0
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <main+0x6a4>)
 800157a:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V high up %d.%d V\r\n",(int)v_h,sum_VH);
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <main+0x6a0>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <main+0x6a4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	ee17 2a90 	vmov	r2, s15
 800158e:	4912      	ldr	r1, [pc, #72]	; (80015d8 <main+0x6a8>)
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <main+0x698>)
 8001592:	f006 f8e1 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <main+0x698>)
 8001598:	f7fe fe22 	bl	80001e0 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a4:	4908      	ldr	r1, [pc, #32]	; (80015c8 <main+0x698>)
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <main+0x69c>)
 80015a8:	f005 f9ad 	bl	8006906 <HAL_UART_Transmit>
				break;
 80015ac:	e175      	b.n	800189a <main+0x96a>
 80015ae:	bf00      	nop
 80015b0:	9999999a 	.word	0x9999999a
 80015b4:	3fb99999 	.word	0x3fb99999
 80015b8:	20000000 	.word	0x20000000
 80015bc:	40240000 	.word	0x40240000
 80015c0:	200000b4 	.word	0x200000b4
 80015c4:	080090c4 	.word	0x080090c4
 80015c8:	20000118 	.word	0x20000118
 80015cc:	20000698 	.word	0x20000698
 80015d0:	200000ac 	.word	0x200000ac
 80015d4:	200000b8 	.word	0x200000b8
 80015d8:	080090d4 	.word	0x080090d4
			case 'w':
				v_h -=0.1;
 80015dc:	4bbe      	ldr	r3, [pc, #760]	; (80018d8 <main+0x9a8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffb9 	bl	8000558 <__aeabi_f2d>
 80015e6:	a3ba      	add	r3, pc, #744	; (adr r3, 80018d0 <main+0x9a0>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7fe fe54 	bl	8000298 <__aeabi_dsub>
 80015f0:	4603      	mov	r3, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	4618      	mov	r0, r3
 80015f6:	4621      	mov	r1, r4
 80015f8:	f7ff fac8 	bl	8000b8c <__aeabi_d2f>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4bb6      	ldr	r3, [pc, #728]	; (80018d8 <main+0x9a8>)
 8001600:	601a      	str	r2, [r3, #0]
				if(v_h <= 0)
 8001602:	4bb5      	ldr	r3, [pc, #724]	; (80018d8 <main+0x9a8>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	d803      	bhi.n	800161a <main+0x6ea>
				{
					v_h = 0;
 8001612:	4bb1      	ldr	r3, [pc, #708]	; (80018d8 <main+0x9a8>)
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
				}
				sum_VH = (v_h*10.0)-(((int)v_h)*10);
 800161a:	4baf      	ldr	r3, [pc, #700]	; (80018d8 <main+0x9a8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4bac      	ldr	r3, [pc, #688]	; (80018dc <main+0x9ac>)
 800162a:	f7fe ffed 	bl	8000608 <__aeabi_dmul>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4625      	mov	r5, r4
 8001634:	461c      	mov	r4, r3
 8001636:	4ba8      	ldr	r3, [pc, #672]	; (80018d8 <main+0x9a8>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001640:	ee17 2a90 	vmov	r2, s15
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff71 	bl	8000534 <__aeabi_i2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4620      	mov	r0, r4
 8001658:	4629      	mov	r1, r5
 800165a:	f7fe fe1d 	bl	8000298 <__aeabi_dsub>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	4618      	mov	r0, r3
 8001664:	4621      	mov	r1, r4
 8001666:	f7ff fa69 	bl	8000b3c <__aeabi_d2iz>
 800166a:	4602      	mov	r2, r0
 800166c:	4b9c      	ldr	r3, [pc, #624]	; (80018e0 <main+0x9b0>)
 800166e:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V high down %d.%d V\r\n",(int)v_h,sum_VH);
 8001670:	4b99      	ldr	r3, [pc, #612]	; (80018d8 <main+0x9a8>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167a:	4b99      	ldr	r3, [pc, #612]	; (80018e0 <main+0x9b0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	ee17 2a90 	vmov	r2, s15
 8001682:	4998      	ldr	r1, [pc, #608]	; (80018e4 <main+0x9b4>)
 8001684:	4898      	ldr	r0, [pc, #608]	; (80018e8 <main+0x9b8>)
 8001686:	f006 f867 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800168a:	4897      	ldr	r0, [pc, #604]	; (80018e8 <main+0x9b8>)
 800168c:	f7fe fda8 	bl	80001e0 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001698:	4993      	ldr	r1, [pc, #588]	; (80018e8 <main+0x9b8>)
 800169a:	4894      	ldr	r0, [pc, #592]	; (80018ec <main+0x9bc>)
 800169c:	f005 f933 	bl	8006906 <HAL_UART_Transmit>
				break;
 80016a0:	e0fb      	b.n	800189a <main+0x96a>
			case 'e':
				v_l +=0.1;
 80016a2:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <main+0x9c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff56 	bl	8000558 <__aeabi_f2d>
 80016ac:	a388      	add	r3, pc, #544	; (adr r3, 80018d0 <main+0x9a0>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe fdf3 	bl	800029c <__adddf3>
 80016b6:	4603      	mov	r3, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	4618      	mov	r0, r3
 80016bc:	4621      	mov	r1, r4
 80016be:	f7ff fa65 	bl	8000b8c <__aeabi_d2f>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b8a      	ldr	r3, [pc, #552]	; (80018f0 <main+0x9c0>)
 80016c6:	601a      	str	r2, [r3, #0]
				sum_VL = (v_l*10.0)-(((int)v_l)*10);
 80016c8:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <main+0x9c0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff43 	bl	8000558 <__aeabi_f2d>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <main+0x9ac>)
 80016d8:	f7fe ff96 	bl	8000608 <__aeabi_dmul>
 80016dc:	4603      	mov	r3, r0
 80016de:	460c      	mov	r4, r1
 80016e0:	4625      	mov	r5, r4
 80016e2:	461c      	mov	r4, r3
 80016e4:	4b82      	ldr	r3, [pc, #520]	; (80018f0 <main+0x9c0>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ee:	ee17 2a90 	vmov	r2, s15
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff1a 	bl	8000534 <__aeabi_i2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4620      	mov	r0, r4
 8001706:	4629      	mov	r1, r5
 8001708:	f7fe fdc6 	bl	8000298 <__aeabi_dsub>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	4618      	mov	r0, r3
 8001712:	4621      	mov	r1, r4
 8001714:	f7ff fa12 	bl	8000b3c <__aeabi_d2iz>
 8001718:	4602      	mov	r2, r0
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <main+0x9c4>)
 800171c:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V low up %d.%d V\r\n",(int)v_l,sum_VL);
 800171e:	4b74      	ldr	r3, [pc, #464]	; (80018f0 <main+0x9c0>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001728:	4b72      	ldr	r3, [pc, #456]	; (80018f4 <main+0x9c4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	ee17 2a90 	vmov	r2, s15
 8001730:	4971      	ldr	r1, [pc, #452]	; (80018f8 <main+0x9c8>)
 8001732:	486d      	ldr	r0, [pc, #436]	; (80018e8 <main+0x9b8>)
 8001734:	f006 f810 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001738:	486b      	ldr	r0, [pc, #428]	; (80018e8 <main+0x9b8>)
 800173a:	f7fe fd51 	bl	80001e0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	4968      	ldr	r1, [pc, #416]	; (80018e8 <main+0x9b8>)
 8001748:	4868      	ldr	r0, [pc, #416]	; (80018ec <main+0x9bc>)
 800174a:	f005 f8dc 	bl	8006906 <HAL_UART_Transmit>
				break;
 800174e:	e0a4      	b.n	800189a <main+0x96a>
			case 'r':
				v_l -=0.1;
 8001750:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <main+0x9c0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe feff 	bl	8000558 <__aeabi_f2d>
 800175a:	a35d      	add	r3, pc, #372	; (adr r3, 80018d0 <main+0x9a0>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe fd9a 	bl	8000298 <__aeabi_dsub>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4618      	mov	r0, r3
 800176a:	4621      	mov	r1, r4
 800176c:	f7ff fa0e 	bl	8000b8c <__aeabi_d2f>
 8001770:	4602      	mov	r2, r0
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <main+0x9c0>)
 8001774:	601a      	str	r2, [r3, #0]
				if(v_l <= 0)
 8001776:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <main+0x9c0>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	d803      	bhi.n	800178e <main+0x85e>
				{
					v_l = 0;
 8001786:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <main+0x9c0>)
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
				}
				sum_VL = (v_l*10.0)-(((int)v_l)*10);
 800178e:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <main+0x9c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fee0 	bl	8000558 <__aeabi_f2d>
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <main+0x9ac>)
 800179e:	f7fe ff33 	bl	8000608 <__aeabi_dmul>
 80017a2:	4603      	mov	r3, r0
 80017a4:	460c      	mov	r4, r1
 80017a6:	4625      	mov	r5, r4
 80017a8:	461c      	mov	r4, r3
 80017aa:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <main+0x9c0>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b4:	ee17 2a90 	vmov	r2, s15
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe feb7 	bl	8000534 <__aeabi_i2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4620      	mov	r0, r4
 80017cc:	4629      	mov	r1, r5
 80017ce:	f7fe fd63 	bl	8000298 <__aeabi_dsub>
 80017d2:	4603      	mov	r3, r0
 80017d4:	460c      	mov	r4, r1
 80017d6:	4618      	mov	r0, r3
 80017d8:	4621      	mov	r1, r4
 80017da:	f7ff f9af 	bl	8000b3c <__aeabi_d2iz>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <main+0x9c4>)
 80017e2:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V low down %d.%d V\r\n",(int)v_l,sum_VL);
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <main+0x9c0>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <main+0x9c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	ee17 2a90 	vmov	r2, s15
 80017f6:	4941      	ldr	r1, [pc, #260]	; (80018fc <main+0x9cc>)
 80017f8:	483b      	ldr	r0, [pc, #236]	; (80018e8 <main+0x9b8>)
 80017fa:	f005 ffad 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80017fe:	483a      	ldr	r0, [pc, #232]	; (80018e8 <main+0x9b8>)
 8001800:	f7fe fcee 	bl	80001e0 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180c:	4936      	ldr	r1, [pc, #216]	; (80018e8 <main+0x9b8>)
 800180e:	4837      	ldr	r0, [pc, #220]	; (80018ec <main+0x9bc>)
 8001810:	f005 f879 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001814:	e041      	b.n	800189a <main+0x96a>
			case '0':
				slope = 0;
 8001816:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <main+0x9d0>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
				sprintf(Menu, "Slope down\r\n");
 800181c:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <main+0x9b8>)
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <main+0x9d4>)
 8001820:	4614      	mov	r4, r2
 8001822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001824:	c407      	stmia	r4!, {r0, r1, r2}
 8001826:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001828:	482f      	ldr	r0, [pc, #188]	; (80018e8 <main+0x9b8>)
 800182a:	f7fe fcd9 	bl	80001e0 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	492c      	ldr	r1, [pc, #176]	; (80018e8 <main+0x9b8>)
 8001838:	482c      	ldr	r0, [pc, #176]	; (80018ec <main+0x9bc>)
 800183a:	f005 f864 	bl	8006906 <HAL_UART_Transmit>
				break;
 800183e:	e02c      	b.n	800189a <main+0x96a>
			case '1':
				slope = 1;
 8001840:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <main+0x9d0>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
				sprintf(Menu, "Slope up\r\n");
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <main+0x9b8>)
 8001848:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <main+0x9d8>)
 800184a:	ca07      	ldmia	r2, {r0, r1, r2}
 800184c:	c303      	stmia	r3!, {r0, r1}
 800184e:	801a      	strh	r2, [r3, #0]
 8001850:	3302      	adds	r3, #2
 8001852:	0c12      	lsrs	r2, r2, #16
 8001854:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001856:	4824      	ldr	r0, [pc, #144]	; (80018e8 <main+0x9b8>)
 8001858:	f7fe fcc2 	bl	80001e0 <strlen>
 800185c:	4603      	mov	r3, r0
 800185e:	b29a      	uxth	r2, r3
 8001860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001864:	4920      	ldr	r1, [pc, #128]	; (80018e8 <main+0x9b8>)
 8001866:	4821      	ldr	r0, [pc, #132]	; (80018ec <main+0x9bc>)
 8001868:	f005 f84d 	bl	8006906 <HAL_UART_Transmit>
				break;
 800186c:	e015      	b.n	800189a <main+0x96a>
			case 'x':
				state = start_Menu;
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <main+0x9dc>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
				break;
 8001874:	e011      	b.n	800189a <main+0x96a>
			default:
				sprintf(Menu, "Error!\r\n");
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <main+0x9b8>)
 8001878:	4a25      	ldr	r2, [pc, #148]	; (8001910 <main+0x9e0>)
 800187a:	ca07      	ldmia	r2, {r0, r1, r2}
 800187c:	c303      	stmia	r3!, {r0, r1}
 800187e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001880:	4819      	ldr	r0, [pc, #100]	; (80018e8 <main+0x9b8>)
 8001882:	f7fe fcad 	bl	80001e0 <strlen>
 8001886:	4603      	mov	r3, r0
 8001888:	b29a      	uxth	r2, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	4916      	ldr	r1, [pc, #88]	; (80018e8 <main+0x9b8>)
 8001890:	4816      	ldr	r0, [pc, #88]	; (80018ec <main+0x9bc>)
 8001892:	f005 f838 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001896:	e000      	b.n	800189a <main+0x96a>
				break;
 8001898:	bf00      	nop
			}
			break;
 800189a:	f000 bf23 	b.w	80026e4 <main+0x17b4>

		case Menu_1:
			sprintf(Menu, "Sine wave\r\n a.freq Up +1Hz\r\n s.freq up +0.1Hz\r\n"
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <main+0x9b8>)
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <main+0x9e4>)
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	23b3      	movs	r3, #179	; 0xb3
 80018a8:	461a      	mov	r2, r3
 80018aa:	f005 ff41 	bl	8007730 <memcpy>
					      " d.freq down -1Hz\r\n f.freq down -0.1Hz\r\n"
						  " q.V high up +0.1V\r\n w.V high down -0.1V\r\n"
						  " e.V low up +0.1V\r\n r.V low down -0.1V\r\n x.back\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <main+0x9b8>)
 80018b0:	f7fe fc96 	bl	80001e0 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	490a      	ldr	r1, [pc, #40]	; (80018e8 <main+0x9b8>)
 80018be:	480b      	ldr	r0, [pc, #44]	; (80018ec <main+0x9bc>)
 80018c0:	f005 f821 	bl	8006906 <HAL_UART_Transmit>
			state = Menu_1_wait_input;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <main+0x9dc>)
 80018c6:	222c      	movs	r2, #44	; 0x2c
 80018c8:	701a      	strb	r2, [r3, #0]
			break;
 80018ca:	f000 bf0b 	b.w	80026e4 <main+0x17b4>
 80018ce:	bf00      	nop
 80018d0:	9999999a 	.word	0x9999999a
 80018d4:	3fb99999 	.word	0x3fb99999
 80018d8:	200000ac 	.word	0x200000ac
 80018dc:	40240000 	.word	0x40240000
 80018e0:	200000b8 	.word	0x200000b8
 80018e4:	080090e8 	.word	0x080090e8
 80018e8:	20000118 	.word	0x20000118
 80018ec:	20000698 	.word	0x20000698
 80018f0:	200000b0 	.word	0x200000b0
 80018f4:	200000bc 	.word	0x200000bc
 80018f8:	08009100 	.word	0x08009100
 80018fc:	08009114 	.word	0x08009114
 8001900:	200000a0 	.word	0x200000a0
 8001904:	0800912c 	.word	0x0800912c
 8001908:	0800913c 	.word	0x0800913c
 800190c:	20000006 	.word	0x20000006
 8001910:	08009148 	.word	0x08009148
 8001914:	08009154 	.word	0x08009154
		case Menu_1_wait_input:
			switch(inputchar)
 8001918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191c:	2b66      	cmp	r3, #102	; 0x66
 800191e:	f000 8123 	beq.w	8001b68 <main+0xc38>
 8001922:	2b66      	cmp	r3, #102	; 0x66
 8001924:	dc0f      	bgt.n	8001946 <main+0xa16>
 8001926:	2b61      	cmp	r3, #97	; 0x61
 8001928:	d01f      	beq.n	800196a <main+0xa3a>
 800192a:	2b61      	cmp	r3, #97	; 0x61
 800192c:	dc04      	bgt.n	8001938 <main+0xa08>
 800192e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001932:	f000 8332 	beq.w	8001f9a <main+0x106a>
 8001936:	e31f      	b.n	8001f78 <main+0x1048>
 8001938:	2b64      	cmp	r3, #100	; 0x64
 800193a:	f000 80bb 	beq.w	8001ab4 <main+0xb84>
 800193e:	2b65      	cmp	r3, #101	; 0x65
 8001940:	f000 8240 	beq.w	8001dc4 <main+0xe94>
 8001944:	e318      	b.n	8001f78 <main+0x1048>
 8001946:	2b73      	cmp	r3, #115	; 0x73
 8001948:	d05d      	beq.n	8001a06 <main+0xad6>
 800194a:	2b73      	cmp	r3, #115	; 0x73
 800194c:	dc06      	bgt.n	800195c <main+0xa2c>
 800194e:	2b71      	cmp	r3, #113	; 0x71
 8001950:	f000 817e 	beq.w	8001c50 <main+0xd20>
 8001954:	2b72      	cmp	r3, #114	; 0x72
 8001956:	f000 828c 	beq.w	8001e72 <main+0xf42>
 800195a:	e30d      	b.n	8001f78 <main+0x1048>
 800195c:	2b77      	cmp	r3, #119	; 0x77
 800195e:	f000 81ce 	beq.w	8001cfe <main+0xdce>
 8001962:	2b78      	cmp	r3, #120	; 0x78
 8001964:	f000 82e8 	beq.w	8001f38 <main+0x1008>
 8001968:	e306      	b.n	8001f78 <main+0x1048>
			{
			case -1:  //No Input
				break;
			case 'a':
				freq +=1;
 800196a:	4bb3      	ldr	r3, [pc, #716]	; (8001c38 <main+0xd08>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001978:	4baf      	ldr	r3, [pc, #700]	; (8001c38 <main+0xd08>)
 800197a:	edc3 7a00 	vstr	s15, [r3]
				sum_freq = (freq*10.0)-(((int)freq)*10);
 800197e:	4bae      	ldr	r3, [pc, #696]	; (8001c38 <main+0xd08>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fde8 	bl	8000558 <__aeabi_f2d>
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4bab      	ldr	r3, [pc, #684]	; (8001c3c <main+0xd0c>)
 800198e:	f7fe fe3b 	bl	8000608 <__aeabi_dmul>
 8001992:	4603      	mov	r3, r0
 8001994:	460c      	mov	r4, r1
 8001996:	4625      	mov	r5, r4
 8001998:	461c      	mov	r4, r3
 800199a:	4ba7      	ldr	r3, [pc, #668]	; (8001c38 <main+0xd08>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a4:	ee17 2a90 	vmov	r2, s15
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdbf 	bl	8000534 <__aeabi_i2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fc6b 	bl	8000298 <__aeabi_dsub>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff f8b7 	bl	8000b3c <__aeabi_d2iz>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b9b      	ldr	r3, [pc, #620]	; (8001c40 <main+0xd10>)
 80019d2:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 80019d4:	4b98      	ldr	r3, [pc, #608]	; (8001c38 <main+0xd08>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019de:	4b98      	ldr	r3, [pc, #608]	; (8001c40 <main+0xd10>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	ee17 2a90 	vmov	r2, s15
 80019e6:	4997      	ldr	r1, [pc, #604]	; (8001c44 <main+0xd14>)
 80019e8:	4897      	ldr	r0, [pc, #604]	; (8001c48 <main+0xd18>)
 80019ea:	f005 feb5 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80019ee:	4896      	ldr	r0, [pc, #600]	; (8001c48 <main+0xd18>)
 80019f0:	f7fe fbf6 	bl	80001e0 <strlen>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fc:	4992      	ldr	r1, [pc, #584]	; (8001c48 <main+0xd18>)
 80019fe:	4893      	ldr	r0, [pc, #588]	; (8001c4c <main+0xd1c>)
 8001a00:	f004 ff81 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001a04:	e2ca      	b.n	8001f9c <main+0x106c>
			case 's':
				freq +=0.1;
 8001a06:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <main+0xd08>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fda4 	bl	8000558 <__aeabi_f2d>
 8001a10:	a387      	add	r3, pc, #540	; (adr r3, 8001c30 <main+0xd00>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fc41 	bl	800029c <__adddf3>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4621      	mov	r1, r4
 8001a22:	f7ff f8b3 	bl	8000b8c <__aeabi_d2f>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b83      	ldr	r3, [pc, #524]	; (8001c38 <main+0xd08>)
 8001a2a:	601a      	str	r2, [r3, #0]
				sum_freq = (freq*10.0)-(((int)freq)*10);
 8001a2c:	4b82      	ldr	r3, [pc, #520]	; (8001c38 <main+0xd08>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd91 	bl	8000558 <__aeabi_f2d>
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <main+0xd0c>)
 8001a3c:	f7fe fde4 	bl	8000608 <__aeabi_dmul>
 8001a40:	4603      	mov	r3, r0
 8001a42:	460c      	mov	r4, r1
 8001a44:	4625      	mov	r5, r4
 8001a46:	461c      	mov	r4, r3
 8001a48:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <main+0xd08>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a52:	ee17 2a90 	vmov	r2, s15
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd68 	bl	8000534 <__aeabi_i2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fc14 	bl	8000298 <__aeabi_dsub>
 8001a70:	4603      	mov	r3, r0
 8001a72:	460c      	mov	r4, r1
 8001a74:	4618      	mov	r0, r3
 8001a76:	4621      	mov	r1, r4
 8001a78:	f7ff f860 	bl	8000b3c <__aeabi_d2iz>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <main+0xd10>)
 8001a80:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 8001a82:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <main+0xd08>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	; (8001c40 <main+0xd10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	ee17 2a90 	vmov	r2, s15
 8001a94:	496b      	ldr	r1, [pc, #428]	; (8001c44 <main+0xd14>)
 8001a96:	486c      	ldr	r0, [pc, #432]	; (8001c48 <main+0xd18>)
 8001a98:	f005 fe5e 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001a9c:	486a      	ldr	r0, [pc, #424]	; (8001c48 <main+0xd18>)
 8001a9e:	f7fe fb9f 	bl	80001e0 <strlen>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aaa:	4967      	ldr	r1, [pc, #412]	; (8001c48 <main+0xd18>)
 8001aac:	4867      	ldr	r0, [pc, #412]	; (8001c4c <main+0xd1c>)
 8001aae:	f004 ff2a 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001ab2:	e273      	b.n	8001f9c <main+0x106c>
			case 'd':
				freq -=1;
 8001ab4:	4b60      	ldr	r3, [pc, #384]	; (8001c38 <main+0xd08>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001abe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <main+0xd08>)
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
				if(freq <= 0)
 8001ac8:	4b5b      	ldr	r3, [pc, #364]	; (8001c38 <main+0xd08>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d803      	bhi.n	8001ae0 <main+0xbb0>
				{
					freq = 0;
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <main+0xd08>)
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
				}
				sum_freq = (freq*10.0)-(((int)freq)*10);
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <main+0xd08>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd37 	bl	8000558 <__aeabi_f2d>
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <main+0xd0c>)
 8001af0:	f7fe fd8a 	bl	8000608 <__aeabi_dmul>
 8001af4:	4603      	mov	r3, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	4625      	mov	r5, r4
 8001afa:	461c      	mov	r4, r3
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <main+0xd08>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b06:	ee17 2a90 	vmov	r2, s15
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd0e 	bl	8000534 <__aeabi_i2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fbba 	bl	8000298 <__aeabi_dsub>
 8001b24:	4603      	mov	r3, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	f7ff f806 	bl	8000b3c <__aeabi_d2iz>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <main+0xd10>)
 8001b34:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 8001b36:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <main+0xd08>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <main+0xd10>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	ee17 2a90 	vmov	r2, s15
 8001b48:	493e      	ldr	r1, [pc, #248]	; (8001c44 <main+0xd14>)
 8001b4a:	483f      	ldr	r0, [pc, #252]	; (8001c48 <main+0xd18>)
 8001b4c:	f005 fe04 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001b50:	483d      	ldr	r0, [pc, #244]	; (8001c48 <main+0xd18>)
 8001b52:	f7fe fb45 	bl	80001e0 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	493a      	ldr	r1, [pc, #232]	; (8001c48 <main+0xd18>)
 8001b60:	483a      	ldr	r0, [pc, #232]	; (8001c4c <main+0xd1c>)
 8001b62:	f004 fed0 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001b66:	e219      	b.n	8001f9c <main+0x106c>
			case 'f':
				freq -=0.1;
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <main+0xd08>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcf3 	bl	8000558 <__aeabi_f2d>
 8001b72:	a32f      	add	r3, pc, #188	; (adr r3, 8001c30 <main+0xd00>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	f7fe fb8e 	bl	8000298 <__aeabi_dsub>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	460c      	mov	r4, r1
 8001b80:	4618      	mov	r0, r3
 8001b82:	4621      	mov	r1, r4
 8001b84:	f7ff f802 	bl	8000b8c <__aeabi_d2f>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <main+0xd08>)
 8001b8c:	601a      	str	r2, [r3, #0]
				if(freq <= 0)
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <main+0xd08>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	d803      	bhi.n	8001ba6 <main+0xc76>
				{
					freq = 0;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <main+0xd08>)
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
				}
				sum_freq = (freq*10.0)-(((int)freq)*10);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <main+0xd08>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcd4 	bl	8000558 <__aeabi_f2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <main+0xd0c>)
 8001bb6:	f7fe fd27 	bl	8000608 <__aeabi_dmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	4625      	mov	r5, r4
 8001bc0:	461c      	mov	r4, r3
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <main+0xd08>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bcc:	ee17 2a90 	vmov	r2, s15
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fcab 	bl	8000534 <__aeabi_i2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4620      	mov	r0, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	f7fe fb57 	bl	8000298 <__aeabi_dsub>
 8001bea:	4603      	mov	r3, r0
 8001bec:	460c      	mov	r4, r1
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	f7fe ffa3 	bl	8000b3c <__aeabi_d2iz>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <main+0xd10>)
 8001bfa:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <main+0xd08>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <main+0xd10>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	ee17 2a90 	vmov	r2, s15
 8001c0e:	490d      	ldr	r1, [pc, #52]	; (8001c44 <main+0xd14>)
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <main+0xd18>)
 8001c12:	f005 fda1 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001c16:	480c      	ldr	r0, [pc, #48]	; (8001c48 <main+0xd18>)
 8001c18:	f7fe fae2 	bl	80001e0 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c24:	4908      	ldr	r1, [pc, #32]	; (8001c48 <main+0xd18>)
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <main+0xd1c>)
 8001c28:	f004 fe6d 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001c2c:	e1b6      	b.n	8001f9c <main+0x106c>
 8001c2e:	bf00      	nop
 8001c30:	9999999a 	.word	0x9999999a
 8001c34:	3fb99999 	.word	0x3fb99999
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	40240000 	.word	0x40240000
 8001c40:	200000b4 	.word	0x200000b4
 8001c44:	080090c4 	.word	0x080090c4
 8001c48:	20000118 	.word	0x20000118
 8001c4c:	20000698 	.word	0x20000698
			case 'q':
				v_h +=0.1;
 8001c50:	4bbd      	ldr	r3, [pc, #756]	; (8001f48 <main+0x1018>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc7f 	bl	8000558 <__aeabi_f2d>
 8001c5a:	a3b9      	add	r3, pc, #740	; (adr r3, 8001f40 <main+0x1010>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fb1c 	bl	800029c <__adddf3>
 8001c64:	4603      	mov	r3, r0
 8001c66:	460c      	mov	r4, r1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	f7fe ff8e 	bl	8000b8c <__aeabi_d2f>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4bb5      	ldr	r3, [pc, #724]	; (8001f48 <main+0x1018>)
 8001c74:	601a      	str	r2, [r3, #0]
				sum_VH = (v_h*10.0)-(((int)v_h)*10);
 8001c76:	4bb4      	ldr	r3, [pc, #720]	; (8001f48 <main+0x1018>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc6c 	bl	8000558 <__aeabi_f2d>
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4bb1      	ldr	r3, [pc, #708]	; (8001f4c <main+0x101c>)
 8001c86:	f7fe fcbf 	bl	8000608 <__aeabi_dmul>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	4625      	mov	r5, r4
 8001c90:	461c      	mov	r4, r3
 8001c92:	4bad      	ldr	r3, [pc, #692]	; (8001f48 <main+0x1018>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9c:	ee17 2a90 	vmov	r2, s15
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc43 	bl	8000534 <__aeabi_i2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe faef 	bl	8000298 <__aeabi_dsub>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	f7fe ff3b 	bl	8000b3c <__aeabi_d2iz>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4ba1      	ldr	r3, [pc, #644]	; (8001f50 <main+0x1020>)
 8001cca:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V high up %d.%d V\r\n",(int)v_h,sum_VH);
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <main+0x1018>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd6:	4b9e      	ldr	r3, [pc, #632]	; (8001f50 <main+0x1020>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	ee17 2a90 	vmov	r2, s15
 8001cde:	499d      	ldr	r1, [pc, #628]	; (8001f54 <main+0x1024>)
 8001ce0:	489d      	ldr	r0, [pc, #628]	; (8001f58 <main+0x1028>)
 8001ce2:	f005 fd39 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001ce6:	489c      	ldr	r0, [pc, #624]	; (8001f58 <main+0x1028>)
 8001ce8:	f7fe fa7a 	bl	80001e0 <strlen>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf4:	4998      	ldr	r1, [pc, #608]	; (8001f58 <main+0x1028>)
 8001cf6:	4899      	ldr	r0, [pc, #612]	; (8001f5c <main+0x102c>)
 8001cf8:	f004 fe05 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001cfc:	e14e      	b.n	8001f9c <main+0x106c>
			case 'w':
				v_h -=0.1;
 8001cfe:	4b92      	ldr	r3, [pc, #584]	; (8001f48 <main+0x1018>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc28 	bl	8000558 <__aeabi_f2d>
 8001d08:	a38d      	add	r3, pc, #564	; (adr r3, 8001f40 <main+0x1010>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fac3 	bl	8000298 <__aeabi_dsub>
 8001d12:	4603      	mov	r3, r0
 8001d14:	460c      	mov	r4, r1
 8001d16:	4618      	mov	r0, r3
 8001d18:	4621      	mov	r1, r4
 8001d1a:	f7fe ff37 	bl	8000b8c <__aeabi_d2f>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <main+0x1018>)
 8001d22:	601a      	str	r2, [r3, #0]
				if(v_h <= 0)
 8001d24:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <main+0x1018>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	d803      	bhi.n	8001d3c <main+0xe0c>
				{
					v_h = 0;
 8001d34:	4b84      	ldr	r3, [pc, #528]	; (8001f48 <main+0x1018>)
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
				}
				sum_VH = (v_h*10.0)-(((int)v_h)*10);
 8001d3c:	4b82      	ldr	r3, [pc, #520]	; (8001f48 <main+0x1018>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc09 	bl	8000558 <__aeabi_f2d>
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <main+0x101c>)
 8001d4c:	f7fe fc5c 	bl	8000608 <__aeabi_dmul>
 8001d50:	4603      	mov	r3, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	4625      	mov	r5, r4
 8001d56:	461c      	mov	r4, r3
 8001d58:	4b7b      	ldr	r3, [pc, #492]	; (8001f48 <main+0x1018>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d62:	ee17 2a90 	vmov	r2, s15
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbe0 	bl	8000534 <__aeabi_i2d>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fa8c 	bl	8000298 <__aeabi_dsub>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4618      	mov	r0, r3
 8001d86:	4621      	mov	r1, r4
 8001d88:	f7fe fed8 	bl	8000b3c <__aeabi_d2iz>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <main+0x1020>)
 8001d90:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V high down %d.%d V\r\n",(int)v_h,sum_VH);
 8001d92:	4b6d      	ldr	r3, [pc, #436]	; (8001f48 <main+0x1018>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <main+0x1020>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	ee17 2a90 	vmov	r2, s15
 8001da4:	496e      	ldr	r1, [pc, #440]	; (8001f60 <main+0x1030>)
 8001da6:	486c      	ldr	r0, [pc, #432]	; (8001f58 <main+0x1028>)
 8001da8:	f005 fcd6 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001dac:	486a      	ldr	r0, [pc, #424]	; (8001f58 <main+0x1028>)
 8001dae:	f7fe fa17 	bl	80001e0 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	4967      	ldr	r1, [pc, #412]	; (8001f58 <main+0x1028>)
 8001dbc:	4867      	ldr	r0, [pc, #412]	; (8001f5c <main+0x102c>)
 8001dbe:	f004 fda2 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001dc2:	e0eb      	b.n	8001f9c <main+0x106c>
			case 'e':
				v_l +=0.1;
 8001dc4:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <main+0x1034>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbc5 	bl	8000558 <__aeabi_f2d>
 8001dce:	a35c      	add	r3, pc, #368	; (adr r3, 8001f40 <main+0x1010>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fa62 	bl	800029c <__adddf3>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4621      	mov	r1, r4
 8001de0:	f7fe fed4 	bl	8000b8c <__aeabi_d2f>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <main+0x1034>)
 8001de8:	601a      	str	r2, [r3, #0]
				sum_VL = (v_l*10.0)-(((int)v_l)*10);
 8001dea:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <main+0x1034>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbb2 	bl	8000558 <__aeabi_f2d>
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <main+0x101c>)
 8001dfa:	f7fe fc05 	bl	8000608 <__aeabi_dmul>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	4625      	mov	r5, r4
 8001e04:	461c      	mov	r4, r3
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <main+0x1034>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e10:	ee17 2a90 	vmov	r2, s15
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb89 	bl	8000534 <__aeabi_i2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fa35 	bl	8000298 <__aeabi_dsub>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7fe fe81 	bl	8000b3c <__aeabi_d2iz>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <main+0x1038>)
 8001e3e:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V low up %d.%d V\r\n",(int)v_l,sum_VL);
 8001e40:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <main+0x1034>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <main+0x1038>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	ee17 2a90 	vmov	r2, s15
 8001e52:	4946      	ldr	r1, [pc, #280]	; (8001f6c <main+0x103c>)
 8001e54:	4840      	ldr	r0, [pc, #256]	; (8001f58 <main+0x1028>)
 8001e56:	f005 fc7f 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001e5a:	483f      	ldr	r0, [pc, #252]	; (8001f58 <main+0x1028>)
 8001e5c:	f7fe f9c0 	bl	80001e0 <strlen>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e68:	493b      	ldr	r1, [pc, #236]	; (8001f58 <main+0x1028>)
 8001e6a:	483c      	ldr	r0, [pc, #240]	; (8001f5c <main+0x102c>)
 8001e6c:	f004 fd4b 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001e70:	e094      	b.n	8001f9c <main+0x106c>
			case 'r':
				v_l -=0.1;
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <main+0x1034>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb6e 	bl	8000558 <__aeabi_f2d>
 8001e7c:	a330      	add	r3, pc, #192	; (adr r3, 8001f40 <main+0x1010>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fa09 	bl	8000298 <__aeabi_dsub>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	f7fe fe7d 	bl	8000b8c <__aeabi_d2f>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <main+0x1034>)
 8001e96:	601a      	str	r2, [r3, #0]
				if(v_l <= 0)
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <main+0x1034>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	d803      	bhi.n	8001eb0 <main+0xf80>
				{
					v_l = 0;
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <main+0x1034>)
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
				}
				sum_VL = (v_l*10.0)-(((int)v_l)*10);
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <main+0x1034>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb4f 	bl	8000558 <__aeabi_f2d>
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <main+0x101c>)
 8001ec0:	f7fe fba2 	bl	8000608 <__aeabi_dmul>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	4625      	mov	r5, r4
 8001eca:	461c      	mov	r4, r3
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <main+0x1034>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed6:	ee17 2a90 	vmov	r2, s15
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb26 	bl	8000534 <__aeabi_i2d>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4620      	mov	r0, r4
 8001eee:	4629      	mov	r1, r5
 8001ef0:	f7fe f9d2 	bl	8000298 <__aeabi_dsub>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	4621      	mov	r1, r4
 8001efc:	f7fe fe1e 	bl	8000b3c <__aeabi_d2iz>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <main+0x1038>)
 8001f04:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V low down %d.%d V\r\n",(int)v_l,sum_VL);
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <main+0x1034>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <main+0x1038>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	ee17 2a90 	vmov	r2, s15
 8001f18:	4915      	ldr	r1, [pc, #84]	; (8001f70 <main+0x1040>)
 8001f1a:	480f      	ldr	r0, [pc, #60]	; (8001f58 <main+0x1028>)
 8001f1c:	f005 fc1c 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <main+0x1028>)
 8001f22:	f7fe f95d 	bl	80001e0 <strlen>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	490a      	ldr	r1, [pc, #40]	; (8001f58 <main+0x1028>)
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <main+0x102c>)
 8001f32:	f004 fce8 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001f36:	e031      	b.n	8001f9c <main+0x106c>
			case 'x':
				state = start_Menu;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <main+0x1044>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
				break;
 8001f3e:	e02d      	b.n	8001f9c <main+0x106c>
 8001f40:	9999999a 	.word	0x9999999a
 8001f44:	3fb99999 	.word	0x3fb99999
 8001f48:	200000ac 	.word	0x200000ac
 8001f4c:	40240000 	.word	0x40240000
 8001f50:	200000b8 	.word	0x200000b8
 8001f54:	080090d4 	.word	0x080090d4
 8001f58:	20000118 	.word	0x20000118
 8001f5c:	20000698 	.word	0x20000698
 8001f60:	080090e8 	.word	0x080090e8
 8001f64:	200000b0 	.word	0x200000b0
 8001f68:	200000bc 	.word	0x200000bc
 8001f6c:	08009100 	.word	0x08009100
 8001f70:	08009114 	.word	0x08009114
 8001f74:	20000006 	.word	0x20000006
			default:
				sprintf(Menu, "Error!\r\n");
 8001f78:	4bab      	ldr	r3, [pc, #684]	; (8002228 <main+0x12f8>)
 8001f7a:	4aac      	ldr	r2, [pc, #688]	; (800222c <main+0x12fc>)
 8001f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f7e:	c303      	stmia	r3!, {r0, r1}
 8001f80:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001f82:	48a9      	ldr	r0, [pc, #676]	; (8002228 <main+0x12f8>)
 8001f84:	f7fe f92c 	bl	80001e0 <strlen>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f90:	49a5      	ldr	r1, [pc, #660]	; (8002228 <main+0x12f8>)
 8001f92:	48a7      	ldr	r0, [pc, #668]	; (8002230 <main+0x1300>)
 8001f94:	f004 fcb7 	bl	8006906 <HAL_UART_Transmit>
				break;
 8001f98:	e000      	b.n	8001f9c <main+0x106c>
				break;
 8001f9a:	bf00      	nop
			}
			break;
 8001f9c:	e3a2      	b.n	80026e4 <main+0x17b4>
		case Menu_2:
			sprintf(Menu, "Square wave\r\n a.freq Up +1Hz\r\n s.freq up +0.1Hz\r\n"
 8001f9e:	49a5      	ldr	r1, [pc, #660]	; (8002234 <main+0x1304>)
 8001fa0:	48a1      	ldr	r0, [pc, #644]	; (8002228 <main+0x12f8>)
 8001fa2:	f005 fbd9 	bl	8007758 <siprintf>
						  " d.freq down -1Hz\r\n f.freq down -0.1Hz\r\n"
						  " q.V high up +0.1V\r\n w.V high down -0.1V\r\n e.V low up +0.1V\r\n"
						  " r.V low down -0.1V\r\n 0.Duty cycle up +10%\r\n"
						  " 1.Duty cycle down -10%\r\n x.back\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001fa6:	48a0      	ldr	r0, [pc, #640]	; (8002228 <main+0x12f8>)
 8001fa8:	f7fe f91a 	bl	80001e0 <strlen>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb4:	499c      	ldr	r1, [pc, #624]	; (8002228 <main+0x12f8>)
 8001fb6:	489e      	ldr	r0, [pc, #632]	; (8002230 <main+0x1300>)
 8001fb8:	f004 fca5 	bl	8006906 <HAL_UART_Transmit>
			state = Menu_2_wait_input;
 8001fbc:	4b9e      	ldr	r3, [pc, #632]	; (8002238 <main+0x1308>)
 8001fbe:	2237      	movs	r2, #55	; 0x37
 8001fc0:	701a      	strb	r2, [r3, #0]
			break;
 8001fc2:	e38f      	b.n	80026e4 <main+0x17b4>
		case Menu_2_wait_input:
			switch(inputchar)
 8001fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc8:	2b65      	cmp	r3, #101	; 0x65
 8001fca:	f000 825c 	beq.w	8002486 <main+0x1556>
 8001fce:	2b65      	cmp	r3, #101	; 0x65
 8001fd0:	dc12      	bgt.n	8001ff8 <main+0x10c8>
 8001fd2:	2b31      	cmp	r3, #49	; 0x31
 8001fd4:	f000 8350 	beq.w	8002678 <main+0x1748>
 8001fd8:	2b31      	cmp	r3, #49	; 0x31
 8001fda:	dc07      	bgt.n	8001fec <main+0x10bc>
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	f000 837e 	beq.w	80026e0 <main+0x17b0>
 8001fe4:	2b30      	cmp	r3, #48	; 0x30
 8001fe6:	f000 8328 	beq.w	800263a <main+0x170a>
 8001fea:	e368      	b.n	80026be <main+0x178e>
 8001fec:	2b61      	cmp	r3, #97	; 0x61
 8001fee:	d018      	beq.n	8002022 <main+0x10f2>
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	f000 80bb 	beq.w	800216c <main+0x123c>
 8001ff6:	e362      	b.n	80026be <main+0x178e>
 8001ff8:	2b72      	cmp	r3, #114	; 0x72
 8001ffa:	f000 82bb 	beq.w	8002574 <main+0x1644>
 8001ffe:	2b72      	cmp	r3, #114	; 0x72
 8002000:	dc06      	bgt.n	8002010 <main+0x10e0>
 8002002:	2b66      	cmp	r3, #102	; 0x66
 8002004:	f000 8122 	beq.w	800224c <main+0x131c>
 8002008:	2b71      	cmp	r3, #113	; 0x71
 800200a:	f000 8182 	beq.w	8002312 <main+0x13e2>
 800200e:	e356      	b.n	80026be <main+0x178e>
 8002010:	2b77      	cmp	r3, #119	; 0x77
 8002012:	f000 81d5 	beq.w	80023c0 <main+0x1490>
 8002016:	2b78      	cmp	r3, #120	; 0x78
 8002018:	f000 834d 	beq.w	80026b6 <main+0x1786>
 800201c:	2b73      	cmp	r3, #115	; 0x73
 800201e:	d04e      	beq.n	80020be <main+0x118e>
 8002020:	e34d      	b.n	80026be <main+0x178e>
			{
			case -1:  //No Input
				break;
			case 'a':
				freq +=1;
 8002022:	4b86      	ldr	r3, [pc, #536]	; (800223c <main+0x130c>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800202c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002030:	4b82      	ldr	r3, [pc, #520]	; (800223c <main+0x130c>)
 8002032:	edc3 7a00 	vstr	s15, [r3]
				sum_freq = (freq*10.0)-(((int)freq)*10);
 8002036:	4b81      	ldr	r3, [pc, #516]	; (800223c <main+0x130c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa8c 	bl	8000558 <__aeabi_f2d>
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	4b7e      	ldr	r3, [pc, #504]	; (8002240 <main+0x1310>)
 8002046:	f7fe fadf 	bl	8000608 <__aeabi_dmul>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	4625      	mov	r5, r4
 8002050:	461c      	mov	r4, r3
 8002052:	4b7a      	ldr	r3, [pc, #488]	; (800223c <main+0x130c>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800205c:	ee17 2a90 	vmov	r2, s15
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa63 	bl	8000534 <__aeabi_i2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	f7fe f90f 	bl	8000298 <__aeabi_dsub>
 800207a:	4603      	mov	r3, r0
 800207c:	460c      	mov	r4, r1
 800207e:	4618      	mov	r0, r3
 8002080:	4621      	mov	r1, r4
 8002082:	f7fe fd5b 	bl	8000b3c <__aeabi_d2iz>
 8002086:	4602      	mov	r2, r0
 8002088:	4b6e      	ldr	r3, [pc, #440]	; (8002244 <main+0x1314>)
 800208a:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <main+0x130c>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002096:	4b6b      	ldr	r3, [pc, #428]	; (8002244 <main+0x1314>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	ee17 2a90 	vmov	r2, s15
 800209e:	496a      	ldr	r1, [pc, #424]	; (8002248 <main+0x1318>)
 80020a0:	4861      	ldr	r0, [pc, #388]	; (8002228 <main+0x12f8>)
 80020a2:	f005 fb59 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80020a6:	4860      	ldr	r0, [pc, #384]	; (8002228 <main+0x12f8>)
 80020a8:	f7fe f89a 	bl	80001e0 <strlen>
 80020ac:	4603      	mov	r3, r0
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b4:	495c      	ldr	r1, [pc, #368]	; (8002228 <main+0x12f8>)
 80020b6:	485e      	ldr	r0, [pc, #376]	; (8002230 <main+0x1300>)
 80020b8:	f004 fc25 	bl	8006906 <HAL_UART_Transmit>
				break;
 80020bc:	e311      	b.n	80026e2 <main+0x17b2>
			case 's':
				freq +=0.1;
 80020be:	4b5f      	ldr	r3, [pc, #380]	; (800223c <main+0x130c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa48 	bl	8000558 <__aeabi_f2d>
 80020c8:	a355      	add	r3, pc, #340	; (adr r3, 8002220 <main+0x12f0>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe f8e5 	bl	800029c <__adddf3>
 80020d2:	4603      	mov	r3, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	4618      	mov	r0, r3
 80020d8:	4621      	mov	r1, r4
 80020da:	f7fe fd57 	bl	8000b8c <__aeabi_d2f>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b56      	ldr	r3, [pc, #344]	; (800223c <main+0x130c>)
 80020e2:	601a      	str	r2, [r3, #0]
				sum_freq = (freq*10.0)-(((int)freq)*10);
 80020e4:	4b55      	ldr	r3, [pc, #340]	; (800223c <main+0x130c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa35 	bl	8000558 <__aeabi_f2d>
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <main+0x1310>)
 80020f4:	f7fe fa88 	bl	8000608 <__aeabi_dmul>
 80020f8:	4603      	mov	r3, r0
 80020fa:	460c      	mov	r4, r1
 80020fc:	4625      	mov	r5, r4
 80020fe:	461c      	mov	r4, r3
 8002100:	4b4e      	ldr	r3, [pc, #312]	; (800223c <main+0x130c>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210a:	ee17 2a90 	vmov	r2, s15
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa0c 	bl	8000534 <__aeabi_i2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4620      	mov	r0, r4
 8002122:	4629      	mov	r1, r5
 8002124:	f7fe f8b8 	bl	8000298 <__aeabi_dsub>
 8002128:	4603      	mov	r3, r0
 800212a:	460c      	mov	r4, r1
 800212c:	4618      	mov	r0, r3
 800212e:	4621      	mov	r1, r4
 8002130:	f7fe fd04 	bl	8000b3c <__aeabi_d2iz>
 8002134:	4602      	mov	r2, r0
 8002136:	4b43      	ldr	r3, [pc, #268]	; (8002244 <main+0x1314>)
 8002138:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 800213a:	4b40      	ldr	r3, [pc, #256]	; (800223c <main+0x130c>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002144:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <main+0x1314>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	ee17 2a90 	vmov	r2, s15
 800214c:	493e      	ldr	r1, [pc, #248]	; (8002248 <main+0x1318>)
 800214e:	4836      	ldr	r0, [pc, #216]	; (8002228 <main+0x12f8>)
 8002150:	f005 fb02 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002154:	4834      	ldr	r0, [pc, #208]	; (8002228 <main+0x12f8>)
 8002156:	f7fe f843 	bl	80001e0 <strlen>
 800215a:	4603      	mov	r3, r0
 800215c:	b29a      	uxth	r2, r3
 800215e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002162:	4931      	ldr	r1, [pc, #196]	; (8002228 <main+0x12f8>)
 8002164:	4832      	ldr	r0, [pc, #200]	; (8002230 <main+0x1300>)
 8002166:	f004 fbce 	bl	8006906 <HAL_UART_Transmit>
				break;
 800216a:	e2ba      	b.n	80026e2 <main+0x17b2>
			case 'd':
				freq -=1;
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <main+0x130c>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <main+0x130c>)
 800217c:	edc3 7a00 	vstr	s15, [r3]
				if(freq <= 0)
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <main+0x130c>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218e:	d803      	bhi.n	8002198 <main+0x1268>
				{
					freq = 0;
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <main+0x130c>)
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
				}
				sum_freq = (freq*10.0)-(((int)freq)*10);
 8002198:	4b28      	ldr	r3, [pc, #160]	; (800223c <main+0x130c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9db 	bl	8000558 <__aeabi_f2d>
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <main+0x1310>)
 80021a8:	f7fe fa2e 	bl	8000608 <__aeabi_dmul>
 80021ac:	4603      	mov	r3, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	4625      	mov	r5, r4
 80021b2:	461c      	mov	r4, r3
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <main+0x130c>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021be:	ee17 2a90 	vmov	r2, s15
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9b2 	bl	8000534 <__aeabi_i2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe f85e 	bl	8000298 <__aeabi_dsub>
 80021dc:	4603      	mov	r3, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	4618      	mov	r0, r3
 80021e2:	4621      	mov	r1, r4
 80021e4:	f7fe fcaa 	bl	8000b3c <__aeabi_d2iz>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <main+0x1314>)
 80021ec:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <main+0x130c>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <main+0x1314>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	ee17 2a90 	vmov	r2, s15
 8002200:	4911      	ldr	r1, [pc, #68]	; (8002248 <main+0x1318>)
 8002202:	4809      	ldr	r0, [pc, #36]	; (8002228 <main+0x12f8>)
 8002204:	f005 faa8 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002208:	4807      	ldr	r0, [pc, #28]	; (8002228 <main+0x12f8>)
 800220a:	f7fd ffe9 	bl	80001e0 <strlen>
 800220e:	4603      	mov	r3, r0
 8002210:	b29a      	uxth	r2, r3
 8002212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002216:	4904      	ldr	r1, [pc, #16]	; (8002228 <main+0x12f8>)
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <main+0x1300>)
 800221a:	f004 fb74 	bl	8006906 <HAL_UART_Transmit>
				break;
 800221e:	e260      	b.n	80026e2 <main+0x17b2>
 8002220:	9999999a 	.word	0x9999999a
 8002224:	3fb99999 	.word	0x3fb99999
 8002228:	20000118 	.word	0x20000118
 800222c:	08009148 	.word	0x08009148
 8002230:	20000698 	.word	0x20000698
 8002234:	08009208 	.word	0x08009208
 8002238:	20000006 	.word	0x20000006
 800223c:	20000000 	.word	0x20000000
 8002240:	40240000 	.word	0x40240000
 8002244:	200000b4 	.word	0x200000b4
 8002248:	080090c4 	.word	0x080090c4
			case 'f':
				freq -=0.1;
 800224c:	4bbc      	ldr	r3, [pc, #752]	; (8002540 <main+0x1610>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f981 	bl	8000558 <__aeabi_f2d>
 8002256:	a3b8      	add	r3, pc, #736	; (adr r3, 8002538 <main+0x1608>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe f81c 	bl	8000298 <__aeabi_dsub>
 8002260:	4603      	mov	r3, r0
 8002262:	460c      	mov	r4, r1
 8002264:	4618      	mov	r0, r3
 8002266:	4621      	mov	r1, r4
 8002268:	f7fe fc90 	bl	8000b8c <__aeabi_d2f>
 800226c:	4602      	mov	r2, r0
 800226e:	4bb4      	ldr	r3, [pc, #720]	; (8002540 <main+0x1610>)
 8002270:	601a      	str	r2, [r3, #0]
				if(freq <= 0)
 8002272:	4bb3      	ldr	r3, [pc, #716]	; (8002540 <main+0x1610>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	d803      	bhi.n	800228a <main+0x135a>
				{
					freq = 0;
 8002282:	4baf      	ldr	r3, [pc, #700]	; (8002540 <main+0x1610>)
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
				}
				sum_freq = (freq*10.0)-(((int)freq)*10);
 800228a:	4bad      	ldr	r3, [pc, #692]	; (8002540 <main+0x1610>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f962 	bl	8000558 <__aeabi_f2d>
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	4baa      	ldr	r3, [pc, #680]	; (8002544 <main+0x1614>)
 800229a:	f7fe f9b5 	bl	8000608 <__aeabi_dmul>
 800229e:	4603      	mov	r3, r0
 80022a0:	460c      	mov	r4, r1
 80022a2:	4625      	mov	r5, r4
 80022a4:	461c      	mov	r4, r3
 80022a6:	4ba6      	ldr	r3, [pc, #664]	; (8002540 <main+0x1610>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b0:	ee17 2a90 	vmov	r2, s15
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f939 	bl	8000534 <__aeabi_i2d>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4620      	mov	r0, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	f7fd ffe5 	bl	8000298 <__aeabi_dsub>
 80022ce:	4603      	mov	r3, r0
 80022d0:	460c      	mov	r4, r1
 80022d2:	4618      	mov	r0, r3
 80022d4:	4621      	mov	r1, r4
 80022d6:	f7fe fc31 	bl	8000b3c <__aeabi_d2iz>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b9a      	ldr	r3, [pc, #616]	; (8002548 <main+0x1618>)
 80022de:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "Freq %d.%d Hz\r\n",(int)freq,sum_freq);
 80022e0:	4b97      	ldr	r3, [pc, #604]	; (8002540 <main+0x1610>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ea:	4b97      	ldr	r3, [pc, #604]	; (8002548 <main+0x1618>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	ee17 2a90 	vmov	r2, s15
 80022f2:	4996      	ldr	r1, [pc, #600]	; (800254c <main+0x161c>)
 80022f4:	4896      	ldr	r0, [pc, #600]	; (8002550 <main+0x1620>)
 80022f6:	f005 fa2f 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80022fa:	4895      	ldr	r0, [pc, #596]	; (8002550 <main+0x1620>)
 80022fc:	f7fd ff70 	bl	80001e0 <strlen>
 8002300:	4603      	mov	r3, r0
 8002302:	b29a      	uxth	r2, r3
 8002304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002308:	4991      	ldr	r1, [pc, #580]	; (8002550 <main+0x1620>)
 800230a:	4892      	ldr	r0, [pc, #584]	; (8002554 <main+0x1624>)
 800230c:	f004 fafb 	bl	8006906 <HAL_UART_Transmit>
				break;
 8002310:	e1e7      	b.n	80026e2 <main+0x17b2>
			case 'q':
				v_h +=0.1;
 8002312:	4b91      	ldr	r3, [pc, #580]	; (8002558 <main+0x1628>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe f91e 	bl	8000558 <__aeabi_f2d>
 800231c:	a386      	add	r3, pc, #536	; (adr r3, 8002538 <main+0x1608>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fd ffbb 	bl	800029c <__adddf3>
 8002326:	4603      	mov	r3, r0
 8002328:	460c      	mov	r4, r1
 800232a:	4618      	mov	r0, r3
 800232c:	4621      	mov	r1, r4
 800232e:	f7fe fc2d 	bl	8000b8c <__aeabi_d2f>
 8002332:	4602      	mov	r2, r0
 8002334:	4b88      	ldr	r3, [pc, #544]	; (8002558 <main+0x1628>)
 8002336:	601a      	str	r2, [r3, #0]
				sum_VH = (v_h*10.0)-(((int)v_h)*10);
 8002338:	4b87      	ldr	r3, [pc, #540]	; (8002558 <main+0x1628>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f90b 	bl	8000558 <__aeabi_f2d>
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b7f      	ldr	r3, [pc, #508]	; (8002544 <main+0x1614>)
 8002348:	f7fe f95e 	bl	8000608 <__aeabi_dmul>
 800234c:	4603      	mov	r3, r0
 800234e:	460c      	mov	r4, r1
 8002350:	4625      	mov	r5, r4
 8002352:	461c      	mov	r4, r3
 8002354:	4b80      	ldr	r3, [pc, #512]	; (8002558 <main+0x1628>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235e:	ee17 2a90 	vmov	r2, s15
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f8e2 	bl	8000534 <__aeabi_i2d>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4620      	mov	r0, r4
 8002376:	4629      	mov	r1, r5
 8002378:	f7fd ff8e 	bl	8000298 <__aeabi_dsub>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	4618      	mov	r0, r3
 8002382:	4621      	mov	r1, r4
 8002384:	f7fe fbda 	bl	8000b3c <__aeabi_d2iz>
 8002388:	4602      	mov	r2, r0
 800238a:	4b74      	ldr	r3, [pc, #464]	; (800255c <main+0x162c>)
 800238c:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V high up %d.%d V\r\n",(int)v_h,sum_VH);
 800238e:	4b72      	ldr	r3, [pc, #456]	; (8002558 <main+0x1628>)
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002398:	4b70      	ldr	r3, [pc, #448]	; (800255c <main+0x162c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	ee17 2a90 	vmov	r2, s15
 80023a0:	496f      	ldr	r1, [pc, #444]	; (8002560 <main+0x1630>)
 80023a2:	486b      	ldr	r0, [pc, #428]	; (8002550 <main+0x1620>)
 80023a4:	f005 f9d8 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80023a8:	4869      	ldr	r0, [pc, #420]	; (8002550 <main+0x1620>)
 80023aa:	f7fd ff19 	bl	80001e0 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	4966      	ldr	r1, [pc, #408]	; (8002550 <main+0x1620>)
 80023b8:	4866      	ldr	r0, [pc, #408]	; (8002554 <main+0x1624>)
 80023ba:	f004 faa4 	bl	8006906 <HAL_UART_Transmit>
				break;
 80023be:	e190      	b.n	80026e2 <main+0x17b2>
			case 'w':
				v_h -=0.1;
 80023c0:	4b65      	ldr	r3, [pc, #404]	; (8002558 <main+0x1628>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8c7 	bl	8000558 <__aeabi_f2d>
 80023ca:	a35b      	add	r3, pc, #364	; (adr r3, 8002538 <main+0x1608>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fd ff62 	bl	8000298 <__aeabi_dsub>
 80023d4:	4603      	mov	r3, r0
 80023d6:	460c      	mov	r4, r1
 80023d8:	4618      	mov	r0, r3
 80023da:	4621      	mov	r1, r4
 80023dc:	f7fe fbd6 	bl	8000b8c <__aeabi_d2f>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b5d      	ldr	r3, [pc, #372]	; (8002558 <main+0x1628>)
 80023e4:	601a      	str	r2, [r3, #0]
				if(v_h <= 0)
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <main+0x1628>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	d803      	bhi.n	80023fe <main+0x14ce>
				{
					v_h = 0;
 80023f6:	4b58      	ldr	r3, [pc, #352]	; (8002558 <main+0x1628>)
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
				}
				sum_VH = (v_h*10.0)-(((int)v_h)*10);
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <main+0x1628>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f8a8 	bl	8000558 <__aeabi_f2d>
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	4b4d      	ldr	r3, [pc, #308]	; (8002544 <main+0x1614>)
 800240e:	f7fe f8fb 	bl	8000608 <__aeabi_dmul>
 8002412:	4603      	mov	r3, r0
 8002414:	460c      	mov	r4, r1
 8002416:	4625      	mov	r5, r4
 8002418:	461c      	mov	r4, r3
 800241a:	4b4f      	ldr	r3, [pc, #316]	; (8002558 <main+0x1628>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002424:	ee17 2a90 	vmov	r2, s15
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f87f 	bl	8000534 <__aeabi_i2d>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4620      	mov	r0, r4
 800243c:	4629      	mov	r1, r5
 800243e:	f7fd ff2b 	bl	8000298 <__aeabi_dsub>
 8002442:	4603      	mov	r3, r0
 8002444:	460c      	mov	r4, r1
 8002446:	4618      	mov	r0, r3
 8002448:	4621      	mov	r1, r4
 800244a:	f7fe fb77 	bl	8000b3c <__aeabi_d2iz>
 800244e:	4602      	mov	r2, r0
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <main+0x162c>)
 8002452:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V high down %d.%d V\r\n",(int)v_h,sum_VH);
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <main+0x1628>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <main+0x162c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	ee17 2a90 	vmov	r2, s15
 8002466:	493f      	ldr	r1, [pc, #252]	; (8002564 <main+0x1634>)
 8002468:	4839      	ldr	r0, [pc, #228]	; (8002550 <main+0x1620>)
 800246a:	f005 f975 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800246e:	4838      	ldr	r0, [pc, #224]	; (8002550 <main+0x1620>)
 8002470:	f7fd feb6 	bl	80001e0 <strlen>
 8002474:	4603      	mov	r3, r0
 8002476:	b29a      	uxth	r2, r3
 8002478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247c:	4934      	ldr	r1, [pc, #208]	; (8002550 <main+0x1620>)
 800247e:	4835      	ldr	r0, [pc, #212]	; (8002554 <main+0x1624>)
 8002480:	f004 fa41 	bl	8006906 <HAL_UART_Transmit>
				break;
 8002484:	e12d      	b.n	80026e2 <main+0x17b2>
			case 'e':
				v_l +=0.1;
 8002486:	4b38      	ldr	r3, [pc, #224]	; (8002568 <main+0x1638>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe f864 	bl	8000558 <__aeabi_f2d>
 8002490:	a329      	add	r3, pc, #164	; (adr r3, 8002538 <main+0x1608>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fd ff01 	bl	800029c <__adddf3>
 800249a:	4603      	mov	r3, r0
 800249c:	460c      	mov	r4, r1
 800249e:	4618      	mov	r0, r3
 80024a0:	4621      	mov	r1, r4
 80024a2:	f7fe fb73 	bl	8000b8c <__aeabi_d2f>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <main+0x1638>)
 80024aa:	601a      	str	r2, [r3, #0]
				sum_VL = (v_l*10.0)-(((int)v_l)*10);
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <main+0x1638>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f851 	bl	8000558 <__aeabi_f2d>
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <main+0x1614>)
 80024bc:	f7fe f8a4 	bl	8000608 <__aeabi_dmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	4625      	mov	r5, r4
 80024c6:	461c      	mov	r4, r3
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <main+0x1638>)
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d2:	ee17 2a90 	vmov	r2, s15
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe f828 	bl	8000534 <__aeabi_i2d>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4620      	mov	r0, r4
 80024ea:	4629      	mov	r1, r5
 80024ec:	f7fd fed4 	bl	8000298 <__aeabi_dsub>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	4618      	mov	r0, r3
 80024f6:	4621      	mov	r1, r4
 80024f8:	f7fe fb20 	bl	8000b3c <__aeabi_d2iz>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <main+0x163c>)
 8002500:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V low up %d.%d V\r\n",(int)v_l,sum_VL);
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <main+0x1638>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <main+0x163c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	ee17 2a90 	vmov	r2, s15
 8002514:	4916      	ldr	r1, [pc, #88]	; (8002570 <main+0x1640>)
 8002516:	480e      	ldr	r0, [pc, #56]	; (8002550 <main+0x1620>)
 8002518:	f005 f91e 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <main+0x1620>)
 800251e:	f7fd fe5f 	bl	80001e0 <strlen>
 8002522:	4603      	mov	r3, r0
 8002524:	b29a      	uxth	r2, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	4909      	ldr	r1, [pc, #36]	; (8002550 <main+0x1620>)
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <main+0x1624>)
 800252e:	f004 f9ea 	bl	8006906 <HAL_UART_Transmit>
				break;
 8002532:	e0d6      	b.n	80026e2 <main+0x17b2>
 8002534:	f3af 8000 	nop.w
 8002538:	9999999a 	.word	0x9999999a
 800253c:	3fb99999 	.word	0x3fb99999
 8002540:	20000000 	.word	0x20000000
 8002544:	40240000 	.word	0x40240000
 8002548:	200000b4 	.word	0x200000b4
 800254c:	080090c4 	.word	0x080090c4
 8002550:	20000118 	.word	0x20000118
 8002554:	20000698 	.word	0x20000698
 8002558:	200000ac 	.word	0x200000ac
 800255c:	200000b8 	.word	0x200000b8
 8002560:	080090d4 	.word	0x080090d4
 8002564:	080090e8 	.word	0x080090e8
 8002568:	200000b0 	.word	0x200000b0
 800256c:	200000bc 	.word	0x200000bc
 8002570:	08009100 	.word	0x08009100
			case 'r':
				v_l -=0.1;
 8002574:	4b9a      	ldr	r3, [pc, #616]	; (80027e0 <main+0x18b0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffed 	bl	8000558 <__aeabi_f2d>
 800257e:	a392      	add	r3, pc, #584	; (adr r3, 80027c8 <main+0x1898>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fd fe88 	bl	8000298 <__aeabi_dsub>
 8002588:	4603      	mov	r3, r0
 800258a:	460c      	mov	r4, r1
 800258c:	4618      	mov	r0, r3
 800258e:	4621      	mov	r1, r4
 8002590:	f7fe fafc 	bl	8000b8c <__aeabi_d2f>
 8002594:	4602      	mov	r2, r0
 8002596:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <main+0x18b0>)
 8002598:	601a      	str	r2, [r3, #0]
				if(v_l <= 0)
 800259a:	4b91      	ldr	r3, [pc, #580]	; (80027e0 <main+0x18b0>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	d803      	bhi.n	80025b2 <main+0x1682>
				{
					v_l = 0;
 80025aa:	4b8d      	ldr	r3, [pc, #564]	; (80027e0 <main+0x18b0>)
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
				}
				sum_VL = (v_l*10.0)-(((int)v_l)*10);
 80025b2:	4b8b      	ldr	r3, [pc, #556]	; (80027e0 <main+0x18b0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ffce 	bl	8000558 <__aeabi_f2d>
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <main+0x18b4>)
 80025c2:	f7fe f821 	bl	8000608 <__aeabi_dmul>
 80025c6:	4603      	mov	r3, r0
 80025c8:	460c      	mov	r4, r1
 80025ca:	4625      	mov	r5, r4
 80025cc:	461c      	mov	r4, r3
 80025ce:	4b84      	ldr	r3, [pc, #528]	; (80027e0 <main+0x18b0>)
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d8:	ee17 2a90 	vmov	r2, s15
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ffa5 	bl	8000534 <__aeabi_i2d>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4620      	mov	r0, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	f7fd fe51 	bl	8000298 <__aeabi_dsub>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	4618      	mov	r0, r3
 80025fc:	4621      	mov	r1, r4
 80025fe:	f7fe fa9d 	bl	8000b3c <__aeabi_d2iz>
 8002602:	4602      	mov	r2, r0
 8002604:	4b78      	ldr	r3, [pc, #480]	; (80027e8 <main+0x18b8>)
 8002606:	601a      	str	r2, [r3, #0]
				sprintf(Menu, "V low down %d.%d V\r\n",(int)v_l,sum_VL);
 8002608:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <main+0x18b0>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002612:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <main+0x18b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	ee17 2a90 	vmov	r2, s15
 800261a:	4974      	ldr	r1, [pc, #464]	; (80027ec <main+0x18bc>)
 800261c:	4874      	ldr	r0, [pc, #464]	; (80027f0 <main+0x18c0>)
 800261e:	f005 f89b 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002622:	4873      	ldr	r0, [pc, #460]	; (80027f0 <main+0x18c0>)
 8002624:	f7fd fddc 	bl	80001e0 <strlen>
 8002628:	4603      	mov	r3, r0
 800262a:	b29a      	uxth	r2, r3
 800262c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002630:	496f      	ldr	r1, [pc, #444]	; (80027f0 <main+0x18c0>)
 8002632:	4870      	ldr	r0, [pc, #448]	; (80027f4 <main+0x18c4>)
 8002634:	f004 f967 	bl	8006906 <HAL_UART_Transmit>
				break;
 8002638:	e053      	b.n	80026e2 <main+0x17b2>
			case '0':
				duty -= 10;
 800263a:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <main+0x18c8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3b0a      	subs	r3, #10
 8002640:	4a6d      	ldr	r2, [pc, #436]	; (80027f8 <main+0x18c8>)
 8002642:	6013      	str	r3, [r2, #0]
				if(duty <= 0)
 8002644:	4b6c      	ldr	r3, [pc, #432]	; (80027f8 <main+0x18c8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	dc02      	bgt.n	8002652 <main+0x1722>
				{
					duty = 0;
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <main+0x18c8>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
				}
				sprintf(Menu, "Duty %d %%\r\n",duty);
 8002652:	4b69      	ldr	r3, [pc, #420]	; (80027f8 <main+0x18c8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	4968      	ldr	r1, [pc, #416]	; (80027fc <main+0x18cc>)
 800265a:	4865      	ldr	r0, [pc, #404]	; (80027f0 <main+0x18c0>)
 800265c:	f005 f87c 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002660:	4863      	ldr	r0, [pc, #396]	; (80027f0 <main+0x18c0>)
 8002662:	f7fd fdbd 	bl	80001e0 <strlen>
 8002666:	4603      	mov	r3, r0
 8002668:	b29a      	uxth	r2, r3
 800266a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266e:	4960      	ldr	r1, [pc, #384]	; (80027f0 <main+0x18c0>)
 8002670:	4860      	ldr	r0, [pc, #384]	; (80027f4 <main+0x18c4>)
 8002672:	f004 f948 	bl	8006906 <HAL_UART_Transmit>
				break;
 8002676:	e034      	b.n	80026e2 <main+0x17b2>
			case '1':
				duty += 10;
 8002678:	4b5f      	ldr	r3, [pc, #380]	; (80027f8 <main+0x18c8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330a      	adds	r3, #10
 800267e:	4a5e      	ldr	r2, [pc, #376]	; (80027f8 <main+0x18c8>)
 8002680:	6013      	str	r3, [r2, #0]
				if(duty >= 100)
 8002682:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <main+0x18c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b63      	cmp	r3, #99	; 0x63
 8002688:	dd02      	ble.n	8002690 <main+0x1760>
				{
					duty = 100;
 800268a:	4b5b      	ldr	r3, [pc, #364]	; (80027f8 <main+0x18c8>)
 800268c:	2264      	movs	r2, #100	; 0x64
 800268e:	601a      	str	r2, [r3, #0]
				}
				sprintf(Menu, "Duty %d %%\r\n",duty);
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <main+0x18c8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4959      	ldr	r1, [pc, #356]	; (80027fc <main+0x18cc>)
 8002698:	4855      	ldr	r0, [pc, #340]	; (80027f0 <main+0x18c0>)
 800269a:	f005 f85d 	bl	8007758 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800269e:	4854      	ldr	r0, [pc, #336]	; (80027f0 <main+0x18c0>)
 80026a0:	f7fd fd9e 	bl	80001e0 <strlen>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ac:	4950      	ldr	r1, [pc, #320]	; (80027f0 <main+0x18c0>)
 80026ae:	4851      	ldr	r0, [pc, #324]	; (80027f4 <main+0x18c4>)
 80026b0:	f004 f929 	bl	8006906 <HAL_UART_Transmit>
				break;
 80026b4:	e015      	b.n	80026e2 <main+0x17b2>
			case 'x':
				state = start_Menu;
 80026b6:	4b52      	ldr	r3, [pc, #328]	; (8002800 <main+0x18d0>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
				break;
 80026bc:	e011      	b.n	80026e2 <main+0x17b2>
			default:
				sprintf(Menu, "Error!\r\n");
 80026be:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <main+0x18c0>)
 80026c0:	4a50      	ldr	r2, [pc, #320]	; (8002804 <main+0x18d4>)
 80026c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80026c4:	c303      	stmia	r3!, {r0, r1}
 80026c6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80026c8:	4849      	ldr	r0, [pc, #292]	; (80027f0 <main+0x18c0>)
 80026ca:	f7fd fd89 	bl	80001e0 <strlen>
 80026ce:	4603      	mov	r3, r0
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d6:	4946      	ldr	r1, [pc, #280]	; (80027f0 <main+0x18c0>)
 80026d8:	4846      	ldr	r0, [pc, #280]	; (80027f4 <main+0x18c4>)
 80026da:	f004 f914 	bl	8006906 <HAL_UART_Transmit>
				break;
 80026de:	e000      	b.n	80026e2 <main+0x17b2>
				break;
 80026e0:	bf00      	nop
			}
			break;
 80026e2:	bf00      	nop
		}


		/*Mode 0 1 2 transmit data to DAC*/
		Volt = ADCin*3.3/4095.0;
 80026e4:	4b48      	ldr	r3, [pc, #288]	; (8002808 <main+0x18d8>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd ff23 	bl	8000534 <__aeabi_i2d>
 80026ee:	a338      	add	r3, pc, #224	; (adr r3, 80027d0 <main+0x18a0>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f7fd ff88 	bl	8000608 <__aeabi_dmul>
 80026f8:	4603      	mov	r3, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	4618      	mov	r0, r3
 80026fe:	4621      	mov	r1, r4
 8002700:	a335      	add	r3, pc, #212	; (adr r3, 80027d8 <main+0x18a8>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fe f8a9 	bl	800085c <__aeabi_ddiv>
 800270a:	4603      	mov	r3, r0
 800270c:	460c      	mov	r4, r1
 800270e:	4618      	mov	r0, r3
 8002710:	4621      	mov	r1, r4
 8002712:	f7fe fa3b 	bl	8000b8c <__aeabi_d2f>
 8002716:	4602      	mov	r2, r0
 8002718:	4b3c      	ldr	r3, [pc, #240]	; (800280c <main+0x18dc>)
 800271a:	601a      	str	r2, [r3, #0]

		static uint64_t timestamp = 0;


		if (micros() - timestamp > 1000)//1000000us = +1  , 1000us = +0.001
 800271c:	f000 fe2c 	bl	8003378 <micros>
 8002720:	460a      	mov	r2, r1
 8002722:	4601      	mov	r1, r0
 8002724:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <main+0x18e0>)
 8002726:	e9d3 8900 	ldrd	r8, r9, [r3]
 800272a:	460b      	mov	r3, r1
 800272c:	4614      	mov	r4, r2
 800272e:	ebb3 0308 	subs.w	r3, r3, r8
 8002732:	eb64 0409 	sbc.w	r4, r4, r9
 8002736:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	42a2      	cmp	r2, r4
 8002740:	bf08      	it	eq
 8002742:	4299      	cmpeq	r1, r3
 8002744:	f4be ac1b 	bcs.w	8000f7e <main+0x4e>
		{
			Amp = (v_h - v_l);
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <main+0x18e4>)
 800274a:	ed93 7a00 	vldr	s14, [r3]
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <main+0x18b0>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002758:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <main+0x18e8>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
			if(Amp <= 0)
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <main+0x18e8>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	d803      	bhi.n	8002776 <main+0x1846>
			{
				Amp = 0;
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <main+0x18e8>)
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
			}
			timestamp = micros();
 8002776:	f000 fdff 	bl	8003378 <micros>
 800277a:	4603      	mov	r3, r0
 800277c:	460c      	mov	r4, r1
 800277e:	4a24      	ldr	r2, [pc, #144]	; (8002810 <main+0x18e0>)
 8002780:	e9c2 3400 	strd	r3, r4, [r2]

	//////////////////////////////////////////////////////////////////////////////////////////
			/*Saw tooth*/
			if(wave == 0)
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <main+0x18ec>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 8145 	bne.w	8002a18 <main+0x1ae8>
			{
				time = time+1;
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <main+0x18f0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a22      	ldr	r2, [pc, #136]	; (8002820 <main+0x18f0>)
 8002796:	6013      	str	r3, [r2, #0]
				if(freq == 0)
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <main+0x18f4>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	d141      	bne.n	800282c <main+0x18fc>
				{
					dataOut = (Amp/2)+v_l;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <main+0x18e8>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <main+0x18b0>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <main+0x18f8>)
 80027c2:	edc3 7a00 	vstr	s15, [r3]
 80027c6:	e0ee      	b.n	80029a6 <main+0x1a76>
 80027c8:	9999999a 	.word	0x9999999a
 80027cc:	3fb99999 	.word	0x3fb99999
 80027d0:	66666666 	.word	0x66666666
 80027d4:	400a6666 	.word	0x400a6666
 80027d8:	00000000 	.word	0x00000000
 80027dc:	40affe00 	.word	0x40affe00
 80027e0:	200000b0 	.word	0x200000b0
 80027e4:	40240000 	.word	0x40240000
 80027e8:	200000bc 	.word	0x200000bc
 80027ec:	08009114 	.word	0x08009114
 80027f0:	20000118 	.word	0x20000118
 80027f4:	20000698 	.word	0x20000698
 80027f8:	200000a8 	.word	0x200000a8
 80027fc:	080092f0 	.word	0x080092f0
 8002800:	20000006 	.word	0x20000006
 8002804:	08009148 	.word	0x08009148
 8002808:	20000094 	.word	0x20000094
 800280c:	200000c4 	.word	0x200000c4
 8002810:	20000500 	.word	0x20000500
 8002814:	200000ac 	.word	0x200000ac
 8002818:	200000cc 	.word	0x200000cc
 800281c:	20000004 	.word	0x20000004
 8002820:	200000c8 	.word	0x200000c8
 8002824:	20000000 	.word	0x20000000
 8002828:	200000d0 	.word	0x200000d0
				}
				else
				{
					if(slope == 1)
 800282c:	4b90      	ldr	r3, [pc, #576]	; (8002a70 <main+0x1b40>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d156      	bne.n	80028e2 <main+0x19b2>
					{
						slopeup = ((time*0.001)*freq*Amp) + v_l;
 8002834:	4b8f      	ldr	r3, [pc, #572]	; (8002a74 <main+0x1b44>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe6b 	bl	8000514 <__aeabi_ui2d>
 800283e:	a388      	add	r3, pc, #544	; (adr r3, 8002a60 <main+0x1b30>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f7fd fee0 	bl	8000608 <__aeabi_dmul>
 8002848:	4603      	mov	r3, r0
 800284a:	460c      	mov	r4, r1
 800284c:	4625      	mov	r5, r4
 800284e:	461c      	mov	r4, r3
 8002850:	4b89      	ldr	r3, [pc, #548]	; (8002a78 <main+0x1b48>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe7f 	bl	8000558 <__aeabi_f2d>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4620      	mov	r0, r4
 8002860:	4629      	mov	r1, r5
 8002862:	f7fd fed1 	bl	8000608 <__aeabi_dmul>
 8002866:	4603      	mov	r3, r0
 8002868:	460c      	mov	r4, r1
 800286a:	4625      	mov	r5, r4
 800286c:	461c      	mov	r4, r3
 800286e:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <main+0x1b4c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe70 	bl	8000558 <__aeabi_f2d>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4620      	mov	r0, r4
 800287e:	4629      	mov	r1, r5
 8002880:	f7fd fec2 	bl	8000608 <__aeabi_dmul>
 8002884:	4603      	mov	r3, r0
 8002886:	460c      	mov	r4, r1
 8002888:	4625      	mov	r5, r4
 800288a:	461c      	mov	r4, r3
 800288c:	4b7c      	ldr	r3, [pc, #496]	; (8002a80 <main+0x1b50>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fe61 	bl	8000558 <__aeabi_f2d>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fd fcfd 	bl	800029c <__adddf3>
 80028a2:	4603      	mov	r3, r0
 80028a4:	460c      	mov	r4, r1
 80028a6:	4618      	mov	r0, r3
 80028a8:	4621      	mov	r1, r4
 80028aa:	f7fe f96f 	bl	8000b8c <__aeabi_d2f>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <main+0x1b54>)
 80028b2:	601a      	str	r2, [r3, #0]
						dataOut = slopeup;
 80028b4:	4b73      	ldr	r3, [pc, #460]	; (8002a84 <main+0x1b54>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a73      	ldr	r2, [pc, #460]	; (8002a88 <main+0x1b58>)
 80028ba:	6013      	str	r3, [r2, #0]
						if (dataOut >= v_h)
 80028bc:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <main+0x1b58>)
 80028be:	ed93 7a00 	vldr	s14, [r3]
 80028c2:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <main+0x1b5c>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d0:	db69      	blt.n	80029a6 <main+0x1a76>
						{
							dataOut = v_l;
 80028d2:	4b6b      	ldr	r3, [pc, #428]	; (8002a80 <main+0x1b50>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6c      	ldr	r2, [pc, #432]	; (8002a88 <main+0x1b58>)
 80028d8:	6013      	str	r3, [r2, #0]
							time = 0;
 80028da:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <main+0x1b44>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e061      	b.n	80029a6 <main+0x1a76>
						}
					}
					else
					{
						slopeup = ((time*0.001)*freq*Amp) + v_l;
 80028e2:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <main+0x1b44>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fe14 	bl	8000514 <__aeabi_ui2d>
 80028ec:	a35c      	add	r3, pc, #368	; (adr r3, 8002a60 <main+0x1b30>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f7fd fe89 	bl	8000608 <__aeabi_dmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	460c      	mov	r4, r1
 80028fa:	4625      	mov	r5, r4
 80028fc:	461c      	mov	r4, r3
 80028fe:	4b5e      	ldr	r3, [pc, #376]	; (8002a78 <main+0x1b48>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fe28 	bl	8000558 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4620      	mov	r0, r4
 800290e:	4629      	mov	r1, r5
 8002910:	f7fd fe7a 	bl	8000608 <__aeabi_dmul>
 8002914:	4603      	mov	r3, r0
 8002916:	460c      	mov	r4, r1
 8002918:	4625      	mov	r5, r4
 800291a:	461c      	mov	r4, r3
 800291c:	4b57      	ldr	r3, [pc, #348]	; (8002a7c <main+0x1b4c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fe19 	bl	8000558 <__aeabi_f2d>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	f7fd fe6b 	bl	8000608 <__aeabi_dmul>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	4625      	mov	r5, r4
 8002938:	461c      	mov	r4, r3
 800293a:	4b51      	ldr	r3, [pc, #324]	; (8002a80 <main+0x1b50>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fe0a 	bl	8000558 <__aeabi_f2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4620      	mov	r0, r4
 800294a:	4629      	mov	r1, r5
 800294c:	f7fd fca6 	bl	800029c <__adddf3>
 8002950:	4603      	mov	r3, r0
 8002952:	460c      	mov	r4, r1
 8002954:	4618      	mov	r0, r3
 8002956:	4621      	mov	r1, r4
 8002958:	f7fe f918 	bl	8000b8c <__aeabi_d2f>
 800295c:	4602      	mov	r2, r0
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <main+0x1b54>)
 8002960:	601a      	str	r2, [r3, #0]
						dataOut = (v_h - slopeup)+v_l;// (Max - graphslope) + v_l
 8002962:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <main+0x1b5c>)
 8002964:	ed93 7a00 	vldr	s14, [r3]
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <main+0x1b54>)
 800296a:	edd3 7a00 	vldr	s15, [r3]
 800296e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <main+0x1b50>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297c:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <main+0x1b58>)
 800297e:	edc3 7a00 	vstr	s15, [r3]
						if ( slopeup >= v_h)
 8002982:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <main+0x1b54>)
 8002984:	ed93 7a00 	vldr	s14, [r3]
 8002988:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <main+0x1b5c>)
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	db06      	blt.n	80029a6 <main+0x1a76>
						{
							slopeup = v_l;
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <main+0x1b50>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a39      	ldr	r2, [pc, #228]	; (8002a84 <main+0x1b54>)
 800299e:	6013      	str	r3, [r2, #0]
							time = 0;
 80029a0:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <main+0x1b44>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
						}
					}
				}

				Output = dataOut*4095/3.3;
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <main+0x1b58>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002a90 <main+0x1b60>
 80029b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b4:	ee17 0a90 	vmov	r0, s15
 80029b8:	f7fd fdce 	bl	8000558 <__aeabi_f2d>
 80029bc:	a32a      	add	r3, pc, #168	; (adr r3, 8002a68 <main+0x1b38>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fd ff4b 	bl	800085c <__aeabi_ddiv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	460c      	mov	r4, r1
 80029ca:	4618      	mov	r0, r3
 80029cc:	4621      	mov	r1, r4
 80029ce:	f7fe f8dd 	bl	8000b8c <__aeabi_d2f>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b2f      	ldr	r3, [pc, #188]	; (8002a94 <main+0x1b64>)
 80029d6:	601a      	str	r2, [r3, #0]
				if (hspi3.State == HAL_SPI_STATE_READY
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <main+0x1b68>)
 80029da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	f47e aacc 	bne.w	8000f7e <main+0x4e>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 80029e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ea:	482c      	ldr	r0, [pc, #176]	; (8002a9c <main+0x1b6c>)
 80029ec:	f002 fb5c 	bl	80050a8 <HAL_GPIO_ReadPin>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f47e aac3 	bne.w	8000f7e <main+0x4e>
				{
					MCP4922SetOutput(DACConfig, Output);
 80029f8:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <main+0x1b70>)
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <main+0x1b64>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a06:	ee17 3a90 	vmov	r3, s15
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f000 fc54 	bl	80032bc <MCP4922SetOutput>
 8002a14:	f7fe bab3 	b.w	8000f7e <main+0x4e>
				}
			}

	///////////////////////////////////////////////////////////////////////////////////
			/*Sine wave*/
			else if(wave == 1)
 8002a18:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <main+0x1b74>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 80dc 	bne.w	8002bda <main+0x1caa>
			{
				time = time+1;
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <main+0x1b44>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <main+0x1b44>)
 8002a2a:	6013      	str	r3, [r2, #0]
				if(freq == 0)
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <main+0x1b48>)
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3a:	d135      	bne.n	8002aa8 <main+0x1b78>
				{
					dataOut = (Amp/2) + v_l;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <main+0x1b4c>)
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <main+0x1b50>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <main+0x1b58>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]
 8002a5a:	e085      	b.n	8002b68 <main+0x1c38>
 8002a5c:	f3af 8000 	nop.w
 8002a60:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a64:	3f50624d 	.word	0x3f50624d
 8002a68:	66666666 	.word	0x66666666
 8002a6c:	400a6666 	.word	0x400a6666
 8002a70:	200000a0 	.word	0x200000a0
 8002a74:	200000c8 	.word	0x200000c8
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	200000cc 	.word	0x200000cc
 8002a80:	200000b0 	.word	0x200000b0
 8002a84:	200000a4 	.word	0x200000a4
 8002a88:	200000d0 	.word	0x200000d0
 8002a8c:	200000ac 	.word	0x200000ac
 8002a90:	457ff000 	.word	0x457ff000
 8002a94:	200000d4 	.word	0x200000d4
 8002a98:	20000558 	.word	0x20000558
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	20000005 	.word	0x20000005
 8002aa4:	20000004 	.word	0x20000004
				}
				else
				{
					dataOut = v_l+(Amp/2)+(Amp/2*sin(2*3.14*freq*time*0.001));//x= v_l+A+sin(2*pi*f*t)
 8002aa8:	4bcf      	ldr	r3, [pc, #828]	; (8002de8 <main+0x1eb8>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ab2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ab6:	4bcd      	ldr	r3, [pc, #820]	; (8002dec <main+0x1ebc>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac0:	ee17 0a90 	vmov	r0, s15
 8002ac4:	f7fd fd48 	bl	8000558 <__aeabi_f2d>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	460d      	mov	r5, r1
 8002acc:	4bc6      	ldr	r3, [pc, #792]	; (8002de8 <main+0x1eb8>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002ad6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ada:	ee16 0a90 	vmov	r0, s13
 8002ade:	f7fd fd3b 	bl	8000558 <__aeabi_f2d>
 8002ae2:	4680      	mov	r8, r0
 8002ae4:	4689      	mov	r9, r1
 8002ae6:	4bc2      	ldr	r3, [pc, #776]	; (8002df0 <main+0x1ec0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd34 	bl	8000558 <__aeabi_f2d>
 8002af0:	a3b7      	add	r3, pc, #732	; (adr r3, 8002dd0 <main+0x1ea0>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd fd87 	bl	8000608 <__aeabi_dmul>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4692      	mov	sl, r2
 8002b00:	469b      	mov	fp, r3
 8002b02:	4bbc      	ldr	r3, [pc, #752]	; (8002df4 <main+0x1ec4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fd04 	bl	8000514 <__aeabi_ui2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4650      	mov	r0, sl
 8002b12:	4659      	mov	r1, fp
 8002b14:	f7fd fd78 	bl	8000608 <__aeabi_dmul>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	a3ad      	add	r3, pc, #692	; (adr r3, 8002dd8 <main+0x1ea8>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f7fd fd6f 	bl	8000608 <__aeabi_dmul>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	ec43 2b17 	vmov	d7, r2, r3
 8002b32:	eeb0 0a47 	vmov.f32	s0, s14
 8002b36:	eef0 0a67 	vmov.f32	s1, s15
 8002b3a:	f005 fa09 	bl	8007f50 <sin>
 8002b3e:	ec53 2b10 	vmov	r2, r3, d0
 8002b42:	4640      	mov	r0, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	f7fd fd5f 	bl	8000608 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fd fba3 	bl	800029c <__adddf3>
 8002b56:	4603      	mov	r3, r0
 8002b58:	460c      	mov	r4, r1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	f7fe f815 	bl	8000b8c <__aeabi_d2f>
 8002b62:	4602      	mov	r2, r0
 8002b64:	4ba4      	ldr	r3, [pc, #656]	; (8002df8 <main+0x1ec8>)
 8002b66:	601a      	str	r2, [r3, #0]
				}
				Output = dataOut*4095/3.3;
 8002b68:	4ba3      	ldr	r3, [pc, #652]	; (8002df8 <main+0x1ec8>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002dfc <main+0x1ecc>
 8002b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b76:	ee17 0a90 	vmov	r0, s15
 8002b7a:	f7fd fced 	bl	8000558 <__aeabi_f2d>
 8002b7e:	a398      	add	r3, pc, #608	; (adr r3, 8002de0 <main+0x1eb0>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fe6a 	bl	800085c <__aeabi_ddiv>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	460c      	mov	r4, r1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	4621      	mov	r1, r4
 8002b90:	f7fd fffc 	bl	8000b8c <__aeabi_d2f>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b9a      	ldr	r3, [pc, #616]	; (8002e00 <main+0x1ed0>)
 8002b98:	601a      	str	r2, [r3, #0]
				if (hspi3.State == HAL_SPI_STATE_READY
 8002b9a:	4b9a      	ldr	r3, [pc, #616]	; (8002e04 <main+0x1ed4>)
 8002b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	f47e a9eb 	bne.w	8000f7e <main+0x4e>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 8002ba8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bac:	4896      	ldr	r0, [pc, #600]	; (8002e08 <main+0x1ed8>)
 8002bae:	f002 fa7b 	bl	80050a8 <HAL_GPIO_ReadPin>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f47e a9e2 	bne.w	8000f7e <main+0x4e>
				{
					MCP4922SetOutput(DACConfig, Output);
 8002bba:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <main+0x1edc>)
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	4b90      	ldr	r3, [pc, #576]	; (8002e00 <main+0x1ed0>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc8:	ee17 3a90 	vmov	r3, s15
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f000 fb73 	bl	80032bc <MCP4922SetOutput>
 8002bd6:	f7fe b9d2 	b.w	8000f7e <main+0x4e>
				}
			}
	////////////////////////////////////////////////////////////////////////////////////////////////
			/*Square wave*/
			else if(wave == 2)
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <main+0x1ee0>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	f040 80cf 	bne.w	8002d82 <main+0x1e52>
			{
				time = time+1;
 8002be4:	4b83      	ldr	r3, [pc, #524]	; (8002df4 <main+0x1ec4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4a82      	ldr	r2, [pc, #520]	; (8002df4 <main+0x1ec4>)
 8002bec:	6013      	str	r3, [r2, #0]
				if(freq == 0)
 8002bee:	4b80      	ldr	r3, [pc, #512]	; (8002df0 <main+0x1ec0>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfc:	d10f      	bne.n	8002c1e <main+0x1cee>
				{
					dataOut = (Amp/2) + v_l;
 8002bfe:	4b7a      	ldr	r3, [pc, #488]	; (8002de8 <main+0x1eb8>)
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c0c:	4b77      	ldr	r3, [pc, #476]	; (8002dec <main+0x1ebc>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c16:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <main+0x1ec8>)
 8002c18:	edc3 7a00 	vstr	s15, [r3]
 8002c1c:	e078      	b.n	8002d10 <main+0x1de0>
				}
				else
				{
					T = duty/freq/100.0;
 8002c1e:	4b7d      	ldr	r3, [pc, #500]	; (8002e14 <main+0x1ee4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c2a:	4b71      	ldr	r3, [pc, #452]	; (8002df0 <main+0x1ec0>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c34:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002e18 <main+0x1ee8>
 8002c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c3c:	4b77      	ldr	r3, [pc, #476]	; (8002e1c <main+0x1eec>)
 8002c3e:	edc3 7a00 	vstr	s15, [r3]
					if( (time*0.001) <= T)
 8002c42:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <main+0x1ec4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc64 	bl	8000514 <__aeabi_ui2d>
 8002c4c:	a362      	add	r3, pc, #392	; (adr r3, 8002dd8 <main+0x1ea8>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd fcd9 	bl	8000608 <__aeabi_dmul>
 8002c56:	4603      	mov	r3, r0
 8002c58:	460c      	mov	r4, r1
 8002c5a:	4625      	mov	r5, r4
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <main+0x1eec>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc78 	bl	8000558 <__aeabi_f2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f7fd ff46 	bl	8000b00 <__aeabi_dcmple>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <main+0x1d54>
					{
						dataOut = v_h;
 8002c7a:	4b69      	ldr	r3, [pc, #420]	; (8002e20 <main+0x1ef0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <main+0x1ec8>)
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e045      	b.n	8002d10 <main+0x1de0>
					}
					else if((time*0.001) >= T && (time*0.001) <= 1/freq)// 1/f = time -> xxx sec/pulse
 8002c84:	4b5b      	ldr	r3, [pc, #364]	; (8002df4 <main+0x1ec4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc43 	bl	8000514 <__aeabi_ui2d>
 8002c8e:	a352      	add	r3, pc, #328	; (adr r3, 8002dd8 <main+0x1ea8>)
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f7fd fcb8 	bl	8000608 <__aeabi_dmul>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	4625      	mov	r5, r4
 8002c9e:	461c      	mov	r4, r3
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <main+0x1eec>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fc57 	bl	8000558 <__aeabi_f2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f7fd ff2f 	bl	8000b14 <__aeabi_dcmpge>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d026      	beq.n	8002d0a <main+0x1dda>
 8002cbc:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <main+0x1ec4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc27 	bl	8000514 <__aeabi_ui2d>
 8002cc6:	a344      	add	r3, pc, #272	; (adr r3, 8002dd8 <main+0x1ea8>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc9c 	bl	8000608 <__aeabi_dmul>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	4625      	mov	r5, r4
 8002cd6:	461c      	mov	r4, r3
 8002cd8:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <main+0x1ec0>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ce2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ce6:	ee16 0a90 	vmov	r0, s13
 8002cea:	f7fd fc35 	bl	8000558 <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd ff03 	bl	8000b00 <__aeabi_dcmple>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d004      	beq.n	8002d0a <main+0x1dda>
					{
						dataOut = v_l;
 8002d00:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <main+0x1ebc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a3c      	ldr	r2, [pc, #240]	; (8002df8 <main+0x1ec8>)
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e002      	b.n	8002d10 <main+0x1de0>
					}
					else
					{
						time = 0; // time >= 1/f -> 1 pulse -> reset time
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	; (8002df4 <main+0x1ec4>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
					}
				}
				Output = dataOut*4095/3.3;
 8002d10:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <main+0x1ec8>)
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002dfc <main+0x1ecc>
 8002d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1e:	ee17 0a90 	vmov	r0, s15
 8002d22:	f7fd fc19 	bl	8000558 <__aeabi_f2d>
 8002d26:	a32e      	add	r3, pc, #184	; (adr r3, 8002de0 <main+0x1eb0>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fd96 	bl	800085c <__aeabi_ddiv>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	4618      	mov	r0, r3
 8002d36:	4621      	mov	r1, r4
 8002d38:	f7fd ff28 	bl	8000b8c <__aeabi_d2f>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <main+0x1ed0>)
 8002d40:	601a      	str	r2, [r3, #0]
				if (hspi3.State == HAL_SPI_STATE_READY
 8002d42:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <main+0x1ed4>)
 8002d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	f47e a917 	bne.w	8000f7e <main+0x4e>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 8002d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d54:	482c      	ldr	r0, [pc, #176]	; (8002e08 <main+0x1ed8>)
 8002d56:	f002 f9a7 	bl	80050a8 <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	f47e a90e 	bne.w	8000f7e <main+0x4e>
				{
					MCP4922SetOutput(DACConfig, Output);
 8002d62:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <main+0x1edc>)
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <main+0x1ed0>)
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d70:	ee17 3a90 	vmov	r3, s15
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f000 fa9f 	bl	80032bc <MCP4922SetOutput>
 8002d7e:	f7fe b8fe 	b.w	8000f7e <main+0x4e>
				}
			}
			else
			{
				Output = 0.0;
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <main+0x1ed0>)
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
				if (hspi3.State == HAL_SPI_STATE_READY
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <main+0x1ed4>)
 8002d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	f47e a8f3 	bne.w	8000f7e <main+0x4e>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 8002d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d9c:	481a      	ldr	r0, [pc, #104]	; (8002e08 <main+0x1ed8>)
 8002d9e:	f002 f983 	bl	80050a8 <HAL_GPIO_ReadPin>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f47e a8ea 	bne.w	8000f7e <main+0x4e>
				{
					MCP4922SetOutput(DACConfig, Output);
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <main+0x1edc>)
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <main+0x1ed0>)
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db8:	ee17 3a90 	vmov	r3, s15
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f000 fa7b 	bl	80032bc <MCP4922SetOutput>
	{
 8002dc6:	f7fe b8da 	b.w	8000f7e <main+0x4e>
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	51eb851f 	.word	0x51eb851f
 8002dd4:	40191eb8 	.word	0x40191eb8
 8002dd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ddc:	3f50624d 	.word	0x3f50624d
 8002de0:	66666666 	.word	0x66666666
 8002de4:	400a6666 	.word	0x400a6666
 8002de8:	200000cc 	.word	0x200000cc
 8002dec:	200000b0 	.word	0x200000b0
 8002df0:	20000000 	.word	0x20000000
 8002df4:	200000c8 	.word	0x200000c8
 8002df8:	200000d0 	.word	0x200000d0
 8002dfc:	457ff000 	.word	0x457ff000
 8002e00:	200000d4 	.word	0x200000d4
 8002e04:	20000558 	.word	0x20000558
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	20000005 	.word	0x20000005
 8002e10:	20000004 	.word	0x20000004
 8002e14:	200000a8 	.word	0x200000a8
 8002e18:	42c80000 	.word	0x42c80000
 8002e1c:	200000c0 	.word	0x200000c0
 8002e20:	200000ac 	.word	0x200000ac

08002e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b094      	sub	sp, #80	; 0x50
 8002e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e2a:	f107 0320 	add.w	r3, r7, #32
 8002e2e:	2230      	movs	r2, #48	; 0x30
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f004 fc87 	bl	8007746 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <SystemClock_Config+0xc8>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4a26      	ldr	r2, [pc, #152]	; (8002eec <SystemClock_Config+0xc8>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6413      	str	r3, [r2, #64]	; 0x40
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <SystemClock_Config+0xc8>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e64:	2300      	movs	r3, #0
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <SystemClock_Config+0xcc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <SystemClock_Config+0xcc>)
 8002e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <SystemClock_Config+0xcc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e80:	2302      	movs	r3, #2
 8002e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e84:	2301      	movs	r3, #1
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e88:	2310      	movs	r3, #16
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e94:	2308      	movs	r3, #8
 8002e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002e98:	2364      	movs	r3, #100	; 0x64
 8002e9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea4:	f107 0320 	add.w	r3, r7, #32
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 f92f 	bl	800510c <HAL_RCC_OscConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002eb4:	f000 facc 	bl	8003450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eb8:	230f      	movs	r3, #15
 8002eba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	2103      	movs	r1, #3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fb89 	bl	80055ec <HAL_RCC_ClockConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ee0:	f000 fab6 	bl	8003450 <Error_Handler>
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3750      	adds	r7, #80	; 0x50
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000

08002ef4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002efa:	463b      	mov	r3, r7
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f08:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <MX_ADC1_Init+0xa0>)
 8002f0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002f36:	4b16      	ldr	r3, [pc, #88]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f5a:	f000 fd47 	bl	80039ec <HAL_ADC_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002f64:	f000 fa74 	bl	8003450 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f74:	463b      	mov	r3, r7
 8002f76:	4619      	mov	r1, r3
 8002f78:	4805      	ldr	r0, [pc, #20]	; (8002f90 <MX_ADC1_Init+0x9c>)
 8002f7a:	f000 ffb7 	bl	8003eec <HAL_ADC_ConfigChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002f84:	f000 fa64 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200005b0 	.word	0x200005b0
 8002f94:	40012000 	.word	0x40012000

08002f98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <MX_SPI3_Init+0x68>)
 8002f9e:	4a19      	ldr	r2, [pc, #100]	; (8003004 <MX_SPI3_Init+0x6c>)
 8002fa0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fa8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002fb0:	4b13      	ldr	r3, [pc, #76]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fce:	2220      	movs	r2, #32
 8002fd0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fe6:	220a      	movs	r2, #10
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <MX_SPI3_Init+0x68>)
 8002fec:	f002 fcf0 	bl	80059d0 <HAL_SPI_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002ff6:	f000 fa2b 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000558 	.word	0x20000558
 8003004:	40003c00 	.word	0x40003c00

08003008 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301c:	463b      	mov	r3, r7
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003024:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <MX_TIM3_Init+0x90>)
 8003026:	4a1d      	ldr	r2, [pc, #116]	; (800309c <MX_TIM3_Init+0x94>)
 8003028:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <MX_TIM3_Init+0x90>)
 800302c:	2264      	movs	r2, #100	; 0x64
 800302e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <MX_TIM3_Init+0x90>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <MX_TIM3_Init+0x90>)
 8003038:	2264      	movs	r2, #100	; 0x64
 800303a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <MX_TIM3_Init+0x90>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <MX_TIM3_Init+0x90>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003048:	4813      	ldr	r0, [pc, #76]	; (8003098 <MX_TIM3_Init+0x90>)
 800304a:	f003 f819 	bl	8006080 <HAL_TIM_Base_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003054:	f000 f9fc 	bl	8003450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800305c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800305e:	f107 0308 	add.w	r3, r7, #8
 8003062:	4619      	mov	r1, r3
 8003064:	480c      	ldr	r0, [pc, #48]	; (8003098 <MX_TIM3_Init+0x90>)
 8003066:	f003 f986 	bl	8006376 <HAL_TIM_ConfigClockSource>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003070:	f000 f9ee 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003074:	2320      	movs	r3, #32
 8003076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800307c:	463b      	mov	r3, r7
 800307e:	4619      	mov	r1, r3
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_TIM3_Init+0x90>)
 8003082:	f003 fb71 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800308c:	f000 f9e0 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000518 	.word	0x20000518
 800309c:	40000400 	.word	0x40000400

080030a0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <MX_TIM11_Init+0x40>)
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <MX_TIM11_Init+0x44>)
 80030a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <MX_TIM11_Init+0x40>)
 80030ac:	2264      	movs	r2, #100	; 0x64
 80030ae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <MX_TIM11_Init+0x40>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <MX_TIM11_Init+0x40>)
 80030b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030bc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <MX_TIM11_Init+0x40>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <MX_TIM11_Init+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80030ca:	4805      	ldr	r0, [pc, #20]	; (80030e0 <MX_TIM11_Init+0x40>)
 80030cc:	f002 ffd8 	bl	8006080 <HAL_TIM_Base_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80030d6:	f000 f9bb 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200005f8 	.word	0x200005f8
 80030e4:	40014800 	.word	0x40014800

080030e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 80030ee:	4a12      	ldr	r2, [pc, #72]	; (8003138 <MX_USART2_UART_Init+0x50>)
 80030f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 80030f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 800310e:	220c      	movs	r2, #12
 8003110:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <MX_USART2_UART_Init+0x4c>)
 8003120:	f003 fba4 	bl	800686c <HAL_UART_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800312a:	f000 f991 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000698 	.word	0x20000698
 8003138:	40004400 	.word	0x40004400

0800313c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <MX_DMA_Init+0x3c>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <MX_DMA_Init+0x3c>)
 800314c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <MX_DMA_Init+0x3c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2100      	movs	r1, #0
 8003162:	2038      	movs	r0, #56	; 0x38
 8003164:	f001 fa57 	bl	8004616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003168:	2038      	movs	r0, #56	; 0x38
 800316a:	f001 fa70 	bl	800464e <HAL_NVIC_EnableIRQ>

}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <MX_GPIO_Init+0x12c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a43      	ldr	r2, [pc, #268]	; (80032a8 <MX_GPIO_Init+0x12c>)
 800319c:	f043 0304 	orr.w	r3, r3, #4
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a3c      	ldr	r2, [pc, #240]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a35      	ldr	r2, [pc, #212]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <MX_GPIO_Init+0x12c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003202:	2200      	movs	r2, #0
 8003204:	2120      	movs	r1, #32
 8003206:	4829      	ldr	r0, [pc, #164]	; (80032ac <MX_GPIO_Init+0x130>)
 8003208:	f001 ff66 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003212:	4827      	ldr	r0, [pc, #156]	; (80032b0 <MX_GPIO_Init+0x134>)
 8003214:	f001 ff60 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8003218:	2201      	movs	r2, #1
 800321a:	2180      	movs	r1, #128	; 0x80
 800321c:	4825      	ldr	r0, [pc, #148]	; (80032b4 <MX_GPIO_Init+0x138>)
 800321e:	f001 ff5b 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003228:	4820      	ldr	r0, [pc, #128]	; (80032ac <MX_GPIO_Init+0x130>)
 800322a:	f001 ff55 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800322e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <MX_GPIO_Init+0x13c>)
 8003236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	4619      	mov	r1, r3
 8003242:	481c      	ldr	r0, [pc, #112]	; (80032b4 <MX_GPIO_Init+0x138>)
 8003244:	f001 fdae 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8003248:	f44f 7308 	mov.w	r3, #544	; 0x220
 800324c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324e:	2301      	movs	r3, #1
 8003250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4619      	mov	r1, r3
 8003260:	4812      	ldr	r0, [pc, #72]	; (80032ac <MX_GPIO_Init+0x130>)
 8003262:	f001 fd9f 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8003266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800326a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800326c:	2301      	movs	r3, #1
 800326e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	2300      	movs	r3, #0
 8003276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	4619      	mov	r1, r3
 800327e:	480c      	ldr	r0, [pc, #48]	; (80032b0 <MX_GPIO_Init+0x134>)
 8003280:	f001 fd90 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003288:	2301      	movs	r3, #1
 800328a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003290:	2300      	movs	r3, #0
 8003292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4619      	mov	r1, r3
 800329a:	4806      	ldr	r0, [pc, #24]	; (80032b4 <MX_GPIO_Init+0x138>)
 800329c:	f001 fd82 	bl	8004da4 <HAL_GPIO_Init>

}
 80032a0:	bf00      	nop
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020400 	.word	0x40020400
 80032b4:	40020800 	.word	0x40020800
 80032b8:	10210000 	.word	0x10210000

080032bc <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	460a      	mov	r2, r1
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	4613      	mov	r3, r2
 80032ca:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 80032cc:	88bb      	ldrh	r3, [r7, #4]
 80032ce:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	031b      	lsls	r3, r3, #12
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032e2:	4807      	ldr	r0, [pc, #28]	; (8003300 <MCP4922SetOutput+0x44>)
 80032e4:	f001 fef8 	bl	80050d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	2201      	movs	r2, #1
 80032ee:	4619      	mov	r1, r3
 80032f0:	4804      	ldr	r0, [pc, #16]	; (8003304 <MCP4922SetOutput+0x48>)
 80032f2:	f002 fbd1 	bl	8005a98 <HAL_SPI_Transmit_IT>
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40020400 	.word	0x40020400
 8003304:	20000558 	.word	0x20000558

08003308 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a06      	ldr	r2, [pc, #24]	; (800332c <HAL_SPI_TxCpltCallback+0x24>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d105      	bne.n	8003324 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003318:	2201      	movs	r2, #1
 800331a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800331e:	4804      	ldr	r0, [pc, #16]	; (8003330 <HAL_SPI_TxCpltCallback+0x28>)
 8003320:	f001 feda 	bl	80050d8 <HAL_GPIO_WritePin>
	}
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000558 	.word	0x20000558
 8003330:	40020400 	.word	0x40020400

08003334 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10d      	bne.n	8003362 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003348:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800334c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	eb1b 0301 	adds.w	r3, fp, r1
 8003358:	eb4c 0402 	adc.w	r4, ip, r2
 800335c:	4a05      	ldr	r2, [pc, #20]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800335e:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	200005f8 	.word	0x200005f8
 8003374:	20000098 	.word	0x20000098

08003378 <micros>:

inline uint64_t micros()
{
 8003378:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800337c:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <micros+0x2c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	4619      	mov	r1, r3
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <micros+0x30>)
 800338c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8003390:	eb1b 0301 	adds.w	r3, fp, r1
 8003394:	eb4c 0402 	adc.w	r4, ip, r2
}
 8003398:	4618      	mov	r0, r3
 800339a:	4621      	mov	r1, r4
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80033a2:	4770      	bx	lr
 80033a4:	200005f8 	.word	0x200005f8
 80033a8:	20000098 	.word	0x20000098

080033ac <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80033b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033b6:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <UARTRecieveIT+0x58>)
 80033ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033bc:	461a      	mov	r2, r3
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <UARTRecieveIT+0x58>)
 80033c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <UARTRecieveIT+0x5c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d010      	beq.n	80033f2 <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <UARTRecieveIT+0x5c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0d      	ldr	r2, [pc, #52]	; (800340c <UARTRecieveIT+0x60>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <UARTRecieveIT+0x5c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <UARTRecieveIT+0x58>)
 80033e2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80033e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80033e8:	fb02 f201 	mul.w	r2, r2, r1
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	4a06      	ldr	r2, [pc, #24]	; (8003408 <UARTRecieveIT+0x5c>)
 80033f0:	6013      	str	r3, [r2, #0]
	}
	return data;
 80033f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000698 	.word	0x20000698
 8003408:	20000508 	.word	0x20000508
 800340c:	200000f8 	.word	0x200000f8

08003410 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_UART_RxCpltCallback+0x30>)
 800341a:	490a      	ldr	r1, [pc, #40]	; (8003444 <HAL_UART_RxCpltCallback+0x34>)
 800341c:	480a      	ldr	r0, [pc, #40]	; (8003448 <HAL_UART_RxCpltCallback+0x38>)
 800341e:	f004 f99b 	bl	8007758 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8003422:	4809      	ldr	r0, [pc, #36]	; (8003448 <HAL_UART_RxCpltCallback+0x38>)
 8003424:	f7fc fedc 	bl	80001e0 <strlen>
 8003428:	4603      	mov	r3, r0
 800342a:	b29a      	uxth	r2, r3
 800342c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003430:	4905      	ldr	r1, [pc, #20]	; (8003448 <HAL_UART_RxCpltCallback+0x38>)
 8003432:	4806      	ldr	r0, [pc, #24]	; (800344c <HAL_UART_RxCpltCallback+0x3c>)
 8003434:	f003 fa67 	bl	8006906 <HAL_UART_Transmit>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200000f8 	.word	0x200000f8
 8003444:	08009300 	.word	0x08009300
 8003448:	200000d8 	.word	0x200000d8
 800344c:	20000698 	.word	0x20000698

08003450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003454:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003456:	e7fe      	b.n	8003456 <Error_Handler+0x6>

08003458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <HAL_MspInit+0x4c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <HAL_MspInit+0x4c>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800346c:	6453      	str	r3, [r2, #68]	; 0x44
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <HAL_MspInit+0x4c>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_MspInit+0x4c>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <HAL_MspInit+0x4c>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_MspInit+0x4c>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003496:	2007      	movs	r0, #7
 8003498:	f001 f8b2 	bl	8004600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a33      	ldr	r2, [pc, #204]	; (8003594 <HAL_ADC_MspInit+0xec>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d15f      	bne.n	800358a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b32      	ldr	r3, [pc, #200]	; (8003598 <HAL_ADC_MspInit+0xf0>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	4a31      	ldr	r2, [pc, #196]	; (8003598 <HAL_ADC_MspInit+0xf0>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d8:	6453      	str	r3, [r2, #68]	; 0x44
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_ADC_MspInit+0xf0>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_ADC_MspInit+0xf0>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <HAL_ADC_MspInit+0xf0>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_ADC_MspInit+0xf0>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003502:	2301      	movs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003506:	2303      	movs	r3, #3
 8003508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4619      	mov	r1, r3
 8003514:	4821      	ldr	r0, [pc, #132]	; (800359c <HAL_ADC_MspInit+0xf4>)
 8003516:	f001 fc45 	bl	8004da4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800351a:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 800351c:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <HAL_ADC_MspInit+0xfc>)
 800351e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 8003522:	2200      	movs	r2, #0
 8003524:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003526:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800352c:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003532:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 8003534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003538:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 800353c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003540:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003542:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 8003544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003548:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 800354c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003550:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 8003554:	2200      	movs	r2, #0
 8003556:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 800355a:	2200      	movs	r2, #0
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800355e:	4810      	ldr	r0, [pc, #64]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 8003560:	f001 f890 	bl	8004684 <HAL_DMA_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800356a:	f7ff ff71 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
 8003574:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <HAL_ADC_MspInit+0xf8>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	2012      	movs	r0, #18
 8003580:	f001 f849 	bl	8004616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003584:	2012      	movs	r0, #18
 8003586:	f001 f862 	bl	800464e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40012000 	.word	0x40012000
 8003598:	40023800 	.word	0x40023800
 800359c:	40020000 	.word	0x40020000
 80035a0:	20000638 	.word	0x20000638
 80035a4:	40026410 	.word	0x40026410

080035a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1d      	ldr	r2, [pc, #116]	; (800363c <HAL_SPI_MspInit+0x94>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d133      	bne.n	8003632 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <HAL_SPI_MspInit+0x98>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_SPI_MspInit+0x98>)
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_SPI_MspInit+0x98>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <HAL_SPI_MspInit+0x98>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_SPI_MspInit+0x98>)
 80035f0:	f043 0302 	orr.w	r3, r3, #2
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_SPI_MspInit+0x98>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003602:	2338      	movs	r3, #56	; 0x38
 8003604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360e:	2303      	movs	r3, #3
 8003610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003612:	2306      	movs	r3, #6
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	4619      	mov	r1, r3
 800361c:	4809      	ldr	r0, [pc, #36]	; (8003644 <HAL_SPI_MspInit+0x9c>)
 800361e:	f001 fbc1 	bl	8004da4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	2100      	movs	r1, #0
 8003626:	2033      	movs	r0, #51	; 0x33
 8003628:	f000 fff5 	bl	8004616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800362c:	2033      	movs	r0, #51	; 0x33
 800362e:	f001 f80e 	bl	800464e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003632:	bf00      	nop
 8003634:	3728      	adds	r7, #40	; 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40003c00 	.word	0x40003c00
 8003640:	40023800 	.word	0x40023800
 8003644:	40020400 	.word	0x40020400

08003648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_TIM_Base_MspInit+0x70>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10e      	bne.n	8003678 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_TIM_Base_MspInit+0x74>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_TIM_Base_MspInit+0x74>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_TIM_Base_MspInit+0x74>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003676:	e01a      	b.n	80036ae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a10      	ldr	r2, [pc, #64]	; (80036c0 <HAL_TIM_Base_MspInit+0x78>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d115      	bne.n	80036ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <HAL_TIM_Base_MspInit+0x74>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <HAL_TIM_Base_MspInit+0x74>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_TIM_Base_MspInit+0x74>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	201a      	movs	r0, #26
 80036a4:	f000 ffb7 	bl	8004616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80036a8:	201a      	movs	r0, #26
 80036aa:	f000 ffd0 	bl	800464e <HAL_NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40014800 	.word	0x40014800

080036c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_UART_MspInit+0x94>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d133      	bne.n	800374e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <HAL_UART_MspInit+0x98>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_UART_MspInit+0x98>)
 80036f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_UART_MspInit+0x98>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_UART_MspInit+0x98>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a14      	ldr	r2, [pc, #80]	; (800375c <HAL_UART_MspInit+0x98>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_UART_MspInit+0x98>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800371e:	230c      	movs	r3, #12
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372a:	2303      	movs	r3, #3
 800372c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800372e:	2307      	movs	r3, #7
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4619      	mov	r1, r3
 8003738:	4809      	ldr	r0, [pc, #36]	; (8003760 <HAL_UART_MspInit+0x9c>)
 800373a:	f001 fb33 	bl	8004da4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	2026      	movs	r0, #38	; 0x26
 8003744:	f000 ff67 	bl	8004616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003748:	2026      	movs	r0, #38	; 0x26
 800374a:	f000 ff80 	bl	800464e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40004400 	.word	0x40004400
 800375c:	40023800 	.word	0x40023800
 8003760:	40020000 	.word	0x40020000

08003764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <NMI_Handler+0x4>

0800376a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <MemManage_Handler+0x4>

08003776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377a:	e7fe      	b.n	800377a <BusFault_Handler+0x4>

0800377c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <UsageFault_Handler+0x4>

08003782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b0:	f000 f8fc 	bl	80039ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <ADC_IRQHandler+0x10>)
 80037be:	f000 f958 	bl	8003a72 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200005b0 	.word	0x200005b0

080037cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80037d2:	f002 fcc8 	bl	8006166 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200005f8 	.word	0x200005f8

080037e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <USART2_IRQHandler+0x10>)
 80037e6:	f003 f97d 	bl	8006ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000698 	.word	0x20000698

080037f4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <SPI3_IRQHandler+0x10>)
 80037fa:	f002 f9cf 	bl	8005b9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000558 	.word	0x20000558

08003808 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <DMA2_Stream0_IRQHandler+0x10>)
 800380e:	f001 f861 	bl	80048d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000638 	.word	0x20000638

0800381c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <_sbrk+0x5c>)
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <_sbrk+0x60>)
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <_sbrk+0x64>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <_sbrk+0x64>)
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <_sbrk+0x68>)
 800383c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <_sbrk+0x64>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d207      	bcs.n	800385c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800384c:	f003 ff46 	bl	80076dc <__errno>
 8003850:	4602      	mov	r2, r0
 8003852:	230c      	movs	r3, #12
 8003854:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003856:	f04f 33ff 	mov.w	r3, #4294967295
 800385a:	e009      	b.n	8003870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <_sbrk+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <_sbrk+0x64>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	4a05      	ldr	r2, [pc, #20]	; (8003880 <_sbrk+0x64>)
 800386c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20020000 	.word	0x20020000
 800387c:	00000400 	.word	0x00000400
 8003880:	2000050c 	.word	0x2000050c
 8003884:	200006e0 	.word	0x200006e0

08003888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <SystemInit+0x28>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <SystemInit+0x28>)
 8003894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <SystemInit+0x28>)
 800389e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038a2:	609a      	str	r2, [r3, #8]
#endif
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038ba:	e003      	b.n	80038c4 <LoopCopyDataInit>

080038bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038c2:	3104      	adds	r1, #4

080038c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038c4:	480b      	ldr	r0, [pc, #44]	; (80038f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038cc:	d3f6      	bcc.n	80038bc <CopyDataInit>
  ldr  r2, =_sbss
 80038ce:	4a0b      	ldr	r2, [pc, #44]	; (80038fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038d0:	e002      	b.n	80038d8 <LoopFillZerobss>

080038d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038d4:	f842 3b04 	str.w	r3, [r2], #4

080038d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038dc:	d3f9      	bcc.n	80038d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038de:	f7ff ffd3 	bl	8003888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038e2:	f003 ff01 	bl	80076e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038e6:	f7fd fb23 	bl	8000f30 <main>
  bx  lr    
 80038ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80038ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80038f0:	08009550 	.word	0x08009550
  ldr  r0, =_sdata
 80038f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038f8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80038fc:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003900:	200006e0 	.word	0x200006e0

08003904 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003904:	e7fe      	b.n	8003904 <DMA1_Stream0_IRQHandler>
	...

08003908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_Init+0x40>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <HAL_Init+0x40>)
 8003912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_Init+0x40>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <HAL_Init+0x40>)
 800391e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <HAL_Init+0x40>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <HAL_Init+0x40>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003930:	2003      	movs	r0, #3
 8003932:	f000 fe65 	bl	8004600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003936:	2000      	movs	r0, #0
 8003938:	f000 f808 	bl	800394c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800393c:	f7ff fd8c 	bl	8003458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00

0800394c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_InitTick+0x54>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_InitTick+0x58>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	4619      	mov	r1, r3
 800395e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003962:	fbb3 f3f1 	udiv	r3, r3, r1
 8003966:	fbb2 f3f3 	udiv	r3, r2, r3
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fe7d 	bl	800466a <HAL_SYSTICK_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e00e      	b.n	8003998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d80a      	bhi.n	8003996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003980:	2200      	movs	r2, #0
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	f000 fe45 	bl	8004616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800398c:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <HAL_InitTick+0x5c>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000008 	.word	0x20000008
 80039a4:	20000010 	.word	0x20000010
 80039a8:	2000000c 	.word	0x2000000c

080039ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_IncTick+0x20>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_IncTick+0x24>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4413      	add	r3, r2
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_IncTick+0x24>)
 80039be:	6013      	str	r3, [r2, #0]
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000010 	.word	0x20000010
 80039d0:	200006d8 	.word	0x200006d8

080039d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return uwTick;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_GetTick+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	200006d8 	.word	0x200006d8

080039ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e033      	b.n	8003a6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fd4c 	bl	80034a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a32:	f023 0302 	bic.w	r3, r3, #2
 8003a36:	f043 0202 	orr.w	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fb86 	bl	8004150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
 8003a5a:	e001      	b.n	8003a60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2301      	moveq	r3, #1
 8003aa8:	2300      	movne	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d049      	beq.n	8003b48 <HAL_ADC_IRQHandler+0xd6>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d046      	beq.n	8003b48 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d12b      	bne.n	8003b38 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d127      	bne.n	8003b38 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d119      	bne.n	8003b38 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0220 	bic.w	r2, r2, #32
 8003b12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f9af 	bl	8003e9c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f06f 0212 	mvn.w	r2, #18
 8003b46:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d057      	beq.n	8003c2a <HAL_ADC_IRQHandler+0x1b8>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d054      	beq.n	8003c2a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d139      	bne.n	8003c1a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d006      	beq.n	8003bc2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d12b      	bne.n	8003c1a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d124      	bne.n	8003c1a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d11d      	bne.n	8003c1a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d119      	bne.n	8003c1a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bf4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0201 	orr.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fc16 	bl	800444c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 020c 	mvn.w	r2, #12
 8003c28:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	bf0c      	ite	eq
 8003c4e:	2301      	moveq	r3, #1
 8003c50:	2300      	movne	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_ADC_IRQHandler+0x21a>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10d      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f921 	bl	8003ec4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0201 	mvn.w	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_ADC_IRQHandler+0x27a>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d012      	beq.n	8003cec <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0220 	mvn.w	r2, #32
 8003cda:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8fb 	bl	8003ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0220 	mvn.w	r2, #32
 8003cea:	601a      	str	r2, [r3, #0]
  }
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_Start_DMA+0x1e>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0b1      	b.n	8003e76 <HAL_ADC_Start_DMA+0x182>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d018      	beq.n	8003d5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d38:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <HAL_ADC_Start_DMA+0x18c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a51      	ldr	r2, [pc, #324]	; (8003e84 <HAL_ADC_Start_DMA+0x190>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	0c9a      	lsrs	r2, r3, #18
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d4c:	e002      	b.n	8003d54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f9      	bne.n	8003d4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 8085 	bne.w	8003e74 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da8:	d106      	bne.n	8003db8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f023 0206 	bic.w	r2, r3, #6
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
 8003db6:	e002      	b.n	8003dbe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dc6:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <HAL_ADC_Start_DMA+0x194>)
 8003dc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <HAL_ADC_Start_DMA+0x198>)
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	4a2e      	ldr	r2, [pc, #184]	; (8003e90 <HAL_ADC_Start_DMA+0x19c>)
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <HAL_ADC_Start_DMA+0x1a0>)
 8003de0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003dea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	334c      	adds	r3, #76	; 0x4c
 8003e16:	4619      	mov	r1, r3
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f000 fce0 	bl	80047e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10f      	bne.n	8003e4c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11c      	bne.n	8003e74 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	e013      	b.n	8003e74 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <HAL_ADC_Start_DMA+0x1a4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10e      	bne.n	8003e74 <HAL_ADC_Start_DMA+0x180>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d107      	bne.n	8003e74 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e72:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000008 	.word	0x20000008
 8003e84:	431bde83 	.word	0x431bde83
 8003e88:	40012300 	.word	0x40012300
 8003e8c:	08004349 	.word	0x08004349
 8003e90:	08004403 	.word	0x08004403
 8003e94:	0800441f 	.word	0x0800441f
 8003e98:	40012000 	.word	0x40012000

08003e9c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x1c>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e113      	b.n	8004130 <HAL_ADC_ConfigChannel+0x244>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b09      	cmp	r3, #9
 8003f16:	d925      	bls.n	8003f64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68d9      	ldr	r1, [r3, #12]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3b1e      	subs	r3, #30
 8003f2e:	2207      	movs	r2, #7
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43da      	mvns	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68d9      	ldr	r1, [r3, #12]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	4618      	mov	r0, r3
 8003f50:	4603      	mov	r3, r0
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4403      	add	r3, r0
 8003f56:	3b1e      	subs	r3, #30
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	e022      	b.n	8003faa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6919      	ldr	r1, [r3, #16]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	2207      	movs	r2, #7
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	400a      	ands	r2, r1
 8003f86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6919      	ldr	r1, [r3, #16]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4618      	mov	r0, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4403      	add	r3, r0
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b06      	cmp	r3, #6
 8003fb0:	d824      	bhi.n	8003ffc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3b05      	subs	r3, #5
 8003fc4:	221f      	movs	r2, #31
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	3b05      	subs	r3, #5
 8003fee:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8003ffa:	e04c      	b.n	8004096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d824      	bhi.n	800404e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	3b23      	subs	r3, #35	; 0x23
 8004016:	221f      	movs	r2, #31
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43da      	mvns	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	400a      	ands	r2, r1
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	4618      	mov	r0, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	3b23      	subs	r3, #35	; 0x23
 8004040:	fa00 f203 	lsl.w	r2, r0, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
 800404c:	e023      	b.n	8004096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	3b41      	subs	r3, #65	; 0x41
 8004060:	221f      	movs	r2, #31
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	400a      	ands	r2, r1
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	4618      	mov	r0, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	3b41      	subs	r3, #65	; 0x41
 800408a:	fa00 f203 	lsl.w	r2, r0, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004096:	4b29      	ldr	r3, [pc, #164]	; (800413c <HAL_ADC_ConfigChannel+0x250>)
 8004098:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a28      	ldr	r2, [pc, #160]	; (8004140 <HAL_ADC_ConfigChannel+0x254>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d10f      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x1d8>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b12      	cmp	r3, #18
 80040aa:	d10b      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_ADC_ConfigChannel+0x254>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d12b      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x23a>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_ADC_ConfigChannel+0x258>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <HAL_ADC_ConfigChannel+0x1f4>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b11      	cmp	r3, #17
 80040de:	d122      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a11      	ldr	r2, [pc, #68]	; (8004144 <HAL_ADC_ConfigChannel+0x258>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d111      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <HAL_ADC_ConfigChannel+0x25c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <HAL_ADC_ConfigChannel+0x260>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	0c9a      	lsrs	r2, r3, #18
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004118:	e002      	b.n	8004120 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	3b01      	subs	r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f9      	bne.n	800411a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40012300 	.word	0x40012300
 8004140:	40012000 	.word	0x40012000
 8004144:	10000012 	.word	0x10000012
 8004148:	20000008 	.word	0x20000008
 800414c:	431bde83 	.word	0x431bde83

08004150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004158:	4b79      	ldr	r3, [pc, #484]	; (8004340 <ADC_Init+0x1f0>)
 800415a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	431a      	orrs	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	021a      	lsls	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6899      	ldr	r1, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	4a58      	ldr	r2, [pc, #352]	; (8004344 <ADC_Init+0x1f4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6899      	ldr	r1, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6899      	ldr	r1, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	e00f      	b.n	800424e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800423c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800424c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0202 	bic.w	r2, r2, #2
 800425c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7e1b      	ldrb	r3, [r3, #24]
 8004268:	005a      	lsls	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01b      	beq.n	80042b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800428a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800429a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	3b01      	subs	r3, #1
 80042a8:	035a      	lsls	r2, r3, #13
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	e007      	b.n	80042c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	3b01      	subs	r3, #1
 80042e0:	051a      	lsls	r2, r3, #20
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6899      	ldr	r1, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004306:	025a      	lsls	r2, r3, #9
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	029a      	lsls	r2, r3, #10
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40012300 	.word	0x40012300
 8004344:	0f000001 	.word	0x0f000001

08004348 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800435e:	2b00      	cmp	r3, #0
 8004360:	d13c      	bne.n	80043dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d12b      	bne.n	80043d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004380:	2b00      	cmp	r3, #0
 8004382:	d127      	bne.n	80043d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800438e:	2b00      	cmp	r3, #0
 8004390:	d006      	beq.n	80043a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800439c:	2b00      	cmp	r3, #0
 800439e:	d119      	bne.n	80043d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0220 	bic.w	r2, r2, #32
 80043ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d105      	bne.n	80043d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f043 0201 	orr.w	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fd61 	bl	8003e9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043da:	e00e      	b.n	80043fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fd75 	bl	8003ed8 <HAL_ADC_ErrorCallback>
}
 80043ee:	e004      	b.n	80043fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fd4d 	bl	8003eb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2240      	movs	r2, #64	; 0x40
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f043 0204 	orr.w	r2, r3, #4
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff fd4a 	bl	8003ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800447c:	4013      	ands	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800448c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004492:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	60d3      	str	r3, [r2, #12]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <__NVIC_GetPriorityGrouping+0x18>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	f003 0307 	and.w	r3, r3, #7
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	db0b      	blt.n	80044ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	f003 021f 	and.w	r2, r3, #31
 80044dc:	4907      	ldr	r1, [pc, #28]	; (80044fc <__NVIC_EnableIRQ+0x38>)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	2001      	movs	r0, #1
 80044e6:	fa00 f202 	lsl.w	r2, r0, r2
 80044ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	e000e100 	.word	0xe000e100

08004500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	6039      	str	r1, [r7, #0]
 800450a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004510:	2b00      	cmp	r3, #0
 8004512:	db0a      	blt.n	800452a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	490c      	ldr	r1, [pc, #48]	; (800454c <__NVIC_SetPriority+0x4c>)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	0112      	lsls	r2, r2, #4
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	440b      	add	r3, r1
 8004524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004528:	e00a      	b.n	8004540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4908      	ldr	r1, [pc, #32]	; (8004550 <__NVIC_SetPriority+0x50>)
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	3b04      	subs	r3, #4
 8004538:	0112      	lsls	r2, r2, #4
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	440b      	add	r3, r1
 800453e:	761a      	strb	r2, [r3, #24]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	e000e100 	.word	0xe000e100
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f1c3 0307 	rsb	r3, r3, #7
 800456e:	2b04      	cmp	r3, #4
 8004570:	bf28      	it	cs
 8004572:	2304      	movcs	r3, #4
 8004574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3304      	adds	r3, #4
 800457a:	2b06      	cmp	r3, #6
 800457c:	d902      	bls.n	8004584 <NVIC_EncodePriority+0x30>
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3b03      	subs	r3, #3
 8004582:	e000      	b.n	8004586 <NVIC_EncodePriority+0x32>
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004588:	f04f 32ff 	mov.w	r2, #4294967295
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43da      	mvns	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	401a      	ands	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800459c:	f04f 31ff 	mov.w	r1, #4294967295
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	43d9      	mvns	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	4313      	orrs	r3, r2
         );
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3724      	adds	r7, #36	; 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045cc:	d301      	bcc.n	80045d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ce:	2301      	movs	r3, #1
 80045d0:	e00f      	b.n	80045f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <SysTick_Config+0x40>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045da:	210f      	movs	r1, #15
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
 80045e0:	f7ff ff8e 	bl	8004500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <SysTick_Config+0x40>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <SysTick_Config+0x40>)
 80045ec:	2207      	movs	r2, #7
 80045ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	e000e010 	.word	0xe000e010

08004600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff29 	bl	8004460 <__NVIC_SetPriorityGrouping>
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004628:	f7ff ff3e 	bl	80044a8 <__NVIC_GetPriorityGrouping>
 800462c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6978      	ldr	r0, [r7, #20]
 8004634:	f7ff ff8e 	bl	8004554 <NVIC_EncodePriority>
 8004638:	4602      	mov	r2, r0
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff5d 	bl	8004500 <__NVIC_SetPriority>
}
 8004646:	bf00      	nop
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff ff31 	bl	80044c4 <__NVIC_EnableIRQ>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff ffa2 	bl	80045bc <SysTick_Config>
 8004678:	4603      	mov	r3, r0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004690:	f7ff f9a0 	bl	80039d4 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e099      	b.n	80047d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c0:	e00f      	b.n	80046e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046c2:	f7ff f987 	bl	80039d4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b05      	cmp	r3, #5
 80046ce:	d908      	bls.n	80046e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2203      	movs	r2, #3
 80046da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e078      	b.n	80047d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e8      	bne.n	80046c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4b38      	ldr	r3, [pc, #224]	; (80047dc <HAL_DMA_Init+0x158>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800470e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	2b04      	cmp	r3, #4
 800473a:	d107      	bne.n	800474c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	4313      	orrs	r3, r2
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f023 0307 	bic.w	r3, r3, #7
 8004762:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b04      	cmp	r3, #4
 8004774:	d117      	bne.n	80047a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00e      	beq.n	80047a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fa91 	bl	8004cb0 <DMA_CheckFifoParam>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2240      	movs	r2, #64	; 0x40
 8004798:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047a2:	2301      	movs	r3, #1
 80047a4:	e016      	b.n	80047d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa48 	bl	8004c44 <DMA_CalcBaseAndBitshift>
 80047b4:	4603      	mov	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047bc:	223f      	movs	r2, #63	; 0x3f
 80047be:	409a      	lsls	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	f010803f 	.word	0xf010803f

080047e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_DMA_Start_IT+0x26>
 8004802:	2302      	movs	r3, #2
 8004804:	e040      	b.n	8004888 <HAL_DMA_Start_IT+0xa8>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d12f      	bne.n	800487a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f9da 	bl	8004be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	223f      	movs	r2, #63	; 0x3f
 800483a:	409a      	lsls	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0216 	orr.w	r2, r2, #22
 800484e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0208 	orr.w	r2, r2, #8
 8004866:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	e005      	b.n	8004886 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004882:	2302      	movs	r3, #2
 8004884:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d004      	beq.n	80048ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e00c      	b.n	80048c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2205      	movs	r2, #5
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048e0:	4b92      	ldr	r3, [pc, #584]	; (8004b2c <HAL_DMA_IRQHandler+0x258>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a92      	ldr	r2, [pc, #584]	; (8004b30 <HAL_DMA_IRQHandler+0x25c>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	0a9b      	lsrs	r3, r3, #10
 80048ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	2208      	movs	r2, #8
 8004900:	409a      	lsls	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01a      	beq.n	8004940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d013      	beq.n	8004940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0204 	bic.w	r2, r2, #4
 8004926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	2208      	movs	r2, #8
 800492e:	409a      	lsls	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004938:	f043 0201 	orr.w	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	2201      	movs	r2, #1
 8004946:	409a      	lsls	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004962:	2201      	movs	r2, #1
 8004964:	409a      	lsls	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	f043 0202 	orr.w	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	2204      	movs	r2, #4
 800497c:	409a      	lsls	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d012      	beq.n	80049ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	2204      	movs	r2, #4
 800499a:	409a      	lsls	r2, r3
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	f043 0204 	orr.w	r2, r3, #4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b0:	2210      	movs	r2, #16
 80049b2:	409a      	lsls	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d043      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d03c      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	2210      	movs	r2, #16
 80049d0:	409a      	lsls	r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d018      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d024      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
 8004a02:	e01f      	b.n	8004a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01b      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
 8004a14:	e016      	b.n	8004a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0208 	bic.w	r2, r2, #8
 8004a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	2220      	movs	r2, #32
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 808e 	beq.w	8004b72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8086 	beq.w	8004b72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b05      	cmp	r3, #5
 8004a7c:	d136      	bne.n	8004aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0216 	bic.w	r2, r2, #22
 8004a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d103      	bne.n	8004aae <HAL_DMA_IRQHandler+0x1da>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0208 	bic.w	r2, r2, #8
 8004abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	223f      	movs	r2, #63	; 0x3f
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d07d      	beq.n	8004bde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
        }
        return;
 8004aea:	e078      	b.n	8004bde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01c      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d108      	bne.n	8004b1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d030      	beq.n	8004b72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
 8004b18:	e02b      	b.n	8004b72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d027      	beq.n	8004b72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
 8004b2a:	e022      	b.n	8004b72 <HAL_DMA_IRQHandler+0x29e>
 8004b2c:	20000008 	.word	0x20000008
 8004b30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0210 	bic.w	r2, r2, #16
 8004b50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d032      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d022      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2205      	movs	r2, #5
 8004b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d307      	bcc.n	8004bba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f2      	bne.n	8004b9e <HAL_DMA_IRQHandler+0x2ca>
 8004bb8:	e000      	b.n	8004bbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004bba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
 8004bdc:	e000      	b.n	8004be0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004bde:	bf00      	nop
    }
  }
}
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop

08004be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d108      	bne.n	8004c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c26:	e007      	b.n	8004c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	3b10      	subs	r3, #16
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c5e:	4a13      	ldr	r2, [pc, #76]	; (8004cac <DMA_CalcBaseAndBitshift+0x68>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d909      	bls.n	8004c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	1d1a      	adds	r2, r3, #4
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	659a      	str	r2, [r3, #88]	; 0x58
 8004c84:	e007      	b.n	8004c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	aaaaaaab 	.word	0xaaaaaaab
 8004cac:	08009328 	.word	0x08009328

08004cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d11f      	bne.n	8004d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d855      	bhi.n	8004d7c <DMA_CheckFifoParam+0xcc>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <DMA_CheckFifoParam+0x28>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004cfb 	.word	0x08004cfb
 8004ce0:	08004ce9 	.word	0x08004ce9
 8004ce4:	08004d7d 	.word	0x08004d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d045      	beq.n	8004d80 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf8:	e042      	b.n	8004d80 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d02:	d13f      	bne.n	8004d84 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d08:	e03c      	b.n	8004d84 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d12:	d121      	bne.n	8004d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d836      	bhi.n	8004d88 <DMA_CheckFifoParam+0xd8>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <DMA_CheckFifoParam+0x70>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	08004d37 	.word	0x08004d37
 8004d28:	08004d31 	.word	0x08004d31
 8004d2c:	08004d49 	.word	0x08004d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      break;
 8004d34:	e02f      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d024      	beq.n	8004d8c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d46:	e021      	b.n	8004d8c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d50:	d11e      	bne.n	8004d90 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d56:	e01b      	b.n	8004d90 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d902      	bls.n	8004d64 <DMA_CheckFifoParam+0xb4>
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d003      	beq.n	8004d6a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d62:	e018      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	e015      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7a:	e00b      	b.n	8004d94 <DMA_CheckFifoParam+0xe4>
      break;
 8004d7c:	bf00      	nop
 8004d7e:	e00a      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
      break;
 8004d80:	bf00      	nop
 8004d82:	e008      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
      break;
 8004d84:	bf00      	nop
 8004d86:	e006      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
      break;
 8004d88:	bf00      	nop
 8004d8a:	e004      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
      break;
 8004d8c:	bf00      	nop
 8004d8e:	e002      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
      break;   
 8004d90:	bf00      	nop
 8004d92:	e000      	b.n	8004d96 <DMA_CheckFifoParam+0xe6>
      break;
 8004d94:	bf00      	nop
    }
  } 
  
  return status; 
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b089      	sub	sp, #36	; 0x24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	e159      	b.n	8005074 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	f040 8148 	bne.w	800506e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d00b      	beq.n	8004dfe <HAL_GPIO_Init+0x5a>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d007      	beq.n	8004dfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004df2:	2b11      	cmp	r3, #17
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b12      	cmp	r3, #18
 8004dfc:	d130      	bne.n	8004e60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	2203      	movs	r2, #3
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e34:	2201      	movs	r2, #1
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 0201 	and.w	r2, r3, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	2203      	movs	r2, #3
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d003      	beq.n	8004ea0 <HAL_GPIO_Init+0xfc>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b12      	cmp	r3, #18
 8004e9e:	d123      	bne.n	8004ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	08da      	lsrs	r2, r3, #3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3208      	adds	r2, #8
 8004ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	220f      	movs	r2, #15
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	08da      	lsrs	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3208      	adds	r2, #8
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 0203 	and.w	r2, r3, #3
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a2 	beq.w	800506e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	4b56      	ldr	r3, [pc, #344]	; (8005088 <HAL_GPIO_Init+0x2e4>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	4a55      	ldr	r2, [pc, #340]	; (8005088 <HAL_GPIO_Init+0x2e4>)
 8004f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f38:	6453      	str	r3, [r2, #68]	; 0x44
 8004f3a:	4b53      	ldr	r3, [pc, #332]	; (8005088 <HAL_GPIO_Init+0x2e4>)
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f46:	4a51      	ldr	r2, [pc, #324]	; (800508c <HAL_GPIO_Init+0x2e8>)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	089b      	lsrs	r3, r3, #2
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a48      	ldr	r2, [pc, #288]	; (8005090 <HAL_GPIO_Init+0x2ec>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d019      	beq.n	8004fa6 <HAL_GPIO_Init+0x202>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a47      	ldr	r2, [pc, #284]	; (8005094 <HAL_GPIO_Init+0x2f0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <HAL_GPIO_Init+0x1fe>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a46      	ldr	r2, [pc, #280]	; (8005098 <HAL_GPIO_Init+0x2f4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00d      	beq.n	8004f9e <HAL_GPIO_Init+0x1fa>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a45      	ldr	r2, [pc, #276]	; (800509c <HAL_GPIO_Init+0x2f8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <HAL_GPIO_Init+0x1f6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a44      	ldr	r2, [pc, #272]	; (80050a0 <HAL_GPIO_Init+0x2fc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_GPIO_Init+0x1f2>
 8004f92:	2304      	movs	r3, #4
 8004f94:	e008      	b.n	8004fa8 <HAL_GPIO_Init+0x204>
 8004f96:	2307      	movs	r3, #7
 8004f98:	e006      	b.n	8004fa8 <HAL_GPIO_Init+0x204>
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e004      	b.n	8004fa8 <HAL_GPIO_Init+0x204>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e002      	b.n	8004fa8 <HAL_GPIO_Init+0x204>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_GPIO_Init+0x204>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	f002 0203 	and.w	r2, r2, #3
 8004fae:	0092      	lsls	r2, r2, #2
 8004fb0:	4093      	lsls	r3, r2
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fb8:	4934      	ldr	r1, [pc, #208]	; (800508c <HAL_GPIO_Init+0x2e8>)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fc6:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <HAL_GPIO_Init+0x300>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fea:	4a2e      	ldr	r2, [pc, #184]	; (80050a4 <HAL_GPIO_Init+0x300>)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ff0:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <HAL_GPIO_Init+0x300>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <HAL_GPIO_Init+0x300>)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <HAL_GPIO_Init+0x300>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800503e:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <HAL_GPIO_Init+0x300>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005044:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <HAL_GPIO_Init+0x300>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005068:	4a0e      	ldr	r2, [pc, #56]	; (80050a4 <HAL_GPIO_Init+0x300>)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3301      	adds	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	f67f aea2 	bls.w	8004dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800507c:	bf00      	nop
 800507e:	3724      	adds	r7, #36	; 0x24
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40023800 	.word	0x40023800
 800508c:	40013800 	.word	0x40013800
 8005090:	40020000 	.word	0x40020000
 8005094:	40020400 	.word	0x40020400
 8005098:	40020800 	.word	0x40020800
 800509c:	40020c00 	.word	0x40020c00
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40013c00 	.word	0x40013c00

080050a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	887b      	ldrh	r3, [r7, #2]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
 80050c4:	e001      	b.n	80050ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	807b      	strh	r3, [r7, #2]
 80050e4:	4613      	mov	r3, r2
 80050e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050e8:	787b      	ldrb	r3, [r7, #1]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ee:	887a      	ldrh	r2, [r7, #2]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050f4:	e003      	b.n	80050fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050f6:	887b      	ldrh	r3, [r7, #2]
 80050f8:	041a      	lsls	r2, r3, #16
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	619a      	str	r2, [r3, #24]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e25b      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d075      	beq.n	8005216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800512a:	4ba3      	ldr	r3, [pc, #652]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b04      	cmp	r3, #4
 8005134:	d00c      	beq.n	8005150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005136:	4ba0      	ldr	r3, [pc, #640]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800513e:	2b08      	cmp	r3, #8
 8005140:	d112      	bne.n	8005168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005142:	4b9d      	ldr	r3, [pc, #628]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800514e:	d10b      	bne.n	8005168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005150:	4b99      	ldr	r3, [pc, #612]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d05b      	beq.n	8005214 <HAL_RCC_OscConfig+0x108>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d157      	bne.n	8005214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e236      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005170:	d106      	bne.n	8005180 <HAL_RCC_OscConfig+0x74>
 8005172:	4b91      	ldr	r3, [pc, #580]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a90      	ldr	r2, [pc, #576]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e01d      	b.n	80051bc <HAL_RCC_OscConfig+0xb0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005188:	d10c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x98>
 800518a:	4b8b      	ldr	r3, [pc, #556]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a8a      	ldr	r2, [pc, #552]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	4b88      	ldr	r3, [pc, #544]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a87      	ldr	r2, [pc, #540]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800519c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	e00b      	b.n	80051bc <HAL_RCC_OscConfig+0xb0>
 80051a4:	4b84      	ldr	r3, [pc, #528]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a83      	ldr	r2, [pc, #524]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 80051aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	4b81      	ldr	r3, [pc, #516]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a80      	ldr	r2, [pc, #512]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 80051b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d013      	beq.n	80051ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7fe fc06 	bl	80039d4 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051cc:	f7fe fc02 	bl	80039d4 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	; 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e1fb      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051de:	4b76      	ldr	r3, [pc, #472]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0xc0>
 80051ea:	e014      	b.n	8005216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ec:	f7fe fbf2 	bl	80039d4 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051f4:	f7fe fbee 	bl	80039d4 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b64      	cmp	r3, #100	; 0x64
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e1e7      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005206:	4b6c      	ldr	r3, [pc, #432]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0xe8>
 8005212:	e000      	b.n	8005216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d063      	beq.n	80052ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005222:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800522e:	4b62      	ldr	r3, [pc, #392]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005236:	2b08      	cmp	r3, #8
 8005238:	d11c      	bne.n	8005274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523a:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d116      	bne.n	8005274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005246:	4b5c      	ldr	r3, [pc, #368]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_RCC_OscConfig+0x152>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d001      	beq.n	800525e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e1bb      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800525e:	4b56      	ldr	r3, [pc, #344]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4952      	ldr	r1, [pc, #328]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005272:	e03a      	b.n	80052ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d020      	beq.n	80052be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800527c:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <HAL_RCC_OscConfig+0x2b0>)
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005282:	f7fe fba7 	bl	80039d4 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800528a:	f7fe fba3 	bl	80039d4 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e19c      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529c:	4b46      	ldr	r3, [pc, #280]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0f0      	beq.n	800528a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a8:	4b43      	ldr	r3, [pc, #268]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	4940      	ldr	r1, [pc, #256]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	600b      	str	r3, [r1, #0]
 80052bc:	e015      	b.n	80052ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052be:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <HAL_RCC_OscConfig+0x2b0>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fe fb86 	bl	80039d4 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052cc:	f7fe fb82 	bl	80039d4 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e17b      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052de:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d030      	beq.n	8005358 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d016      	beq.n	800532c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052fe:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <HAL_RCC_OscConfig+0x2b4>)
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7fe fb66 	bl	80039d4 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800530c:	f7fe fb62 	bl	80039d4 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e15b      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x200>
 800532a:	e015      	b.n	8005358 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800532c:	4b24      	ldr	r3, [pc, #144]	; (80053c0 <HAL_RCC_OscConfig+0x2b4>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005332:	f7fe fb4f 	bl	80039d4 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800533a:	f7fe fb4b 	bl	80039d4 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e144      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800534c:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800534e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f0      	bne.n	800533a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80a0 	beq.w	80054a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005366:	2300      	movs	r3, #0
 8005368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800536a:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10f      	bne.n	8005396 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005384:	6413      	str	r3, [r2, #64]	; 0x40
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_RCC_OscConfig+0x2b8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d121      	bne.n	80053e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a2:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <HAL_RCC_OscConfig+0x2b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <HAL_RCC_OscConfig+0x2b8>)
 80053a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ae:	f7fe fb11 	bl	80039d4 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	e011      	b.n	80053da <HAL_RCC_OscConfig+0x2ce>
 80053b6:	bf00      	nop
 80053b8:	40023800 	.word	0x40023800
 80053bc:	42470000 	.word	0x42470000
 80053c0:	42470e80 	.word	0x42470e80
 80053c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c8:	f7fe fb04 	bl	80039d4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e0fd      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053da:	4b81      	ldr	r3, [pc, #516]	; (80055e0 <HAL_RCC_OscConfig+0x4d4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d106      	bne.n	80053fc <HAL_RCC_OscConfig+0x2f0>
 80053ee:	4b7d      	ldr	r3, [pc, #500]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	4a7c      	ldr	r2, [pc, #496]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	6713      	str	r3, [r2, #112]	; 0x70
 80053fa:	e01c      	b.n	8005436 <HAL_RCC_OscConfig+0x32a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b05      	cmp	r3, #5
 8005402:	d10c      	bne.n	800541e <HAL_RCC_OscConfig+0x312>
 8005404:	4b77      	ldr	r3, [pc, #476]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	4a76      	ldr	r2, [pc, #472]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 800540a:	f043 0304 	orr.w	r3, r3, #4
 800540e:	6713      	str	r3, [r2, #112]	; 0x70
 8005410:	4b74      	ldr	r3, [pc, #464]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	4a73      	ldr	r2, [pc, #460]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	6713      	str	r3, [r2, #112]	; 0x70
 800541c:	e00b      	b.n	8005436 <HAL_RCC_OscConfig+0x32a>
 800541e:	4b71      	ldr	r3, [pc, #452]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4a70      	ldr	r2, [pc, #448]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	4b6e      	ldr	r3, [pc, #440]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	4a6d      	ldr	r2, [pc, #436]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 8005430:	f023 0304 	bic.w	r3, r3, #4
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d015      	beq.n	800546a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543e:	f7fe fac9 	bl	80039d4 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005444:	e00a      	b.n	800545c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005446:	f7fe fac5 	bl	80039d4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0bc      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545c:	4b61      	ldr	r3, [pc, #388]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ee      	beq.n	8005446 <HAL_RCC_OscConfig+0x33a>
 8005468:	e014      	b.n	8005494 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546a:	f7fe fab3 	bl	80039d4 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005470:	e00a      	b.n	8005488 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fe faaf 	bl	80039d4 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e0a6      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005488:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ee      	bne.n	8005472 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d105      	bne.n	80054a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800549a:	4b52      	ldr	r3, [pc, #328]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	4a51      	ldr	r2, [pc, #324]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 80054a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8092 	beq.w	80055d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054b0:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d05c      	beq.n	8005576 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d141      	bne.n	8005548 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c4:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <HAL_RCC_OscConfig+0x4dc>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ca:	f7fe fa83 	bl	80039d4 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d2:	f7fe fa7f 	bl	80039d4 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e078      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e4:	4b3f      	ldr	r3, [pc, #252]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1f0      	bne.n	80054d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	019b      	lsls	r3, r3, #6
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	3b01      	subs	r3, #1
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	061b      	lsls	r3, r3, #24
 8005514:	4933      	ldr	r1, [pc, #204]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 8005516:	4313      	orrs	r3, r2
 8005518:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800551a:	4b33      	ldr	r3, [pc, #204]	; (80055e8 <HAL_RCC_OscConfig+0x4dc>)
 800551c:	2201      	movs	r2, #1
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fe fa58 	bl	80039d4 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005528:	f7fe fa54 	bl	80039d4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e04d      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x41c>
 8005546:	e045      	b.n	80055d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005548:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <HAL_RCC_OscConfig+0x4dc>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554e:	f7fe fa41 	bl	80039d4 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005556:	f7fe fa3d 	bl	80039d4 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e036      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f0      	bne.n	8005556 <HAL_RCC_OscConfig+0x44a>
 8005574:	e02e      	b.n	80055d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e029      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005582:	4b18      	ldr	r3, [pc, #96]	; (80055e4 <HAL_RCC_OscConfig+0x4d8>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	429a      	cmp	r2, r3
 8005594:	d11c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d115      	bne.n	80055d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055aa:	4013      	ands	r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d10d      	bne.n	80055d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d106      	bne.n	80055d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40007000 	.word	0x40007000
 80055e4:	40023800 	.word	0x40023800
 80055e8:	42470060 	.word	0x42470060

080055ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0cc      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005600:	4b68      	ldr	r3, [pc, #416]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d90c      	bls.n	8005628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b65      	ldr	r3, [pc, #404]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005616:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0b8      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d020      	beq.n	8005676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005640:	4b59      	ldr	r3, [pc, #356]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4a58      	ldr	r2, [pc, #352]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800564a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005658:	4b53      	ldr	r3, [pc, #332]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4a52      	ldr	r2, [pc, #328]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005664:	4b50      	ldr	r3, [pc, #320]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	494d      	ldr	r1, [pc, #308]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d044      	beq.n	800570c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d119      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e07f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d003      	beq.n	80056aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d107      	bne.n	80056ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056aa:	4b3f      	ldr	r3, [pc, #252]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e06f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ba:	4b3b      	ldr	r3, [pc, #236]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e067      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ca:	4b37      	ldr	r3, [pc, #220]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 0203 	bic.w	r2, r3, #3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4934      	ldr	r1, [pc, #208]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056dc:	f7fe f97a 	bl	80039d4 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e2:	e00a      	b.n	80056fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e4:	f7fe f976 	bl	80039d4 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e04f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fa:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 020c 	and.w	r2, r3, #12
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	429a      	cmp	r2, r3
 800570a:	d1eb      	bne.n	80056e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d20c      	bcs.n	8005734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571a:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005722:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e032      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4916      	ldr	r1, [pc, #88]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	490e      	ldr	r1, [pc, #56]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005772:	f000 f821 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 8005776:	4601      	mov	r1, r0
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	5cd3      	ldrb	r3, [r2, r3]
 8005786:	fa21 f303 	lsr.w	r3, r1, r3
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <HAL_RCC_ClockConfig+0x1c4>)
 800578c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe f8da 	bl	800394c <HAL_InitTick>

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40023c00 	.word	0x40023c00
 80057a8:	40023800 	.word	0x40023800
 80057ac:	08009310 	.word	0x08009310
 80057b0:	20000008 	.word	0x20000008
 80057b4:	2000000c 	.word	0x2000000c

080057b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	2300      	movs	r3, #0
 80057c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ce:	4b63      	ldr	r3, [pc, #396]	; (800595c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d007      	beq.n	80057ea <HAL_RCC_GetSysClockFreq+0x32>
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d008      	beq.n	80057f0 <HAL_RCC_GetSysClockFreq+0x38>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f040 80b4 	bne.w	800594c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057e4:	4b5e      	ldr	r3, [pc, #376]	; (8005960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057e6:	60bb      	str	r3, [r7, #8]
       break;
 80057e8:	e0b3      	b.n	8005952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ea:	4b5e      	ldr	r3, [pc, #376]	; (8005964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80057ec:	60bb      	str	r3, [r7, #8]
      break;
 80057ee:	e0b0      	b.n	8005952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057f0:	4b5a      	ldr	r3, [pc, #360]	; (800595c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057fa:	4b58      	ldr	r3, [pc, #352]	; (800595c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d04a      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005806:	4b55      	ldr	r3, [pc, #340]	; (800595c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	099b      	lsrs	r3, r3, #6
 800580c:	f04f 0400 	mov.w	r4, #0
 8005810:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	ea03 0501 	and.w	r5, r3, r1
 800581c:	ea04 0602 	and.w	r6, r4, r2
 8005820:	4629      	mov	r1, r5
 8005822:	4632      	mov	r2, r6
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	0154      	lsls	r4, r2, #5
 800582e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005832:	014b      	lsls	r3, r1, #5
 8005834:	4619      	mov	r1, r3
 8005836:	4622      	mov	r2, r4
 8005838:	1b49      	subs	r1, r1, r5
 800583a:	eb62 0206 	sbc.w	r2, r2, r6
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	f04f 0400 	mov.w	r4, #0
 8005846:	0194      	lsls	r4, r2, #6
 8005848:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800584c:	018b      	lsls	r3, r1, #6
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	eb64 0402 	sbc.w	r4, r4, r2
 8005854:	f04f 0100 	mov.w	r1, #0
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	00e2      	lsls	r2, r4, #3
 800585e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005862:	00d9      	lsls	r1, r3, #3
 8005864:	460b      	mov	r3, r1
 8005866:	4614      	mov	r4, r2
 8005868:	195b      	adds	r3, r3, r5
 800586a:	eb44 0406 	adc.w	r4, r4, r6
 800586e:	f04f 0100 	mov.w	r1, #0
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	0262      	lsls	r2, r4, #9
 8005878:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800587c:	0259      	lsls	r1, r3, #9
 800587e:	460b      	mov	r3, r1
 8005880:	4614      	mov	r4, r2
 8005882:	4618      	mov	r0, r3
 8005884:	4621      	mov	r1, r4
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f04f 0400 	mov.w	r4, #0
 800588c:	461a      	mov	r2, r3
 800588e:	4623      	mov	r3, r4
 8005890:	f7fb f9cc 	bl	8000c2c <__aeabi_uldivmod>
 8005894:	4603      	mov	r3, r0
 8005896:	460c      	mov	r4, r1
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	e049      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800589c:	4b2f      	ldr	r3, [pc, #188]	; (800595c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	099b      	lsrs	r3, r3, #6
 80058a2:	f04f 0400 	mov.w	r4, #0
 80058a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	ea03 0501 	and.w	r5, r3, r1
 80058b2:	ea04 0602 	and.w	r6, r4, r2
 80058b6:	4629      	mov	r1, r5
 80058b8:	4632      	mov	r2, r6
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	f04f 0400 	mov.w	r4, #0
 80058c2:	0154      	lsls	r4, r2, #5
 80058c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058c8:	014b      	lsls	r3, r1, #5
 80058ca:	4619      	mov	r1, r3
 80058cc:	4622      	mov	r2, r4
 80058ce:	1b49      	subs	r1, r1, r5
 80058d0:	eb62 0206 	sbc.w	r2, r2, r6
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	0194      	lsls	r4, r2, #6
 80058de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058e2:	018b      	lsls	r3, r1, #6
 80058e4:	1a5b      	subs	r3, r3, r1
 80058e6:	eb64 0402 	sbc.w	r4, r4, r2
 80058ea:	f04f 0100 	mov.w	r1, #0
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	00e2      	lsls	r2, r4, #3
 80058f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058f8:	00d9      	lsls	r1, r3, #3
 80058fa:	460b      	mov	r3, r1
 80058fc:	4614      	mov	r4, r2
 80058fe:	195b      	adds	r3, r3, r5
 8005900:	eb44 0406 	adc.w	r4, r4, r6
 8005904:	f04f 0100 	mov.w	r1, #0
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	02a2      	lsls	r2, r4, #10
 800590e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005912:	0299      	lsls	r1, r3, #10
 8005914:	460b      	mov	r3, r1
 8005916:	4614      	mov	r4, r2
 8005918:	4618      	mov	r0, r3
 800591a:	4621      	mov	r1, r4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f04f 0400 	mov.w	r4, #0
 8005922:	461a      	mov	r2, r3
 8005924:	4623      	mov	r3, r4
 8005926:	f7fb f981 	bl	8000c2c <__aeabi_uldivmod>
 800592a:	4603      	mov	r3, r0
 800592c:	460c      	mov	r4, r1
 800592e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005930:	4b0a      	ldr	r3, [pc, #40]	; (800595c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	3301      	adds	r3, #1
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	60bb      	str	r3, [r7, #8]
      break;
 800594a:	e002      	b.n	8005952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800594e:	60bb      	str	r3, [r7, #8]
      break;
 8005950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005952:	68bb      	ldr	r3, [r7, #8]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595c:	40023800 	.word	0x40023800
 8005960:	00f42400 	.word	0x00f42400
 8005964:	007a1200 	.word	0x007a1200

08005968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <HAL_RCC_GetHCLKFreq+0x14>)
 800596e:	681b      	ldr	r3, [r3, #0]
}
 8005970:	4618      	mov	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000008 	.word	0x20000008

08005980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005984:	f7ff fff0 	bl	8005968 <HAL_RCC_GetHCLKFreq>
 8005988:	4601      	mov	r1, r0
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	0a9b      	lsrs	r3, r3, #10
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	4a03      	ldr	r2, [pc, #12]	; (80059a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005996:	5cd3      	ldrb	r3, [r2, r3]
 8005998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40023800 	.word	0x40023800
 80059a4:	08009320 	.word	0x08009320

080059a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059ac:	f7ff ffdc 	bl	8005968 <HAL_RCC_GetHCLKFreq>
 80059b0:	4601      	mov	r1, r0
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	0b5b      	lsrs	r3, r3, #13
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4a03      	ldr	r2, [pc, #12]	; (80059cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059be:	5cd3      	ldrb	r3, [r2, r3]
 80059c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40023800 	.word	0x40023800
 80059cc:	08009320 	.word	0x08009320

080059d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e056      	b.n	8005a90 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fd fdd3 	bl	80035a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	ea42 0103 	orr.w	r1, r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	0c1b      	lsrs	r3, r3, #16
 8005a60:	f003 0104 	and.w	r1, r3, #4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_SPI_Transmit_IT+0x20>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e067      	b.n	8005b88 <HAL_SPI_Transmit_IT+0xf0>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_SPI_Transmit_IT+0x34>
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ad0:	e055      	b.n	8005b7e <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d002      	beq.n	8005ae4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ae2:	e04c      	b.n	8005b7e <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	88fa      	ldrh	r2, [r7, #6]
 8005b02:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <HAL_SPI_Transmit_IT+0xfc>)
 8005b28:	645a      	str	r2, [r3, #68]	; 0x44
 8005b2a:	e002      	b.n	8005b32 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <HAL_SPI_Transmit_IT+0x100>)
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b3a:	d107      	bne.n	8005b4c <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005b5a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d008      	beq.n	8005b7c <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e000      	b.n	8005b7e <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8005b7c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	08005e1f 	.word	0x08005e1f
 8005b98:	08005dd9 	.word	0x08005dd9

08005b9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10f      	bne.n	8005be0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	099b      	lsrs	r3, r3, #6
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
    return;
 8005bde:	e0d8      	b.n	8005d92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <HAL_SPI_IRQHandler+0x66>
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	09db      	lsrs	r3, r3, #7
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
    return;
 8005c00:	e0c7      	b.n	8005d92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10c      	bne.n	8005c28 <HAL_SPI_IRQHandler+0x8c>
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	099b      	lsrs	r3, r3, #6
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80b5 	beq.w	8005d92 <HAL_SPI_IRQHandler+0x1f6>
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80ae 	beq.w	8005d92 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	099b      	lsrs	r3, r3, #6
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d023      	beq.n	8005c8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d011      	beq.n	8005c72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f043 0204 	orr.w	r2, r3, #4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	e00b      	b.n	8005c8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	693b      	ldr	r3, [r7, #16]
        return;
 8005c88:	e083      	b.n	8005d92 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d014      	beq.n	8005cc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f043 0201 	orr.w	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00c      	beq.n	8005ce6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd0:	f043 0208 	orr.w	r2, r3, #8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d050      	beq.n	8005d90 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cfc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <HAL_SPI_IRQHandler+0x17e>
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d034      	beq.n	8005d84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0203 	bic.w	r2, r2, #3
 8005d28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d011      	beq.n	8005d56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d36:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_SPI_IRQHandler+0x1fc>)
 8005d38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fda6 	bl	8004890 <HAL_DMA_Abort_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d62:	4a0d      	ldr	r2, [pc, #52]	; (8005d98 <HAL_SPI_IRQHandler+0x1fc>)
 8005d64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fd90 	bl	8004890 <HAL_DMA_Abort_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d82:	e003      	b.n	8005d8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f809 	bl	8005d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d8a:	e000      	b.n	8005d8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d8c:	bf00      	nop
    return;
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
  }
}
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	08005db1 	.word	0x08005db1

08005d9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff ffe6 	bl	8005d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8d3 	bl	8005fbc <SPI_CloseTx_ISR>
  }
}
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	881a      	ldrh	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	1c9a      	adds	r2, r3, #2
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f8b1 	bl	8005fbc <SPI_CloseTx_ISR>
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e72:	e04c      	b.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d048      	beq.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e7c:	f7fd fdaa 	bl	80039d4 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d902      	bls.n	8005e92 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d13d      	bne.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eaa:	d111      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb4:	d004      	beq.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebe:	d107      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed8:	d10f      	bne.n	8005efa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e00f      	b.n	8005f2e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d1a3      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <SPI_EndRxTxTransaction+0x7c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <SPI_EndRxTxTransaction+0x80>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	0d5b      	lsrs	r3, r3, #21
 8005f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f54:	fb02 f303 	mul.w	r3, r2, r3
 8005f58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f62:	d112      	bne.n	8005f8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ff77 	bl	8005e62 <SPI_WaitFlagStateUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d016      	beq.n	8005fa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e00f      	b.n	8005faa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa0:	2b80      	cmp	r3, #128	; 0x80
 8005fa2:	d0f2      	beq.n	8005f8a <SPI_EndRxTxTransaction+0x52>
 8005fa4:	e000      	b.n	8005fa8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005fa6:	bf00      	nop
  }

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000008 	.word	0x20000008
 8005fb8:	165e9f81 	.word	0x165e9f81

08005fbc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005fc4:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <SPI_CloseTx_ISR+0xbc>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2c      	ldr	r2, [pc, #176]	; (800607c <SPI_CloseTx_ISR+0xc0>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	0a5b      	lsrs	r3, r3, #9
 8005fd0:	2264      	movs	r2, #100	; 0x64
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd8:	f7fd fcfc 	bl	80039d4 <HAL_GetTick>
 8005fdc:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe8:	f043 0220 	orr.w	r2, r3, #32
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ff0:	e009      	b.n	8006006 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0eb      	beq.n	8005fde <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006014:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	2164      	movs	r1, #100	; 0x64
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ff8c 	bl	8005f38 <SPI_EndRxTxTransaction>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fe9b 	bl	8005d9c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006066:	e002      	b.n	800606e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7fd f94d 	bl	8003308 <HAL_SPI_TxCpltCallback>
}
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000008 	.word	0x20000008
 800607c:	057619f1 	.word	0x057619f1

08006080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e01d      	b.n	80060ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fd face 	bl	8003648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f000 fa38 	bl	8006534 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b06      	cmp	r3, #6
 80060f6:	d007      	beq.n	8006108 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0201 	orr.w	r2, r2, #1
 8006134:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b06      	cmp	r3, #6
 8006146:	d007      	beq.n	8006158 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b02      	cmp	r3, #2
 800617a:	d122      	bne.n	80061c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b02      	cmp	r3, #2
 8006188:	d11b      	bne.n	80061c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f06f 0202 	mvn.w	r2, #2
 8006192:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f9a5 	bl	80064f8 <HAL_TIM_IC_CaptureCallback>
 80061ae:	e005      	b.n	80061bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f997 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f9a8 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d122      	bne.n	8006216 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d11b      	bne.n	8006216 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f06f 0204 	mvn.w	r2, #4
 80061e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f97b 	bl	80064f8 <HAL_TIM_IC_CaptureCallback>
 8006202:	e005      	b.n	8006210 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f96d 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f97e 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b08      	cmp	r3, #8
 8006222:	d122      	bne.n	800626a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b08      	cmp	r3, #8
 8006230:	d11b      	bne.n	800626a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0208 	mvn.w	r2, #8
 800623a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2204      	movs	r2, #4
 8006240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f951 	bl	80064f8 <HAL_TIM_IC_CaptureCallback>
 8006256:	e005      	b.n	8006264 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f943 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f954 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b10      	cmp	r3, #16
 8006276:	d122      	bne.n	80062be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b10      	cmp	r3, #16
 8006284:	d11b      	bne.n	80062be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f06f 0210 	mvn.w	r2, #16
 800628e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2208      	movs	r2, #8
 8006294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f927 	bl	80064f8 <HAL_TIM_IC_CaptureCallback>
 80062aa:	e005      	b.n	80062b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f919 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f92a 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d10e      	bne.n	80062ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d107      	bne.n	80062ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0201 	mvn.w	r2, #1
 80062e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7fd f825 	bl	8003334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f4:	2b80      	cmp	r3, #128	; 0x80
 80062f6:	d10e      	bne.n	8006316 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d107      	bne.n	8006316 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800630e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 faa1 	bl	8006858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	d10e      	bne.n	8006342 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d107      	bne.n	8006342 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800633a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8ef 	bl	8006520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b20      	cmp	r3, #32
 800634e:	d10e      	bne.n	800636e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b20      	cmp	r3, #32
 800635c:	d107      	bne.n	800636e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f06f 0220 	mvn.w	r2, #32
 8006366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fa6b 	bl	8006844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_TIM_ConfigClockSource+0x18>
 800638a:	2302      	movs	r3, #2
 800638c:	e0a6      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x166>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b40      	cmp	r3, #64	; 0x40
 80063c4:	d067      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x120>
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d80b      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x6c>
 80063ca:	2b10      	cmp	r3, #16
 80063cc:	d073      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x140>
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d802      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x62>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d06f      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063d6:	e078      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d06c      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x140>
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d06a      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063e0:	e073      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063e2:	2b70      	cmp	r3, #112	; 0x70
 80063e4:	d00d      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x8c>
 80063e6:	2b70      	cmp	r3, #112	; 0x70
 80063e8:	d804      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x7e>
 80063ea:	2b50      	cmp	r3, #80	; 0x50
 80063ec:	d033      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0xe0>
 80063ee:	2b60      	cmp	r3, #96	; 0x60
 80063f0:	d041      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80063f2:	e06a      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f8:	d066      	beq.n	80064c8 <HAL_TIM_ConfigClockSource+0x152>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fe:	d017      	beq.n	8006430 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006400:	e063      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6899      	ldr	r1, [r3, #8]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f000 f989 	bl	8006728 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006424:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	609a      	str	r2, [r3, #8]
      break;
 800642e:	e04c      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	6899      	ldr	r1, [r3, #8]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f000 f972 	bl	8006728 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006452:	609a      	str	r2, [r3, #8]
      break;
 8006454:	e039      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	461a      	mov	r2, r3
 8006464:	f000 f8e6 	bl	8006634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2150      	movs	r1, #80	; 0x50
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f93f 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8006474:	e029      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	461a      	mov	r2, r3
 8006484:	f000 f905 	bl	8006692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2160      	movs	r1, #96	; 0x60
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f92f 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8006494:	e019      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6859      	ldr	r1, [r3, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f000 f8c6 	bl	8006634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2140      	movs	r1, #64	; 0x40
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f91f 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 80064b4:	e009      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f000 f916 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 80064c6:	e000      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x154>
      break;
 80064c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a34      	ldr	r2, [pc, #208]	; (8006618 <TIM_Base_SetConfig+0xe4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00f      	beq.n	800656c <TIM_Base_SetConfig+0x38>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d00b      	beq.n	800656c <TIM_Base_SetConfig+0x38>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a31      	ldr	r2, [pc, #196]	; (800661c <TIM_Base_SetConfig+0xe8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d007      	beq.n	800656c <TIM_Base_SetConfig+0x38>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a30      	ldr	r2, [pc, #192]	; (8006620 <TIM_Base_SetConfig+0xec>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_Base_SetConfig+0x38>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a2f      	ldr	r2, [pc, #188]	; (8006624 <TIM_Base_SetConfig+0xf0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d108      	bne.n	800657e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a25      	ldr	r2, [pc, #148]	; (8006618 <TIM_Base_SetConfig+0xe4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01b      	beq.n	80065be <TIM_Base_SetConfig+0x8a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658c:	d017      	beq.n	80065be <TIM_Base_SetConfig+0x8a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a22      	ldr	r2, [pc, #136]	; (800661c <TIM_Base_SetConfig+0xe8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <TIM_Base_SetConfig+0x8a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a21      	ldr	r2, [pc, #132]	; (8006620 <TIM_Base_SetConfig+0xec>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00f      	beq.n	80065be <TIM_Base_SetConfig+0x8a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a20      	ldr	r2, [pc, #128]	; (8006624 <TIM_Base_SetConfig+0xf0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00b      	beq.n	80065be <TIM_Base_SetConfig+0x8a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <TIM_Base_SetConfig+0xf4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d007      	beq.n	80065be <TIM_Base_SetConfig+0x8a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a1e      	ldr	r2, [pc, #120]	; (800662c <TIM_Base_SetConfig+0xf8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_Base_SetConfig+0x8a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a1d      	ldr	r2, [pc, #116]	; (8006630 <TIM_Base_SetConfig+0xfc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d108      	bne.n	80065d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a08      	ldr	r2, [pc, #32]	; (8006618 <TIM_Base_SetConfig+0xe4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d103      	bne.n	8006604 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	615a      	str	r2, [r3, #20]
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800

08006634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f023 0201 	bic.w	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800665e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 030a 	bic.w	r3, r3, #10
 8006670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006692:	b480      	push	{r7}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f023 0210 	bic.w	r2, r3, #16
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	031b      	lsls	r3, r3, #12
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	f043 0307 	orr.w	r3, r3, #7
 8006714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	431a      	orrs	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4313      	orrs	r3, r2
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	609a      	str	r2, [r3, #8]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e050      	b.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d018      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d013      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00e      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a15      	ldr	r2, [pc, #84]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a13      	ldr	r2, [pc, #76]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d10c      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4313      	orrs	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800
 800683c:	40000c00 	.word	0x40000c00
 8006840:	40014000 	.word	0x40014000

08006844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e03f      	b.n	80068fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fc ff16 	bl	80036c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	; 0x24
 800689c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fb97 	bl	8006fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b088      	sub	sp, #32
 800690a:	af02      	add	r7, sp, #8
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b20      	cmp	r3, #32
 8006924:	f040 8083 	bne.w	8006a2e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_UART_Transmit+0x2e>
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e07b      	b.n	8006a30 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_UART_Transmit+0x40>
 8006942:	2302      	movs	r3, #2
 8006944:	e074      	b.n	8006a30 <HAL_UART_Transmit+0x12a>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2221      	movs	r2, #33	; 0x21
 8006958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800695c:	f7fd f83a 	bl	80039d4 <HAL_GetTick>
 8006960:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	88fa      	ldrh	r2, [r7, #6]
 8006966:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006976:	e042      	b.n	80069fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698e:	d122      	bne.n	80069d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2200      	movs	r2, #0
 8006998:	2180      	movs	r1, #128	; 0x80
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f9b6 	bl	8006d0c <UART_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e042      	b.n	8006a30 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	3302      	adds	r3, #2
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	e017      	b.n	80069fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	e013      	b.n	80069fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	2180      	movs	r1, #128	; 0x80
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f993 	bl	8006d0c <UART_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e01f      	b.n	8006a30 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	60ba      	str	r2, [r7, #8]
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1b7      	bne.n	8006978 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2140      	movs	r1, #64	; 0x40
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f97a 	bl	8006d0c <UART_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e006      	b.n	8006a30 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e000      	b.n	8006a30 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006a2e:	2302      	movs	r3, #2
  }
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d140      	bne.n	8006ad4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_UART_Receive_IT+0x26>
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e039      	b.n	8006ad6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_UART_Receive_IT+0x38>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e032      	b.n	8006ad6 <HAL_UART_Receive_IT+0x9e>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	88fa      	ldrh	r2, [r7, #6]
 8006a82:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	88fa      	ldrh	r2, [r7, #6]
 8006a88:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2222      	movs	r2, #34	; 0x22
 8006a94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0220 	orr.w	r2, r2, #32
 8006ace:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
	...

08006ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10d      	bne.n	8006b36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d008      	beq.n	8006b36 <HAL_UART_IRQHandler+0x52>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9d6 	bl	8006ee0 <UART_Receive_IT>
      return;
 8006b34:	e0d1      	b.n	8006cda <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80b0 	beq.w	8006c9e <HAL_UART_IRQHandler+0x1ba>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d105      	bne.n	8006b54 <HAL_UART_IRQHandler+0x70>
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80a5 	beq.w	8006c9e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <HAL_UART_IRQHandler+0x90>
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6c:	f043 0201 	orr.w	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <HAL_UART_IRQHandler+0xb0>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	f043 0202 	orr.w	r2, r3, #2
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <HAL_UART_IRQHandler+0xd0>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	f043 0204 	orr.w	r2, r3, #4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00f      	beq.n	8006bde <HAL_UART_IRQHandler+0xfa>
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <HAL_UART_IRQHandler+0xee>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd6:	f043 0208 	orr.w	r2, r3, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d078      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <HAL_UART_IRQHandler+0x11c>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f970 	bl	8006ee0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	bf0c      	ite	eq
 8006c0e:	2301      	moveq	r3, #1
 8006c10:	2300      	movne	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <HAL_UART_IRQHandler+0x144>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d031      	beq.n	8006c8c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8b9 	bl	8006da0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b40      	cmp	r3, #64	; 0x40
 8006c3a:	d123      	bne.n	8006c84 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695a      	ldr	r2, [r3, #20]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c4a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d013      	beq.n	8006c7c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	4a21      	ldr	r2, [pc, #132]	; (8006ce0 <HAL_UART_IRQHandler+0x1fc>)
 8006c5a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fe15 	bl	8004890 <HAL_DMA_Abort_IT>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d016      	beq.n	8006c9a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c76:	4610      	mov	r0, r2
 8006c78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7a:	e00e      	b.n	8006c9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f83b 	bl	8006cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c82:	e00a      	b.n	8006c9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f837 	bl	8006cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8a:	e006      	b.n	8006c9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f833 	bl	8006cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006c98:	e01e      	b.n	8006cd8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9a:	bf00      	nop
    return;
 8006c9c:	e01c      	b.n	8006cd8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <HAL_UART_IRQHandler+0x1d6>
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f8a6 	bl	8006e04 <UART_Transmit_IT>
    return;
 8006cb8:	e00f      	b.n	8006cda <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <HAL_UART_IRQHandler+0x1f6>
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f8ee 	bl	8006eb0 <UART_EndTransmit_IT>
    return;
 8006cd4:	bf00      	nop
 8006cd6:	e000      	b.n	8006cda <HAL_UART_IRQHandler+0x1f6>
    return;
 8006cd8:	bf00      	nop
  }
}
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	08006ddd 	.word	0x08006ddd

08006ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1c:	e02c      	b.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d028      	beq.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d2c:	f7fc fe52 	bl	80039d4 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d21d      	bcs.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e00f      	b.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	4013      	ands	r3, r2
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d0c3      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006db6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff ff7e 	bl	8006cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b21      	cmp	r3, #33	; 0x21
 8006e16:	d144      	bne.n	8006ea2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	d11a      	bne.n	8006e58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	1c9a      	adds	r2, r3, #2
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	621a      	str	r2, [r3, #32]
 8006e4a:	e00e      	b.n	8006e6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	621a      	str	r2, [r3, #32]
 8006e56:	e008      	b.n	8006e6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	1c59      	adds	r1, r3, #1
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6211      	str	r1, [r2, #32]
 8006e62:	781a      	ldrb	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	4619      	mov	r1, r3
 8006e78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10f      	bne.n	8006e9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e000      	b.n	8006ea4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006ea2:	2302      	movs	r3, #2
  }
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff ff07 	bl	8006ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b22      	cmp	r3, #34	; 0x22
 8006ef2:	d171      	bne.n	8006fd8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efc:	d123      	bne.n	8006f46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10e      	bne.n	8006f2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	1c9a      	adds	r2, r3, #2
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	629a      	str	r2, [r3, #40]	; 0x28
 8006f28:	e029      	b.n	8006f7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28
 8006f44:	e01b      	b.n	8006f7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6858      	ldr	r0, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	1c59      	adds	r1, r3, #1
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6291      	str	r1, [r2, #40]	; 0x28
 8006f5e:	b2c2      	uxtb	r2, r0
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e00c      	b.n	8006f7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f70:	1c58      	adds	r0, r3, #1
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	6288      	str	r0, [r1, #40]	; 0x28
 8006f76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d120      	bne.n	8006fd4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0220 	bic.w	r2, r2, #32
 8006fa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	695a      	ldr	r2, [r3, #20]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0201 	bic.w	r2, r2, #1
 8006fc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fc fa20 	bl	8003410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e002      	b.n	8006fda <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007026:	f023 030c 	bic.w	r3, r3, #12
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	430b      	orrs	r3, r1
 8007032:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	699a      	ldr	r2, [r3, #24]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007052:	f040 818b 	bne.w	800736c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4ac1      	ldr	r2, [pc, #772]	; (8007360 <UART_SetConfig+0x37c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d005      	beq.n	800706c <UART_SetConfig+0x88>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4abf      	ldr	r2, [pc, #764]	; (8007364 <UART_SetConfig+0x380>)
 8007066:	4293      	cmp	r3, r2
 8007068:	f040 80bd 	bne.w	80071e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800706c:	f7fe fc9c 	bl	80059a8 <HAL_RCC_GetPCLK2Freq>
 8007070:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	461d      	mov	r5, r3
 8007076:	f04f 0600 	mov.w	r6, #0
 800707a:	46a8      	mov	r8, r5
 800707c:	46b1      	mov	r9, r6
 800707e:	eb18 0308 	adds.w	r3, r8, r8
 8007082:	eb49 0409 	adc.w	r4, r9, r9
 8007086:	4698      	mov	r8, r3
 8007088:	46a1      	mov	r9, r4
 800708a:	eb18 0805 	adds.w	r8, r8, r5
 800708e:	eb49 0906 	adc.w	r9, r9, r6
 8007092:	f04f 0100 	mov.w	r1, #0
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800709e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070a6:	4688      	mov	r8, r1
 80070a8:	4691      	mov	r9, r2
 80070aa:	eb18 0005 	adds.w	r0, r8, r5
 80070ae:	eb49 0106 	adc.w	r1, r9, r6
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	461d      	mov	r5, r3
 80070b8:	f04f 0600 	mov.w	r6, #0
 80070bc:	196b      	adds	r3, r5, r5
 80070be:	eb46 0406 	adc.w	r4, r6, r6
 80070c2:	461a      	mov	r2, r3
 80070c4:	4623      	mov	r3, r4
 80070c6:	f7f9 fdb1 	bl	8000c2c <__aeabi_uldivmod>
 80070ca:	4603      	mov	r3, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	461a      	mov	r2, r3
 80070d0:	4ba5      	ldr	r3, [pc, #660]	; (8007368 <UART_SetConfig+0x384>)
 80070d2:	fba3 2302 	umull	r2, r3, r3, r2
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	461d      	mov	r5, r3
 80070e0:	f04f 0600 	mov.w	r6, #0
 80070e4:	46a9      	mov	r9, r5
 80070e6:	46b2      	mov	sl, r6
 80070e8:	eb19 0309 	adds.w	r3, r9, r9
 80070ec:	eb4a 040a 	adc.w	r4, sl, sl
 80070f0:	4699      	mov	r9, r3
 80070f2:	46a2      	mov	sl, r4
 80070f4:	eb19 0905 	adds.w	r9, r9, r5
 80070f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80070fc:	f04f 0100 	mov.w	r1, #0
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007108:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800710c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007110:	4689      	mov	r9, r1
 8007112:	4692      	mov	sl, r2
 8007114:	eb19 0005 	adds.w	r0, r9, r5
 8007118:	eb4a 0106 	adc.w	r1, sl, r6
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	461d      	mov	r5, r3
 8007122:	f04f 0600 	mov.w	r6, #0
 8007126:	196b      	adds	r3, r5, r5
 8007128:	eb46 0406 	adc.w	r4, r6, r6
 800712c:	461a      	mov	r2, r3
 800712e:	4623      	mov	r3, r4
 8007130:	f7f9 fd7c 	bl	8000c2c <__aeabi_uldivmod>
 8007134:	4603      	mov	r3, r0
 8007136:	460c      	mov	r4, r1
 8007138:	461a      	mov	r2, r3
 800713a:	4b8b      	ldr	r3, [pc, #556]	; (8007368 <UART_SetConfig+0x384>)
 800713c:	fba3 1302 	umull	r1, r3, r3, r2
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	2164      	movs	r1, #100	; 0x64
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	3332      	adds	r3, #50	; 0x32
 800714e:	4a86      	ldr	r2, [pc, #536]	; (8007368 <UART_SetConfig+0x384>)
 8007150:	fba2 2303 	umull	r2, r3, r2, r3
 8007154:	095b      	lsrs	r3, r3, #5
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800715c:	4498      	add	r8, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	461d      	mov	r5, r3
 8007162:	f04f 0600 	mov.w	r6, #0
 8007166:	46a9      	mov	r9, r5
 8007168:	46b2      	mov	sl, r6
 800716a:	eb19 0309 	adds.w	r3, r9, r9
 800716e:	eb4a 040a 	adc.w	r4, sl, sl
 8007172:	4699      	mov	r9, r3
 8007174:	46a2      	mov	sl, r4
 8007176:	eb19 0905 	adds.w	r9, r9, r5
 800717a:	eb4a 0a06 	adc.w	sl, sl, r6
 800717e:	f04f 0100 	mov.w	r1, #0
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800718a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800718e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007192:	4689      	mov	r9, r1
 8007194:	4692      	mov	sl, r2
 8007196:	eb19 0005 	adds.w	r0, r9, r5
 800719a:	eb4a 0106 	adc.w	r1, sl, r6
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	461d      	mov	r5, r3
 80071a4:	f04f 0600 	mov.w	r6, #0
 80071a8:	196b      	adds	r3, r5, r5
 80071aa:	eb46 0406 	adc.w	r4, r6, r6
 80071ae:	461a      	mov	r2, r3
 80071b0:	4623      	mov	r3, r4
 80071b2:	f7f9 fd3b 	bl	8000c2c <__aeabi_uldivmod>
 80071b6:	4603      	mov	r3, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	461a      	mov	r2, r3
 80071bc:	4b6a      	ldr	r3, [pc, #424]	; (8007368 <UART_SetConfig+0x384>)
 80071be:	fba3 1302 	umull	r1, r3, r3, r2
 80071c2:	095b      	lsrs	r3, r3, #5
 80071c4:	2164      	movs	r1, #100	; 0x64
 80071c6:	fb01 f303 	mul.w	r3, r1, r3
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	3332      	adds	r3, #50	; 0x32
 80071d0:	4a65      	ldr	r2, [pc, #404]	; (8007368 <UART_SetConfig+0x384>)
 80071d2:	fba2 2303 	umull	r2, r3, r2, r3
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	f003 0207 	and.w	r2, r3, #7
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4442      	add	r2, r8
 80071e2:	609a      	str	r2, [r3, #8]
 80071e4:	e26f      	b.n	80076c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071e6:	f7fe fbcb 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 80071ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	461d      	mov	r5, r3
 80071f0:	f04f 0600 	mov.w	r6, #0
 80071f4:	46a8      	mov	r8, r5
 80071f6:	46b1      	mov	r9, r6
 80071f8:	eb18 0308 	adds.w	r3, r8, r8
 80071fc:	eb49 0409 	adc.w	r4, r9, r9
 8007200:	4698      	mov	r8, r3
 8007202:	46a1      	mov	r9, r4
 8007204:	eb18 0805 	adds.w	r8, r8, r5
 8007208:	eb49 0906 	adc.w	r9, r9, r6
 800720c:	f04f 0100 	mov.w	r1, #0
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007218:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800721c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007220:	4688      	mov	r8, r1
 8007222:	4691      	mov	r9, r2
 8007224:	eb18 0005 	adds.w	r0, r8, r5
 8007228:	eb49 0106 	adc.w	r1, r9, r6
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	461d      	mov	r5, r3
 8007232:	f04f 0600 	mov.w	r6, #0
 8007236:	196b      	adds	r3, r5, r5
 8007238:	eb46 0406 	adc.w	r4, r6, r6
 800723c:	461a      	mov	r2, r3
 800723e:	4623      	mov	r3, r4
 8007240:	f7f9 fcf4 	bl	8000c2c <__aeabi_uldivmod>
 8007244:	4603      	mov	r3, r0
 8007246:	460c      	mov	r4, r1
 8007248:	461a      	mov	r2, r3
 800724a:	4b47      	ldr	r3, [pc, #284]	; (8007368 <UART_SetConfig+0x384>)
 800724c:	fba3 2302 	umull	r2, r3, r3, r2
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	461d      	mov	r5, r3
 800725a:	f04f 0600 	mov.w	r6, #0
 800725e:	46a9      	mov	r9, r5
 8007260:	46b2      	mov	sl, r6
 8007262:	eb19 0309 	adds.w	r3, r9, r9
 8007266:	eb4a 040a 	adc.w	r4, sl, sl
 800726a:	4699      	mov	r9, r3
 800726c:	46a2      	mov	sl, r4
 800726e:	eb19 0905 	adds.w	r9, r9, r5
 8007272:	eb4a 0a06 	adc.w	sl, sl, r6
 8007276:	f04f 0100 	mov.w	r1, #0
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800728a:	4689      	mov	r9, r1
 800728c:	4692      	mov	sl, r2
 800728e:	eb19 0005 	adds.w	r0, r9, r5
 8007292:	eb4a 0106 	adc.w	r1, sl, r6
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	461d      	mov	r5, r3
 800729c:	f04f 0600 	mov.w	r6, #0
 80072a0:	196b      	adds	r3, r5, r5
 80072a2:	eb46 0406 	adc.w	r4, r6, r6
 80072a6:	461a      	mov	r2, r3
 80072a8:	4623      	mov	r3, r4
 80072aa:	f7f9 fcbf 	bl	8000c2c <__aeabi_uldivmod>
 80072ae:	4603      	mov	r3, r0
 80072b0:	460c      	mov	r4, r1
 80072b2:	461a      	mov	r2, r3
 80072b4:	4b2c      	ldr	r3, [pc, #176]	; (8007368 <UART_SetConfig+0x384>)
 80072b6:	fba3 1302 	umull	r1, r3, r3, r2
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	2164      	movs	r1, #100	; 0x64
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	3332      	adds	r3, #50	; 0x32
 80072c8:	4a27      	ldr	r2, [pc, #156]	; (8007368 <UART_SetConfig+0x384>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072d6:	4498      	add	r8, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	461d      	mov	r5, r3
 80072dc:	f04f 0600 	mov.w	r6, #0
 80072e0:	46a9      	mov	r9, r5
 80072e2:	46b2      	mov	sl, r6
 80072e4:	eb19 0309 	adds.w	r3, r9, r9
 80072e8:	eb4a 040a 	adc.w	r4, sl, sl
 80072ec:	4699      	mov	r9, r3
 80072ee:	46a2      	mov	sl, r4
 80072f0:	eb19 0905 	adds.w	r9, r9, r5
 80072f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80072f8:	f04f 0100 	mov.w	r1, #0
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007304:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007308:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800730c:	4689      	mov	r9, r1
 800730e:	4692      	mov	sl, r2
 8007310:	eb19 0005 	adds.w	r0, r9, r5
 8007314:	eb4a 0106 	adc.w	r1, sl, r6
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	461d      	mov	r5, r3
 800731e:	f04f 0600 	mov.w	r6, #0
 8007322:	196b      	adds	r3, r5, r5
 8007324:	eb46 0406 	adc.w	r4, r6, r6
 8007328:	461a      	mov	r2, r3
 800732a:	4623      	mov	r3, r4
 800732c:	f7f9 fc7e 	bl	8000c2c <__aeabi_uldivmod>
 8007330:	4603      	mov	r3, r0
 8007332:	460c      	mov	r4, r1
 8007334:	461a      	mov	r2, r3
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <UART_SetConfig+0x384>)
 8007338:	fba3 1302 	umull	r1, r3, r3, r2
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	2164      	movs	r1, #100	; 0x64
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	3332      	adds	r3, #50	; 0x32
 800734a:	4a07      	ldr	r2, [pc, #28]	; (8007368 <UART_SetConfig+0x384>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	095b      	lsrs	r3, r3, #5
 8007352:	f003 0207 	and.w	r2, r3, #7
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4442      	add	r2, r8
 800735c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800735e:	e1b2      	b.n	80076c6 <UART_SetConfig+0x6e2>
 8007360:	40011000 	.word	0x40011000
 8007364:	40011400 	.word	0x40011400
 8007368:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4ad7      	ldr	r2, [pc, #860]	; (80076d0 <UART_SetConfig+0x6ec>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d005      	beq.n	8007382 <UART_SetConfig+0x39e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4ad6      	ldr	r2, [pc, #856]	; (80076d4 <UART_SetConfig+0x6f0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	f040 80d1 	bne.w	8007524 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007382:	f7fe fb11 	bl	80059a8 <HAL_RCC_GetPCLK2Freq>
 8007386:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	469a      	mov	sl, r3
 800738c:	f04f 0b00 	mov.w	fp, #0
 8007390:	46d0      	mov	r8, sl
 8007392:	46d9      	mov	r9, fp
 8007394:	eb18 0308 	adds.w	r3, r8, r8
 8007398:	eb49 0409 	adc.w	r4, r9, r9
 800739c:	4698      	mov	r8, r3
 800739e:	46a1      	mov	r9, r4
 80073a0:	eb18 080a 	adds.w	r8, r8, sl
 80073a4:	eb49 090b 	adc.w	r9, r9, fp
 80073a8:	f04f 0100 	mov.w	r1, #0
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073bc:	4688      	mov	r8, r1
 80073be:	4691      	mov	r9, r2
 80073c0:	eb1a 0508 	adds.w	r5, sl, r8
 80073c4:	eb4b 0609 	adc.w	r6, fp, r9
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4619      	mov	r1, r3
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	f04f 0400 	mov.w	r4, #0
 80073da:	0094      	lsls	r4, r2, #2
 80073dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073e0:	008b      	lsls	r3, r1, #2
 80073e2:	461a      	mov	r2, r3
 80073e4:	4623      	mov	r3, r4
 80073e6:	4628      	mov	r0, r5
 80073e8:	4631      	mov	r1, r6
 80073ea:	f7f9 fc1f 	bl	8000c2c <__aeabi_uldivmod>
 80073ee:	4603      	mov	r3, r0
 80073f0:	460c      	mov	r4, r1
 80073f2:	461a      	mov	r2, r3
 80073f4:	4bb8      	ldr	r3, [pc, #736]	; (80076d8 <UART_SetConfig+0x6f4>)
 80073f6:	fba3 2302 	umull	r2, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	469b      	mov	fp, r3
 8007404:	f04f 0c00 	mov.w	ip, #0
 8007408:	46d9      	mov	r9, fp
 800740a:	46e2      	mov	sl, ip
 800740c:	eb19 0309 	adds.w	r3, r9, r9
 8007410:	eb4a 040a 	adc.w	r4, sl, sl
 8007414:	4699      	mov	r9, r3
 8007416:	46a2      	mov	sl, r4
 8007418:	eb19 090b 	adds.w	r9, r9, fp
 800741c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007420:	f04f 0100 	mov.w	r1, #0
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800742c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007434:	4689      	mov	r9, r1
 8007436:	4692      	mov	sl, r2
 8007438:	eb1b 0509 	adds.w	r5, fp, r9
 800743c:	eb4c 060a 	adc.w	r6, ip, sl
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4619      	mov	r1, r3
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	f04f 0400 	mov.w	r4, #0
 8007452:	0094      	lsls	r4, r2, #2
 8007454:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007458:	008b      	lsls	r3, r1, #2
 800745a:	461a      	mov	r2, r3
 800745c:	4623      	mov	r3, r4
 800745e:	4628      	mov	r0, r5
 8007460:	4631      	mov	r1, r6
 8007462:	f7f9 fbe3 	bl	8000c2c <__aeabi_uldivmod>
 8007466:	4603      	mov	r3, r0
 8007468:	460c      	mov	r4, r1
 800746a:	461a      	mov	r2, r3
 800746c:	4b9a      	ldr	r3, [pc, #616]	; (80076d8 <UART_SetConfig+0x6f4>)
 800746e:	fba3 1302 	umull	r1, r3, r3, r2
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	2164      	movs	r1, #100	; 0x64
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	3332      	adds	r3, #50	; 0x32
 8007480:	4a95      	ldr	r2, [pc, #596]	; (80076d8 <UART_SetConfig+0x6f4>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800748c:	4498      	add	r8, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	469b      	mov	fp, r3
 8007492:	f04f 0c00 	mov.w	ip, #0
 8007496:	46d9      	mov	r9, fp
 8007498:	46e2      	mov	sl, ip
 800749a:	eb19 0309 	adds.w	r3, r9, r9
 800749e:	eb4a 040a 	adc.w	r4, sl, sl
 80074a2:	4699      	mov	r9, r3
 80074a4:	46a2      	mov	sl, r4
 80074a6:	eb19 090b 	adds.w	r9, r9, fp
 80074aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074ae:	f04f 0100 	mov.w	r1, #0
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074c2:	4689      	mov	r9, r1
 80074c4:	4692      	mov	sl, r2
 80074c6:	eb1b 0509 	adds.w	r5, fp, r9
 80074ca:	eb4c 060a 	adc.w	r6, ip, sl
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	4619      	mov	r1, r3
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	f04f 0400 	mov.w	r4, #0
 80074e0:	0094      	lsls	r4, r2, #2
 80074e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074e6:	008b      	lsls	r3, r1, #2
 80074e8:	461a      	mov	r2, r3
 80074ea:	4623      	mov	r3, r4
 80074ec:	4628      	mov	r0, r5
 80074ee:	4631      	mov	r1, r6
 80074f0:	f7f9 fb9c 	bl	8000c2c <__aeabi_uldivmod>
 80074f4:	4603      	mov	r3, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	461a      	mov	r2, r3
 80074fa:	4b77      	ldr	r3, [pc, #476]	; (80076d8 <UART_SetConfig+0x6f4>)
 80074fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	2164      	movs	r1, #100	; 0x64
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	3332      	adds	r3, #50	; 0x32
 800750e:	4a72      	ldr	r2, [pc, #456]	; (80076d8 <UART_SetConfig+0x6f4>)
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	f003 020f 	and.w	r2, r3, #15
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4442      	add	r2, r8
 8007520:	609a      	str	r2, [r3, #8]
 8007522:	e0d0      	b.n	80076c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007524:	f7fe fa2c 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 8007528:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	469a      	mov	sl, r3
 800752e:	f04f 0b00 	mov.w	fp, #0
 8007532:	46d0      	mov	r8, sl
 8007534:	46d9      	mov	r9, fp
 8007536:	eb18 0308 	adds.w	r3, r8, r8
 800753a:	eb49 0409 	adc.w	r4, r9, r9
 800753e:	4698      	mov	r8, r3
 8007540:	46a1      	mov	r9, r4
 8007542:	eb18 080a 	adds.w	r8, r8, sl
 8007546:	eb49 090b 	adc.w	r9, r9, fp
 800754a:	f04f 0100 	mov.w	r1, #0
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007556:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800755a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800755e:	4688      	mov	r8, r1
 8007560:	4691      	mov	r9, r2
 8007562:	eb1a 0508 	adds.w	r5, sl, r8
 8007566:	eb4b 0609 	adc.w	r6, fp, r9
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	4619      	mov	r1, r3
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	f04f 0400 	mov.w	r4, #0
 800757c:	0094      	lsls	r4, r2, #2
 800757e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007582:	008b      	lsls	r3, r1, #2
 8007584:	461a      	mov	r2, r3
 8007586:	4623      	mov	r3, r4
 8007588:	4628      	mov	r0, r5
 800758a:	4631      	mov	r1, r6
 800758c:	f7f9 fb4e 	bl	8000c2c <__aeabi_uldivmod>
 8007590:	4603      	mov	r3, r0
 8007592:	460c      	mov	r4, r1
 8007594:	461a      	mov	r2, r3
 8007596:	4b50      	ldr	r3, [pc, #320]	; (80076d8 <UART_SetConfig+0x6f4>)
 8007598:	fba3 2302 	umull	r2, r3, r3, r2
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	469b      	mov	fp, r3
 80075a6:	f04f 0c00 	mov.w	ip, #0
 80075aa:	46d9      	mov	r9, fp
 80075ac:	46e2      	mov	sl, ip
 80075ae:	eb19 0309 	adds.w	r3, r9, r9
 80075b2:	eb4a 040a 	adc.w	r4, sl, sl
 80075b6:	4699      	mov	r9, r3
 80075b8:	46a2      	mov	sl, r4
 80075ba:	eb19 090b 	adds.w	r9, r9, fp
 80075be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075c2:	f04f 0100 	mov.w	r1, #0
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075d6:	4689      	mov	r9, r1
 80075d8:	4692      	mov	sl, r2
 80075da:	eb1b 0509 	adds.w	r5, fp, r9
 80075de:	eb4c 060a 	adc.w	r6, ip, sl
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4619      	mov	r1, r3
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	f04f 0400 	mov.w	r4, #0
 80075f4:	0094      	lsls	r4, r2, #2
 80075f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075fa:	008b      	lsls	r3, r1, #2
 80075fc:	461a      	mov	r2, r3
 80075fe:	4623      	mov	r3, r4
 8007600:	4628      	mov	r0, r5
 8007602:	4631      	mov	r1, r6
 8007604:	f7f9 fb12 	bl	8000c2c <__aeabi_uldivmod>
 8007608:	4603      	mov	r3, r0
 800760a:	460c      	mov	r4, r1
 800760c:	461a      	mov	r2, r3
 800760e:	4b32      	ldr	r3, [pc, #200]	; (80076d8 <UART_SetConfig+0x6f4>)
 8007610:	fba3 1302 	umull	r1, r3, r3, r2
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	2164      	movs	r1, #100	; 0x64
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	3332      	adds	r3, #50	; 0x32
 8007622:	4a2d      	ldr	r2, [pc, #180]	; (80076d8 <UART_SetConfig+0x6f4>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800762e:	4498      	add	r8, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	469b      	mov	fp, r3
 8007634:	f04f 0c00 	mov.w	ip, #0
 8007638:	46d9      	mov	r9, fp
 800763a:	46e2      	mov	sl, ip
 800763c:	eb19 0309 	adds.w	r3, r9, r9
 8007640:	eb4a 040a 	adc.w	r4, sl, sl
 8007644:	4699      	mov	r9, r3
 8007646:	46a2      	mov	sl, r4
 8007648:	eb19 090b 	adds.w	r9, r9, fp
 800764c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007650:	f04f 0100 	mov.w	r1, #0
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800765c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007664:	4689      	mov	r9, r1
 8007666:	4692      	mov	sl, r2
 8007668:	eb1b 0509 	adds.w	r5, fp, r9
 800766c:	eb4c 060a 	adc.w	r6, ip, sl
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4619      	mov	r1, r3
 8007676:	f04f 0200 	mov.w	r2, #0
 800767a:	f04f 0300 	mov.w	r3, #0
 800767e:	f04f 0400 	mov.w	r4, #0
 8007682:	0094      	lsls	r4, r2, #2
 8007684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007688:	008b      	lsls	r3, r1, #2
 800768a:	461a      	mov	r2, r3
 800768c:	4623      	mov	r3, r4
 800768e:	4628      	mov	r0, r5
 8007690:	4631      	mov	r1, r6
 8007692:	f7f9 facb 	bl	8000c2c <__aeabi_uldivmod>
 8007696:	4603      	mov	r3, r0
 8007698:	460c      	mov	r4, r1
 800769a:	461a      	mov	r2, r3
 800769c:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <UART_SetConfig+0x6f4>)
 800769e:	fba3 1302 	umull	r1, r3, r3, r2
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	2164      	movs	r1, #100	; 0x64
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	3332      	adds	r3, #50	; 0x32
 80076b0:	4a09      	ldr	r2, [pc, #36]	; (80076d8 <UART_SetConfig+0x6f4>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	f003 020f 	and.w	r2, r3, #15
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4442      	add	r2, r8
 80076c2:	609a      	str	r2, [r3, #8]
}
 80076c4:	e7ff      	b.n	80076c6 <UART_SetConfig+0x6e2>
 80076c6:	bf00      	nop
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d0:	40011000 	.word	0x40011000
 80076d4:	40011400 	.word	0x40011400
 80076d8:	51eb851f 	.word	0x51eb851f

080076dc <__errno>:
 80076dc:	4b01      	ldr	r3, [pc, #4]	; (80076e4 <__errno+0x8>)
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000014 	.word	0x20000014

080076e8 <__libc_init_array>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	4e0d      	ldr	r6, [pc, #52]	; (8007720 <__libc_init_array+0x38>)
 80076ec:	4c0d      	ldr	r4, [pc, #52]	; (8007724 <__libc_init_array+0x3c>)
 80076ee:	1ba4      	subs	r4, r4, r6
 80076f0:	10a4      	asrs	r4, r4, #2
 80076f2:	2500      	movs	r5, #0
 80076f4:	42a5      	cmp	r5, r4
 80076f6:	d109      	bne.n	800770c <__libc_init_array+0x24>
 80076f8:	4e0b      	ldr	r6, [pc, #44]	; (8007728 <__libc_init_array+0x40>)
 80076fa:	4c0c      	ldr	r4, [pc, #48]	; (800772c <__libc_init_array+0x44>)
 80076fc:	f001 fc3a 	bl	8008f74 <_init>
 8007700:	1ba4      	subs	r4, r4, r6
 8007702:	10a4      	asrs	r4, r4, #2
 8007704:	2500      	movs	r5, #0
 8007706:	42a5      	cmp	r5, r4
 8007708:	d105      	bne.n	8007716 <__libc_init_array+0x2e>
 800770a:	bd70      	pop	{r4, r5, r6, pc}
 800770c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007710:	4798      	blx	r3
 8007712:	3501      	adds	r5, #1
 8007714:	e7ee      	b.n	80076f4 <__libc_init_array+0xc>
 8007716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800771a:	4798      	blx	r3
 800771c:	3501      	adds	r5, #1
 800771e:	e7f2      	b.n	8007706 <__libc_init_array+0x1e>
 8007720:	08009548 	.word	0x08009548
 8007724:	08009548 	.word	0x08009548
 8007728:	08009548 	.word	0x08009548
 800772c:	0800954c 	.word	0x0800954c

08007730 <memcpy>:
 8007730:	b510      	push	{r4, lr}
 8007732:	1e43      	subs	r3, r0, #1
 8007734:	440a      	add	r2, r1
 8007736:	4291      	cmp	r1, r2
 8007738:	d100      	bne.n	800773c <memcpy+0xc>
 800773a:	bd10      	pop	{r4, pc}
 800773c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007744:	e7f7      	b.n	8007736 <memcpy+0x6>

08007746 <memset>:
 8007746:	4402      	add	r2, r0
 8007748:	4603      	mov	r3, r0
 800774a:	4293      	cmp	r3, r2
 800774c:	d100      	bne.n	8007750 <memset+0xa>
 800774e:	4770      	bx	lr
 8007750:	f803 1b01 	strb.w	r1, [r3], #1
 8007754:	e7f9      	b.n	800774a <memset+0x4>
	...

08007758 <siprintf>:
 8007758:	b40e      	push	{r1, r2, r3}
 800775a:	b500      	push	{lr}
 800775c:	b09c      	sub	sp, #112	; 0x70
 800775e:	ab1d      	add	r3, sp, #116	; 0x74
 8007760:	9002      	str	r0, [sp, #8]
 8007762:	9006      	str	r0, [sp, #24]
 8007764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007768:	4809      	ldr	r0, [pc, #36]	; (8007790 <siprintf+0x38>)
 800776a:	9107      	str	r1, [sp, #28]
 800776c:	9104      	str	r1, [sp, #16]
 800776e:	4909      	ldr	r1, [pc, #36]	; (8007794 <siprintf+0x3c>)
 8007770:	f853 2b04 	ldr.w	r2, [r3], #4
 8007774:	9105      	str	r1, [sp, #20]
 8007776:	6800      	ldr	r0, [r0, #0]
 8007778:	9301      	str	r3, [sp, #4]
 800777a:	a902      	add	r1, sp, #8
 800777c:	f000 f866 	bl	800784c <_svfiprintf_r>
 8007780:	9b02      	ldr	r3, [sp, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	b01c      	add	sp, #112	; 0x70
 8007788:	f85d eb04 	ldr.w	lr, [sp], #4
 800778c:	b003      	add	sp, #12
 800778e:	4770      	bx	lr
 8007790:	20000014 	.word	0x20000014
 8007794:	ffff0208 	.word	0xffff0208

08007798 <__ssputs_r>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	688e      	ldr	r6, [r1, #8]
 800779e:	429e      	cmp	r6, r3
 80077a0:	4682      	mov	sl, r0
 80077a2:	460c      	mov	r4, r1
 80077a4:	4690      	mov	r8, r2
 80077a6:	4699      	mov	r9, r3
 80077a8:	d837      	bhi.n	800781a <__ssputs_r+0x82>
 80077aa:	898a      	ldrh	r2, [r1, #12]
 80077ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077b0:	d031      	beq.n	8007816 <__ssputs_r+0x7e>
 80077b2:	6825      	ldr	r5, [r4, #0]
 80077b4:	6909      	ldr	r1, [r1, #16]
 80077b6:	1a6f      	subs	r7, r5, r1
 80077b8:	6965      	ldr	r5, [r4, #20]
 80077ba:	2302      	movs	r3, #2
 80077bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80077c4:	f109 0301 	add.w	r3, r9, #1
 80077c8:	443b      	add	r3, r7
 80077ca:	429d      	cmp	r5, r3
 80077cc:	bf38      	it	cc
 80077ce:	461d      	movcc	r5, r3
 80077d0:	0553      	lsls	r3, r2, #21
 80077d2:	d530      	bpl.n	8007836 <__ssputs_r+0x9e>
 80077d4:	4629      	mov	r1, r5
 80077d6:	f000 fb21 	bl	8007e1c <_malloc_r>
 80077da:	4606      	mov	r6, r0
 80077dc:	b950      	cbnz	r0, 80077f4 <__ssputs_r+0x5c>
 80077de:	230c      	movs	r3, #12
 80077e0:	f8ca 3000 	str.w	r3, [sl]
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f4:	463a      	mov	r2, r7
 80077f6:	6921      	ldr	r1, [r4, #16]
 80077f8:	f7ff ff9a 	bl	8007730 <memcpy>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	6126      	str	r6, [r4, #16]
 800780a:	6165      	str	r5, [r4, #20]
 800780c:	443e      	add	r6, r7
 800780e:	1bed      	subs	r5, r5, r7
 8007810:	6026      	str	r6, [r4, #0]
 8007812:	60a5      	str	r5, [r4, #8]
 8007814:	464e      	mov	r6, r9
 8007816:	454e      	cmp	r6, r9
 8007818:	d900      	bls.n	800781c <__ssputs_r+0x84>
 800781a:	464e      	mov	r6, r9
 800781c:	4632      	mov	r2, r6
 800781e:	4641      	mov	r1, r8
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	f000 fa93 	bl	8007d4c <memmove>
 8007826:	68a3      	ldr	r3, [r4, #8]
 8007828:	1b9b      	subs	r3, r3, r6
 800782a:	60a3      	str	r3, [r4, #8]
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	441e      	add	r6, r3
 8007830:	6026      	str	r6, [r4, #0]
 8007832:	2000      	movs	r0, #0
 8007834:	e7dc      	b.n	80077f0 <__ssputs_r+0x58>
 8007836:	462a      	mov	r2, r5
 8007838:	f000 fb4a 	bl	8007ed0 <_realloc_r>
 800783c:	4606      	mov	r6, r0
 800783e:	2800      	cmp	r0, #0
 8007840:	d1e2      	bne.n	8007808 <__ssputs_r+0x70>
 8007842:	6921      	ldr	r1, [r4, #16]
 8007844:	4650      	mov	r0, sl
 8007846:	f000 fa9b 	bl	8007d80 <_free_r>
 800784a:	e7c8      	b.n	80077de <__ssputs_r+0x46>

0800784c <_svfiprintf_r>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	461d      	mov	r5, r3
 8007852:	898b      	ldrh	r3, [r1, #12]
 8007854:	061f      	lsls	r7, r3, #24
 8007856:	b09d      	sub	sp, #116	; 0x74
 8007858:	4680      	mov	r8, r0
 800785a:	460c      	mov	r4, r1
 800785c:	4616      	mov	r6, r2
 800785e:	d50f      	bpl.n	8007880 <_svfiprintf_r+0x34>
 8007860:	690b      	ldr	r3, [r1, #16]
 8007862:	b96b      	cbnz	r3, 8007880 <_svfiprintf_r+0x34>
 8007864:	2140      	movs	r1, #64	; 0x40
 8007866:	f000 fad9 	bl	8007e1c <_malloc_r>
 800786a:	6020      	str	r0, [r4, #0]
 800786c:	6120      	str	r0, [r4, #16]
 800786e:	b928      	cbnz	r0, 800787c <_svfiprintf_r+0x30>
 8007870:	230c      	movs	r3, #12
 8007872:	f8c8 3000 	str.w	r3, [r8]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	e0c8      	b.n	8007a0e <_svfiprintf_r+0x1c2>
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	6163      	str	r3, [r4, #20]
 8007880:	2300      	movs	r3, #0
 8007882:	9309      	str	r3, [sp, #36]	; 0x24
 8007884:	2320      	movs	r3, #32
 8007886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800788a:	2330      	movs	r3, #48	; 0x30
 800788c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007890:	9503      	str	r5, [sp, #12]
 8007892:	f04f 0b01 	mov.w	fp, #1
 8007896:	4637      	mov	r7, r6
 8007898:	463d      	mov	r5, r7
 800789a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800789e:	b10b      	cbz	r3, 80078a4 <_svfiprintf_r+0x58>
 80078a0:	2b25      	cmp	r3, #37	; 0x25
 80078a2:	d13e      	bne.n	8007922 <_svfiprintf_r+0xd6>
 80078a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80078a8:	d00b      	beq.n	80078c2 <_svfiprintf_r+0x76>
 80078aa:	4653      	mov	r3, sl
 80078ac:	4632      	mov	r2, r6
 80078ae:	4621      	mov	r1, r4
 80078b0:	4640      	mov	r0, r8
 80078b2:	f7ff ff71 	bl	8007798 <__ssputs_r>
 80078b6:	3001      	adds	r0, #1
 80078b8:	f000 80a4 	beq.w	8007a04 <_svfiprintf_r+0x1b8>
 80078bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078be:	4453      	add	r3, sl
 80078c0:	9309      	str	r3, [sp, #36]	; 0x24
 80078c2:	783b      	ldrb	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 809d 	beq.w	8007a04 <_svfiprintf_r+0x1b8>
 80078ca:	2300      	movs	r3, #0
 80078cc:	f04f 32ff 	mov.w	r2, #4294967295
 80078d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d4:	9304      	str	r3, [sp, #16]
 80078d6:	9307      	str	r3, [sp, #28]
 80078d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078dc:	931a      	str	r3, [sp, #104]	; 0x68
 80078de:	462f      	mov	r7, r5
 80078e0:	2205      	movs	r2, #5
 80078e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80078e6:	4850      	ldr	r0, [pc, #320]	; (8007a28 <_svfiprintf_r+0x1dc>)
 80078e8:	f7f8 fc82 	bl	80001f0 <memchr>
 80078ec:	9b04      	ldr	r3, [sp, #16]
 80078ee:	b9d0      	cbnz	r0, 8007926 <_svfiprintf_r+0xda>
 80078f0:	06d9      	lsls	r1, r3, #27
 80078f2:	bf44      	itt	mi
 80078f4:	2220      	movmi	r2, #32
 80078f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078fa:	071a      	lsls	r2, r3, #28
 80078fc:	bf44      	itt	mi
 80078fe:	222b      	movmi	r2, #43	; 0x2b
 8007900:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007904:	782a      	ldrb	r2, [r5, #0]
 8007906:	2a2a      	cmp	r2, #42	; 0x2a
 8007908:	d015      	beq.n	8007936 <_svfiprintf_r+0xea>
 800790a:	9a07      	ldr	r2, [sp, #28]
 800790c:	462f      	mov	r7, r5
 800790e:	2000      	movs	r0, #0
 8007910:	250a      	movs	r5, #10
 8007912:	4639      	mov	r1, r7
 8007914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007918:	3b30      	subs	r3, #48	; 0x30
 800791a:	2b09      	cmp	r3, #9
 800791c:	d94d      	bls.n	80079ba <_svfiprintf_r+0x16e>
 800791e:	b1b8      	cbz	r0, 8007950 <_svfiprintf_r+0x104>
 8007920:	e00f      	b.n	8007942 <_svfiprintf_r+0xf6>
 8007922:	462f      	mov	r7, r5
 8007924:	e7b8      	b.n	8007898 <_svfiprintf_r+0x4c>
 8007926:	4a40      	ldr	r2, [pc, #256]	; (8007a28 <_svfiprintf_r+0x1dc>)
 8007928:	1a80      	subs	r0, r0, r2
 800792a:	fa0b f000 	lsl.w	r0, fp, r0
 800792e:	4318      	orrs	r0, r3
 8007930:	9004      	str	r0, [sp, #16]
 8007932:	463d      	mov	r5, r7
 8007934:	e7d3      	b.n	80078de <_svfiprintf_r+0x92>
 8007936:	9a03      	ldr	r2, [sp, #12]
 8007938:	1d11      	adds	r1, r2, #4
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	9103      	str	r1, [sp, #12]
 800793e:	2a00      	cmp	r2, #0
 8007940:	db01      	blt.n	8007946 <_svfiprintf_r+0xfa>
 8007942:	9207      	str	r2, [sp, #28]
 8007944:	e004      	b.n	8007950 <_svfiprintf_r+0x104>
 8007946:	4252      	negs	r2, r2
 8007948:	f043 0302 	orr.w	r3, r3, #2
 800794c:	9207      	str	r2, [sp, #28]
 800794e:	9304      	str	r3, [sp, #16]
 8007950:	783b      	ldrb	r3, [r7, #0]
 8007952:	2b2e      	cmp	r3, #46	; 0x2e
 8007954:	d10c      	bne.n	8007970 <_svfiprintf_r+0x124>
 8007956:	787b      	ldrb	r3, [r7, #1]
 8007958:	2b2a      	cmp	r3, #42	; 0x2a
 800795a:	d133      	bne.n	80079c4 <_svfiprintf_r+0x178>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	1d1a      	adds	r2, r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	9203      	str	r2, [sp, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfb8      	it	lt
 8007968:	f04f 33ff 	movlt.w	r3, #4294967295
 800796c:	3702      	adds	r7, #2
 800796e:	9305      	str	r3, [sp, #20]
 8007970:	4d2e      	ldr	r5, [pc, #184]	; (8007a2c <_svfiprintf_r+0x1e0>)
 8007972:	7839      	ldrb	r1, [r7, #0]
 8007974:	2203      	movs	r2, #3
 8007976:	4628      	mov	r0, r5
 8007978:	f7f8 fc3a 	bl	80001f0 <memchr>
 800797c:	b138      	cbz	r0, 800798e <_svfiprintf_r+0x142>
 800797e:	2340      	movs	r3, #64	; 0x40
 8007980:	1b40      	subs	r0, r0, r5
 8007982:	fa03 f000 	lsl.w	r0, r3, r0
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	4303      	orrs	r3, r0
 800798a:	3701      	adds	r7, #1
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	7839      	ldrb	r1, [r7, #0]
 8007990:	4827      	ldr	r0, [pc, #156]	; (8007a30 <_svfiprintf_r+0x1e4>)
 8007992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007996:	2206      	movs	r2, #6
 8007998:	1c7e      	adds	r6, r7, #1
 800799a:	f7f8 fc29 	bl	80001f0 <memchr>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d038      	beq.n	8007a14 <_svfiprintf_r+0x1c8>
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <_svfiprintf_r+0x1e8>)
 80079a4:	bb13      	cbnz	r3, 80079ec <_svfiprintf_r+0x1a0>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	3307      	adds	r3, #7
 80079aa:	f023 0307 	bic.w	r3, r3, #7
 80079ae:	3308      	adds	r3, #8
 80079b0:	9303      	str	r3, [sp, #12]
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	444b      	add	r3, r9
 80079b6:	9309      	str	r3, [sp, #36]	; 0x24
 80079b8:	e76d      	b.n	8007896 <_svfiprintf_r+0x4a>
 80079ba:	fb05 3202 	mla	r2, r5, r2, r3
 80079be:	2001      	movs	r0, #1
 80079c0:	460f      	mov	r7, r1
 80079c2:	e7a6      	b.n	8007912 <_svfiprintf_r+0xc6>
 80079c4:	2300      	movs	r3, #0
 80079c6:	3701      	adds	r7, #1
 80079c8:	9305      	str	r3, [sp, #20]
 80079ca:	4619      	mov	r1, r3
 80079cc:	250a      	movs	r5, #10
 80079ce:	4638      	mov	r0, r7
 80079d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079d4:	3a30      	subs	r2, #48	; 0x30
 80079d6:	2a09      	cmp	r2, #9
 80079d8:	d903      	bls.n	80079e2 <_svfiprintf_r+0x196>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0c8      	beq.n	8007970 <_svfiprintf_r+0x124>
 80079de:	9105      	str	r1, [sp, #20]
 80079e0:	e7c6      	b.n	8007970 <_svfiprintf_r+0x124>
 80079e2:	fb05 2101 	mla	r1, r5, r1, r2
 80079e6:	2301      	movs	r3, #1
 80079e8:	4607      	mov	r7, r0
 80079ea:	e7f0      	b.n	80079ce <_svfiprintf_r+0x182>
 80079ec:	ab03      	add	r3, sp, #12
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	4622      	mov	r2, r4
 80079f2:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <_svfiprintf_r+0x1ec>)
 80079f4:	a904      	add	r1, sp, #16
 80079f6:	4640      	mov	r0, r8
 80079f8:	f3af 8000 	nop.w
 80079fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a00:	4681      	mov	r9, r0
 8007a02:	d1d6      	bne.n	80079b2 <_svfiprintf_r+0x166>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	065b      	lsls	r3, r3, #25
 8007a08:	f53f af35 	bmi.w	8007876 <_svfiprintf_r+0x2a>
 8007a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a0e:	b01d      	add	sp, #116	; 0x74
 8007a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a14:	ab03      	add	r3, sp, #12
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4622      	mov	r2, r4
 8007a1a:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <_svfiprintf_r+0x1ec>)
 8007a1c:	a904      	add	r1, sp, #16
 8007a1e:	4640      	mov	r0, r8
 8007a20:	f000 f882 	bl	8007b28 <_printf_i>
 8007a24:	e7ea      	b.n	80079fc <_svfiprintf_r+0x1b0>
 8007a26:	bf00      	nop
 8007a28:	08009330 	.word	0x08009330
 8007a2c:	08009336 	.word	0x08009336
 8007a30:	0800933a 	.word	0x0800933a
 8007a34:	00000000 	.word	0x00000000
 8007a38:	08007799 	.word	0x08007799

08007a3c <_printf_common>:
 8007a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	4691      	mov	r9, r2
 8007a42:	461f      	mov	r7, r3
 8007a44:	688a      	ldr	r2, [r1, #8]
 8007a46:	690b      	ldr	r3, [r1, #16]
 8007a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	bfb8      	it	lt
 8007a50:	4613      	movlt	r3, r2
 8007a52:	f8c9 3000 	str.w	r3, [r9]
 8007a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	b112      	cbz	r2, 8007a66 <_printf_common+0x2a>
 8007a60:	3301      	adds	r3, #1
 8007a62:	f8c9 3000 	str.w	r3, [r9]
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	0699      	lsls	r1, r3, #26
 8007a6a:	bf42      	ittt	mi
 8007a6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a70:	3302      	addmi	r3, #2
 8007a72:	f8c9 3000 	strmi.w	r3, [r9]
 8007a76:	6825      	ldr	r5, [r4, #0]
 8007a78:	f015 0506 	ands.w	r5, r5, #6
 8007a7c:	d107      	bne.n	8007a8e <_printf_common+0x52>
 8007a7e:	f104 0a19 	add.w	sl, r4, #25
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	f8d9 2000 	ldr.w	r2, [r9]
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	42ab      	cmp	r3, r5
 8007a8c:	dc28      	bgt.n	8007ae0 <_printf_common+0xa4>
 8007a8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	3300      	adds	r3, #0
 8007a96:	bf18      	it	ne
 8007a98:	2301      	movne	r3, #1
 8007a9a:	0692      	lsls	r2, r2, #26
 8007a9c:	d42d      	bmi.n	8007afa <_printf_common+0xbe>
 8007a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa2:	4639      	mov	r1, r7
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	47c0      	blx	r8
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d020      	beq.n	8007aee <_printf_common+0xb2>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	68e5      	ldr	r5, [r4, #12]
 8007ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8007ab4:	f003 0306 	and.w	r3, r3, #6
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	bf08      	it	eq
 8007abc:	1aad      	subeq	r5, r5, r2
 8007abe:	68a3      	ldr	r3, [r4, #8]
 8007ac0:	6922      	ldr	r2, [r4, #16]
 8007ac2:	bf0c      	ite	eq
 8007ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac8:	2500      	movne	r5, #0
 8007aca:	4293      	cmp	r3, r2
 8007acc:	bfc4      	itt	gt
 8007ace:	1a9b      	subgt	r3, r3, r2
 8007ad0:	18ed      	addgt	r5, r5, r3
 8007ad2:	f04f 0900 	mov.w	r9, #0
 8007ad6:	341a      	adds	r4, #26
 8007ad8:	454d      	cmp	r5, r9
 8007ada:	d11a      	bne.n	8007b12 <_printf_common+0xd6>
 8007adc:	2000      	movs	r0, #0
 8007ade:	e008      	b.n	8007af2 <_printf_common+0xb6>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	4652      	mov	r2, sl
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	47c0      	blx	r8
 8007aea:	3001      	adds	r0, #1
 8007aec:	d103      	bne.n	8007af6 <_printf_common+0xba>
 8007aee:	f04f 30ff 	mov.w	r0, #4294967295
 8007af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af6:	3501      	adds	r5, #1
 8007af8:	e7c3      	b.n	8007a82 <_printf_common+0x46>
 8007afa:	18e1      	adds	r1, r4, r3
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	2030      	movs	r0, #48	; 0x30
 8007b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b04:	4422      	add	r2, r4
 8007b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b0e:	3302      	adds	r3, #2
 8007b10:	e7c5      	b.n	8007a9e <_printf_common+0x62>
 8007b12:	2301      	movs	r3, #1
 8007b14:	4622      	mov	r2, r4
 8007b16:	4639      	mov	r1, r7
 8007b18:	4630      	mov	r0, r6
 8007b1a:	47c0      	blx	r8
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	d0e6      	beq.n	8007aee <_printf_common+0xb2>
 8007b20:	f109 0901 	add.w	r9, r9, #1
 8007b24:	e7d8      	b.n	8007ad8 <_printf_common+0x9c>
	...

08007b28 <_printf_i>:
 8007b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b30:	460c      	mov	r4, r1
 8007b32:	7e09      	ldrb	r1, [r1, #24]
 8007b34:	b085      	sub	sp, #20
 8007b36:	296e      	cmp	r1, #110	; 0x6e
 8007b38:	4617      	mov	r7, r2
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	4698      	mov	r8, r3
 8007b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b40:	f000 80b3 	beq.w	8007caa <_printf_i+0x182>
 8007b44:	d822      	bhi.n	8007b8c <_printf_i+0x64>
 8007b46:	2963      	cmp	r1, #99	; 0x63
 8007b48:	d036      	beq.n	8007bb8 <_printf_i+0x90>
 8007b4a:	d80a      	bhi.n	8007b62 <_printf_i+0x3a>
 8007b4c:	2900      	cmp	r1, #0
 8007b4e:	f000 80b9 	beq.w	8007cc4 <_printf_i+0x19c>
 8007b52:	2958      	cmp	r1, #88	; 0x58
 8007b54:	f000 8083 	beq.w	8007c5e <_printf_i+0x136>
 8007b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b60:	e032      	b.n	8007bc8 <_printf_i+0xa0>
 8007b62:	2964      	cmp	r1, #100	; 0x64
 8007b64:	d001      	beq.n	8007b6a <_printf_i+0x42>
 8007b66:	2969      	cmp	r1, #105	; 0x69
 8007b68:	d1f6      	bne.n	8007b58 <_printf_i+0x30>
 8007b6a:	6820      	ldr	r0, [r4, #0]
 8007b6c:	6813      	ldr	r3, [r2, #0]
 8007b6e:	0605      	lsls	r5, r0, #24
 8007b70:	f103 0104 	add.w	r1, r3, #4
 8007b74:	d52a      	bpl.n	8007bcc <_printf_i+0xa4>
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6011      	str	r1, [r2, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	da03      	bge.n	8007b86 <_printf_i+0x5e>
 8007b7e:	222d      	movs	r2, #45	; 0x2d
 8007b80:	425b      	negs	r3, r3
 8007b82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b86:	486f      	ldr	r0, [pc, #444]	; (8007d44 <_printf_i+0x21c>)
 8007b88:	220a      	movs	r2, #10
 8007b8a:	e039      	b.n	8007c00 <_printf_i+0xd8>
 8007b8c:	2973      	cmp	r1, #115	; 0x73
 8007b8e:	f000 809d 	beq.w	8007ccc <_printf_i+0x1a4>
 8007b92:	d808      	bhi.n	8007ba6 <_printf_i+0x7e>
 8007b94:	296f      	cmp	r1, #111	; 0x6f
 8007b96:	d020      	beq.n	8007bda <_printf_i+0xb2>
 8007b98:	2970      	cmp	r1, #112	; 0x70
 8007b9a:	d1dd      	bne.n	8007b58 <_printf_i+0x30>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	f043 0320 	orr.w	r3, r3, #32
 8007ba2:	6023      	str	r3, [r4, #0]
 8007ba4:	e003      	b.n	8007bae <_printf_i+0x86>
 8007ba6:	2975      	cmp	r1, #117	; 0x75
 8007ba8:	d017      	beq.n	8007bda <_printf_i+0xb2>
 8007baa:	2978      	cmp	r1, #120	; 0x78
 8007bac:	d1d4      	bne.n	8007b58 <_printf_i+0x30>
 8007bae:	2378      	movs	r3, #120	; 0x78
 8007bb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bb4:	4864      	ldr	r0, [pc, #400]	; (8007d48 <_printf_i+0x220>)
 8007bb6:	e055      	b.n	8007c64 <_printf_i+0x13c>
 8007bb8:	6813      	ldr	r3, [r2, #0]
 8007bba:	1d19      	adds	r1, r3, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6011      	str	r1, [r2, #0]
 8007bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e08c      	b.n	8007ce6 <_printf_i+0x1be>
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6011      	str	r1, [r2, #0]
 8007bd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bd4:	bf18      	it	ne
 8007bd6:	b21b      	sxthne	r3, r3
 8007bd8:	e7cf      	b.n	8007b7a <_printf_i+0x52>
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	6825      	ldr	r5, [r4, #0]
 8007bde:	1d18      	adds	r0, r3, #4
 8007be0:	6010      	str	r0, [r2, #0]
 8007be2:	0628      	lsls	r0, r5, #24
 8007be4:	d501      	bpl.n	8007bea <_printf_i+0xc2>
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	e002      	b.n	8007bf0 <_printf_i+0xc8>
 8007bea:	0668      	lsls	r0, r5, #25
 8007bec:	d5fb      	bpl.n	8007be6 <_printf_i+0xbe>
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	4854      	ldr	r0, [pc, #336]	; (8007d44 <_printf_i+0x21c>)
 8007bf2:	296f      	cmp	r1, #111	; 0x6f
 8007bf4:	bf14      	ite	ne
 8007bf6:	220a      	movne	r2, #10
 8007bf8:	2208      	moveq	r2, #8
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c00:	6865      	ldr	r5, [r4, #4]
 8007c02:	60a5      	str	r5, [r4, #8]
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	f2c0 8095 	blt.w	8007d34 <_printf_i+0x20c>
 8007c0a:	6821      	ldr	r1, [r4, #0]
 8007c0c:	f021 0104 	bic.w	r1, r1, #4
 8007c10:	6021      	str	r1, [r4, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d13d      	bne.n	8007c92 <_printf_i+0x16a>
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	f040 808e 	bne.w	8007d38 <_printf_i+0x210>
 8007c1c:	4665      	mov	r5, ip
 8007c1e:	2a08      	cmp	r2, #8
 8007c20:	d10b      	bne.n	8007c3a <_printf_i+0x112>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	07db      	lsls	r3, r3, #31
 8007c26:	d508      	bpl.n	8007c3a <_printf_i+0x112>
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	6862      	ldr	r2, [r4, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	bfde      	ittt	le
 8007c30:	2330      	movle	r3, #48	; 0x30
 8007c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c3a:	ebac 0305 	sub.w	r3, ip, r5
 8007c3e:	6123      	str	r3, [r4, #16]
 8007c40:	f8cd 8000 	str.w	r8, [sp]
 8007c44:	463b      	mov	r3, r7
 8007c46:	aa03      	add	r2, sp, #12
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7ff fef6 	bl	8007a3c <_printf_common>
 8007c50:	3001      	adds	r0, #1
 8007c52:	d14d      	bne.n	8007cf0 <_printf_i+0x1c8>
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	b005      	add	sp, #20
 8007c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c5e:	4839      	ldr	r0, [pc, #228]	; (8007d44 <_printf_i+0x21c>)
 8007c60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c64:	6813      	ldr	r3, [r2, #0]
 8007c66:	6821      	ldr	r1, [r4, #0]
 8007c68:	1d1d      	adds	r5, r3, #4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6015      	str	r5, [r2, #0]
 8007c6e:	060a      	lsls	r2, r1, #24
 8007c70:	d50b      	bpl.n	8007c8a <_printf_i+0x162>
 8007c72:	07ca      	lsls	r2, r1, #31
 8007c74:	bf44      	itt	mi
 8007c76:	f041 0120 	orrmi.w	r1, r1, #32
 8007c7a:	6021      	strmi	r1, [r4, #0]
 8007c7c:	b91b      	cbnz	r3, 8007c86 <_printf_i+0x15e>
 8007c7e:	6822      	ldr	r2, [r4, #0]
 8007c80:	f022 0220 	bic.w	r2, r2, #32
 8007c84:	6022      	str	r2, [r4, #0]
 8007c86:	2210      	movs	r2, #16
 8007c88:	e7b7      	b.n	8007bfa <_printf_i+0xd2>
 8007c8a:	064d      	lsls	r5, r1, #25
 8007c8c:	bf48      	it	mi
 8007c8e:	b29b      	uxthmi	r3, r3
 8007c90:	e7ef      	b.n	8007c72 <_printf_i+0x14a>
 8007c92:	4665      	mov	r5, ip
 8007c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c98:	fb02 3311 	mls	r3, r2, r1, r3
 8007c9c:	5cc3      	ldrb	r3, [r0, r3]
 8007c9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d1f5      	bne.n	8007c94 <_printf_i+0x16c>
 8007ca8:	e7b9      	b.n	8007c1e <_printf_i+0xf6>
 8007caa:	6813      	ldr	r3, [r2, #0]
 8007cac:	6825      	ldr	r5, [r4, #0]
 8007cae:	6961      	ldr	r1, [r4, #20]
 8007cb0:	1d18      	adds	r0, r3, #4
 8007cb2:	6010      	str	r0, [r2, #0]
 8007cb4:	0628      	lsls	r0, r5, #24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	d501      	bpl.n	8007cbe <_printf_i+0x196>
 8007cba:	6019      	str	r1, [r3, #0]
 8007cbc:	e002      	b.n	8007cc4 <_printf_i+0x19c>
 8007cbe:	066a      	lsls	r2, r5, #25
 8007cc0:	d5fb      	bpl.n	8007cba <_printf_i+0x192>
 8007cc2:	8019      	strh	r1, [r3, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6123      	str	r3, [r4, #16]
 8007cc8:	4665      	mov	r5, ip
 8007cca:	e7b9      	b.n	8007c40 <_printf_i+0x118>
 8007ccc:	6813      	ldr	r3, [r2, #0]
 8007cce:	1d19      	adds	r1, r3, #4
 8007cd0:	6011      	str	r1, [r2, #0]
 8007cd2:	681d      	ldr	r5, [r3, #0]
 8007cd4:	6862      	ldr	r2, [r4, #4]
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f7f8 fa89 	bl	80001f0 <memchr>
 8007cde:	b108      	cbz	r0, 8007ce4 <_printf_i+0x1bc>
 8007ce0:	1b40      	subs	r0, r0, r5
 8007ce2:	6060      	str	r0, [r4, #4]
 8007ce4:	6863      	ldr	r3, [r4, #4]
 8007ce6:	6123      	str	r3, [r4, #16]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cee:	e7a7      	b.n	8007c40 <_printf_i+0x118>
 8007cf0:	6923      	ldr	r3, [r4, #16]
 8007cf2:	462a      	mov	r2, r5
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	47c0      	blx	r8
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d0aa      	beq.n	8007c54 <_printf_i+0x12c>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	079b      	lsls	r3, r3, #30
 8007d02:	d413      	bmi.n	8007d2c <_printf_i+0x204>
 8007d04:	68e0      	ldr	r0, [r4, #12]
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	4298      	cmp	r0, r3
 8007d0a:	bfb8      	it	lt
 8007d0c:	4618      	movlt	r0, r3
 8007d0e:	e7a3      	b.n	8007c58 <_printf_i+0x130>
 8007d10:	2301      	movs	r3, #1
 8007d12:	464a      	mov	r2, r9
 8007d14:	4639      	mov	r1, r7
 8007d16:	4630      	mov	r0, r6
 8007d18:	47c0      	blx	r8
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d09a      	beq.n	8007c54 <_printf_i+0x12c>
 8007d1e:	3501      	adds	r5, #1
 8007d20:	68e3      	ldr	r3, [r4, #12]
 8007d22:	9a03      	ldr	r2, [sp, #12]
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	42ab      	cmp	r3, r5
 8007d28:	dcf2      	bgt.n	8007d10 <_printf_i+0x1e8>
 8007d2a:	e7eb      	b.n	8007d04 <_printf_i+0x1dc>
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	f104 0919 	add.w	r9, r4, #25
 8007d32:	e7f5      	b.n	8007d20 <_printf_i+0x1f8>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1ac      	bne.n	8007c92 <_printf_i+0x16a>
 8007d38:	7803      	ldrb	r3, [r0, #0]
 8007d3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d42:	e76c      	b.n	8007c1e <_printf_i+0xf6>
 8007d44:	08009341 	.word	0x08009341
 8007d48:	08009352 	.word	0x08009352

08007d4c <memmove>:
 8007d4c:	4288      	cmp	r0, r1
 8007d4e:	b510      	push	{r4, lr}
 8007d50:	eb01 0302 	add.w	r3, r1, r2
 8007d54:	d807      	bhi.n	8007d66 <memmove+0x1a>
 8007d56:	1e42      	subs	r2, r0, #1
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	d00a      	beq.n	8007d72 <memmove+0x26>
 8007d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d60:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d64:	e7f8      	b.n	8007d58 <memmove+0xc>
 8007d66:	4283      	cmp	r3, r0
 8007d68:	d9f5      	bls.n	8007d56 <memmove+0xa>
 8007d6a:	1881      	adds	r1, r0, r2
 8007d6c:	1ad2      	subs	r2, r2, r3
 8007d6e:	42d3      	cmn	r3, r2
 8007d70:	d100      	bne.n	8007d74 <memmove+0x28>
 8007d72:	bd10      	pop	{r4, pc}
 8007d74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d7c:	e7f7      	b.n	8007d6e <memmove+0x22>
	...

08007d80 <_free_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4605      	mov	r5, r0
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d045      	beq.n	8007e14 <_free_r+0x94>
 8007d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8c:	1f0c      	subs	r4, r1, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfb8      	it	lt
 8007d92:	18e4      	addlt	r4, r4, r3
 8007d94:	f000 f8d2 	bl	8007f3c <__malloc_lock>
 8007d98:	4a1f      	ldr	r2, [pc, #124]	; (8007e18 <_free_r+0x98>)
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	b933      	cbnz	r3, 8007dae <_free_r+0x2e>
 8007da0:	6063      	str	r3, [r4, #4]
 8007da2:	6014      	str	r4, [r2, #0]
 8007da4:	4628      	mov	r0, r5
 8007da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007daa:	f000 b8c8 	b.w	8007f3e <__malloc_unlock>
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	d90c      	bls.n	8007dcc <_free_r+0x4c>
 8007db2:	6821      	ldr	r1, [r4, #0]
 8007db4:	1862      	adds	r2, r4, r1
 8007db6:	4293      	cmp	r3, r2
 8007db8:	bf04      	itt	eq
 8007dba:	681a      	ldreq	r2, [r3, #0]
 8007dbc:	685b      	ldreq	r3, [r3, #4]
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	bf04      	itt	eq
 8007dc2:	1852      	addeq	r2, r2, r1
 8007dc4:	6022      	streq	r2, [r4, #0]
 8007dc6:	6004      	str	r4, [r0, #0]
 8007dc8:	e7ec      	b.n	8007da4 <_free_r+0x24>
 8007dca:	4613      	mov	r3, r2
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	b10a      	cbz	r2, 8007dd4 <_free_r+0x54>
 8007dd0:	42a2      	cmp	r2, r4
 8007dd2:	d9fa      	bls.n	8007dca <_free_r+0x4a>
 8007dd4:	6819      	ldr	r1, [r3, #0]
 8007dd6:	1858      	adds	r0, r3, r1
 8007dd8:	42a0      	cmp	r0, r4
 8007dda:	d10b      	bne.n	8007df4 <_free_r+0x74>
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	4401      	add	r1, r0
 8007de0:	1858      	adds	r0, r3, r1
 8007de2:	4282      	cmp	r2, r0
 8007de4:	6019      	str	r1, [r3, #0]
 8007de6:	d1dd      	bne.n	8007da4 <_free_r+0x24>
 8007de8:	6810      	ldr	r0, [r2, #0]
 8007dea:	6852      	ldr	r2, [r2, #4]
 8007dec:	605a      	str	r2, [r3, #4]
 8007dee:	4401      	add	r1, r0
 8007df0:	6019      	str	r1, [r3, #0]
 8007df2:	e7d7      	b.n	8007da4 <_free_r+0x24>
 8007df4:	d902      	bls.n	8007dfc <_free_r+0x7c>
 8007df6:	230c      	movs	r3, #12
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	e7d3      	b.n	8007da4 <_free_r+0x24>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	1821      	adds	r1, r4, r0
 8007e00:	428a      	cmp	r2, r1
 8007e02:	bf04      	itt	eq
 8007e04:	6811      	ldreq	r1, [r2, #0]
 8007e06:	6852      	ldreq	r2, [r2, #4]
 8007e08:	6062      	str	r2, [r4, #4]
 8007e0a:	bf04      	itt	eq
 8007e0c:	1809      	addeq	r1, r1, r0
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	605c      	str	r4, [r3, #4]
 8007e12:	e7c7      	b.n	8007da4 <_free_r+0x24>
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
 8007e16:	bf00      	nop
 8007e18:	20000510 	.word	0x20000510

08007e1c <_malloc_r>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	1ccd      	adds	r5, r1, #3
 8007e20:	f025 0503 	bic.w	r5, r5, #3
 8007e24:	3508      	adds	r5, #8
 8007e26:	2d0c      	cmp	r5, #12
 8007e28:	bf38      	it	cc
 8007e2a:	250c      	movcc	r5, #12
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	4606      	mov	r6, r0
 8007e30:	db01      	blt.n	8007e36 <_malloc_r+0x1a>
 8007e32:	42a9      	cmp	r1, r5
 8007e34:	d903      	bls.n	8007e3e <_malloc_r+0x22>
 8007e36:	230c      	movs	r3, #12
 8007e38:	6033      	str	r3, [r6, #0]
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	f000 f87d 	bl	8007f3c <__malloc_lock>
 8007e42:	4a21      	ldr	r2, [pc, #132]	; (8007ec8 <_malloc_r+0xac>)
 8007e44:	6814      	ldr	r4, [r2, #0]
 8007e46:	4621      	mov	r1, r4
 8007e48:	b991      	cbnz	r1, 8007e70 <_malloc_r+0x54>
 8007e4a:	4c20      	ldr	r4, [pc, #128]	; (8007ecc <_malloc_r+0xb0>)
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	b91b      	cbnz	r3, 8007e58 <_malloc_r+0x3c>
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f863 	bl	8007f1c <_sbrk_r>
 8007e56:	6020      	str	r0, [r4, #0]
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 f85e 	bl	8007f1c <_sbrk_r>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d124      	bne.n	8007eae <_malloc_r+0x92>
 8007e64:	230c      	movs	r3, #12
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f868 	bl	8007f3e <__malloc_unlock>
 8007e6e:	e7e4      	b.n	8007e3a <_malloc_r+0x1e>
 8007e70:	680b      	ldr	r3, [r1, #0]
 8007e72:	1b5b      	subs	r3, r3, r5
 8007e74:	d418      	bmi.n	8007ea8 <_malloc_r+0x8c>
 8007e76:	2b0b      	cmp	r3, #11
 8007e78:	d90f      	bls.n	8007e9a <_malloc_r+0x7e>
 8007e7a:	600b      	str	r3, [r1, #0]
 8007e7c:	50cd      	str	r5, [r1, r3]
 8007e7e:	18cc      	adds	r4, r1, r3
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f85c 	bl	8007f3e <__malloc_unlock>
 8007e86:	f104 000b 	add.w	r0, r4, #11
 8007e8a:	1d23      	adds	r3, r4, #4
 8007e8c:	f020 0007 	bic.w	r0, r0, #7
 8007e90:	1ac3      	subs	r3, r0, r3
 8007e92:	d0d3      	beq.n	8007e3c <_malloc_r+0x20>
 8007e94:	425a      	negs	r2, r3
 8007e96:	50e2      	str	r2, [r4, r3]
 8007e98:	e7d0      	b.n	8007e3c <_malloc_r+0x20>
 8007e9a:	428c      	cmp	r4, r1
 8007e9c:	684b      	ldr	r3, [r1, #4]
 8007e9e:	bf16      	itet	ne
 8007ea0:	6063      	strne	r3, [r4, #4]
 8007ea2:	6013      	streq	r3, [r2, #0]
 8007ea4:	460c      	movne	r4, r1
 8007ea6:	e7eb      	b.n	8007e80 <_malloc_r+0x64>
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6849      	ldr	r1, [r1, #4]
 8007eac:	e7cc      	b.n	8007e48 <_malloc_r+0x2c>
 8007eae:	1cc4      	adds	r4, r0, #3
 8007eb0:	f024 0403 	bic.w	r4, r4, #3
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	d005      	beq.n	8007ec4 <_malloc_r+0xa8>
 8007eb8:	1a21      	subs	r1, r4, r0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 f82e 	bl	8007f1c <_sbrk_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d0cf      	beq.n	8007e64 <_malloc_r+0x48>
 8007ec4:	6025      	str	r5, [r4, #0]
 8007ec6:	e7db      	b.n	8007e80 <_malloc_r+0x64>
 8007ec8:	20000510 	.word	0x20000510
 8007ecc:	20000514 	.word	0x20000514

08007ed0 <_realloc_r>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	460e      	mov	r6, r1
 8007ed8:	b921      	cbnz	r1, 8007ee4 <_realloc_r+0x14>
 8007eda:	4611      	mov	r1, r2
 8007edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ee0:	f7ff bf9c 	b.w	8007e1c <_malloc_r>
 8007ee4:	b922      	cbnz	r2, 8007ef0 <_realloc_r+0x20>
 8007ee6:	f7ff ff4b 	bl	8007d80 <_free_r>
 8007eea:	4625      	mov	r5, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	f000 f826 	bl	8007f40 <_malloc_usable_size_r>
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	d20f      	bcs.n	8007f18 <_realloc_r+0x48>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4638      	mov	r0, r7
 8007efc:	f7ff ff8e 	bl	8007e1c <_malloc_r>
 8007f00:	4605      	mov	r5, r0
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0f2      	beq.n	8007eec <_realloc_r+0x1c>
 8007f06:	4631      	mov	r1, r6
 8007f08:	4622      	mov	r2, r4
 8007f0a:	f7ff fc11 	bl	8007730 <memcpy>
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ff35 	bl	8007d80 <_free_r>
 8007f16:	e7e9      	b.n	8007eec <_realloc_r+0x1c>
 8007f18:	4635      	mov	r5, r6
 8007f1a:	e7e7      	b.n	8007eec <_realloc_r+0x1c>

08007f1c <_sbrk_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4c06      	ldr	r4, [pc, #24]	; (8007f38 <_sbrk_r+0x1c>)
 8007f20:	2300      	movs	r3, #0
 8007f22:	4605      	mov	r5, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	f7fb fc78 	bl	800381c <_sbrk>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_sbrk_r+0x1a>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_sbrk_r+0x1a>
 8007f34:	602b      	str	r3, [r5, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	200006dc 	.word	0x200006dc

08007f3c <__malloc_lock>:
 8007f3c:	4770      	bx	lr

08007f3e <__malloc_unlock>:
 8007f3e:	4770      	bx	lr

08007f40 <_malloc_usable_size_r>:
 8007f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f44:	1f18      	subs	r0, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfbc      	itt	lt
 8007f4a:	580b      	ldrlt	r3, [r1, r0]
 8007f4c:	18c0      	addlt	r0, r0, r3
 8007f4e:	4770      	bx	lr

08007f50 <sin>:
 8007f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f52:	ec51 0b10 	vmov	r0, r1, d0
 8007f56:	4a20      	ldr	r2, [pc, #128]	; (8007fd8 <sin+0x88>)
 8007f58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	dc07      	bgt.n	8007f70 <sin+0x20>
 8007f60:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007fd0 <sin+0x80>
 8007f64:	2000      	movs	r0, #0
 8007f66:	f000 fe37 	bl	8008bd8 <__kernel_sin>
 8007f6a:	ec51 0b10 	vmov	r0, r1, d0
 8007f6e:	e007      	b.n	8007f80 <sin+0x30>
 8007f70:	4a1a      	ldr	r2, [pc, #104]	; (8007fdc <sin+0x8c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	dd09      	ble.n	8007f8a <sin+0x3a>
 8007f76:	ee10 2a10 	vmov	r2, s0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	f7f8 f98c 	bl	8000298 <__aeabi_dsub>
 8007f80:	ec41 0b10 	vmov	d0, r0, r1
 8007f84:	b005      	add	sp, #20
 8007f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f8a:	4668      	mov	r0, sp
 8007f8c:	f000 f828 	bl	8007fe0 <__ieee754_rem_pio2>
 8007f90:	f000 0003 	and.w	r0, r0, #3
 8007f94:	2801      	cmp	r0, #1
 8007f96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f9a:	ed9d 0b00 	vldr	d0, [sp]
 8007f9e:	d004      	beq.n	8007faa <sin+0x5a>
 8007fa0:	2802      	cmp	r0, #2
 8007fa2:	d005      	beq.n	8007fb0 <sin+0x60>
 8007fa4:	b970      	cbnz	r0, 8007fc4 <sin+0x74>
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	e7dd      	b.n	8007f66 <sin+0x16>
 8007faa:	f000 fa0d 	bl	80083c8 <__kernel_cos>
 8007fae:	e7dc      	b.n	8007f6a <sin+0x1a>
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	f000 fe11 	bl	8008bd8 <__kernel_sin>
 8007fb6:	ec53 2b10 	vmov	r2, r3, d0
 8007fba:	ee10 0a10 	vmov	r0, s0
 8007fbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007fc2:	e7dd      	b.n	8007f80 <sin+0x30>
 8007fc4:	f000 fa00 	bl	80083c8 <__kernel_cos>
 8007fc8:	e7f5      	b.n	8007fb6 <sin+0x66>
 8007fca:	bf00      	nop
 8007fcc:	f3af 8000 	nop.w
	...
 8007fd8:	3fe921fb 	.word	0x3fe921fb
 8007fdc:	7fefffff 	.word	0x7fefffff

08007fe0 <__ieee754_rem_pio2>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	ec57 6b10 	vmov	r6, r7, d0
 8007fe8:	4bc3      	ldr	r3, [pc, #780]	; (80082f8 <__ieee754_rem_pio2+0x318>)
 8007fea:	b08d      	sub	sp, #52	; 0x34
 8007fec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007ff0:	4598      	cmp	r8, r3
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	9704      	str	r7, [sp, #16]
 8007ff6:	dc07      	bgt.n	8008008 <__ieee754_rem_pio2+0x28>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	ed84 0b00 	vstr	d0, [r4]
 8008000:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008004:	2500      	movs	r5, #0
 8008006:	e027      	b.n	8008058 <__ieee754_rem_pio2+0x78>
 8008008:	4bbc      	ldr	r3, [pc, #752]	; (80082fc <__ieee754_rem_pio2+0x31c>)
 800800a:	4598      	cmp	r8, r3
 800800c:	dc75      	bgt.n	80080fa <__ieee754_rem_pio2+0x11a>
 800800e:	9b04      	ldr	r3, [sp, #16]
 8008010:	4dbb      	ldr	r5, [pc, #748]	; (8008300 <__ieee754_rem_pio2+0x320>)
 8008012:	2b00      	cmp	r3, #0
 8008014:	ee10 0a10 	vmov	r0, s0
 8008018:	a3a9      	add	r3, pc, #676	; (adr r3, 80082c0 <__ieee754_rem_pio2+0x2e0>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	4639      	mov	r1, r7
 8008020:	dd36      	ble.n	8008090 <__ieee754_rem_pio2+0xb0>
 8008022:	f7f8 f939 	bl	8000298 <__aeabi_dsub>
 8008026:	45a8      	cmp	r8, r5
 8008028:	4606      	mov	r6, r0
 800802a:	460f      	mov	r7, r1
 800802c:	d018      	beq.n	8008060 <__ieee754_rem_pio2+0x80>
 800802e:	a3a6      	add	r3, pc, #664	; (adr r3, 80082c8 <__ieee754_rem_pio2+0x2e8>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 f930 	bl	8000298 <__aeabi_dsub>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	e9c4 2300 	strd	r2, r3, [r4]
 8008040:	4630      	mov	r0, r6
 8008042:	4639      	mov	r1, r7
 8008044:	f7f8 f928 	bl	8000298 <__aeabi_dsub>
 8008048:	a39f      	add	r3, pc, #636	; (adr r3, 80082c8 <__ieee754_rem_pio2+0x2e8>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 f923 	bl	8000298 <__aeabi_dsub>
 8008052:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008056:	2501      	movs	r5, #1
 8008058:	4628      	mov	r0, r5
 800805a:	b00d      	add	sp, #52	; 0x34
 800805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008060:	a39b      	add	r3, pc, #620	; (adr r3, 80082d0 <__ieee754_rem_pio2+0x2f0>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f7f8 f917 	bl	8000298 <__aeabi_dsub>
 800806a:	a39b      	add	r3, pc, #620	; (adr r3, 80082d8 <__ieee754_rem_pio2+0x2f8>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	4606      	mov	r6, r0
 8008072:	460f      	mov	r7, r1
 8008074:	f7f8 f910 	bl	8000298 <__aeabi_dsub>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	e9c4 2300 	strd	r2, r3, [r4]
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f908 	bl	8000298 <__aeabi_dsub>
 8008088:	a393      	add	r3, pc, #588	; (adr r3, 80082d8 <__ieee754_rem_pio2+0x2f8>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	e7de      	b.n	800804e <__ieee754_rem_pio2+0x6e>
 8008090:	f7f8 f904 	bl	800029c <__adddf3>
 8008094:	45a8      	cmp	r8, r5
 8008096:	4606      	mov	r6, r0
 8008098:	460f      	mov	r7, r1
 800809a:	d016      	beq.n	80080ca <__ieee754_rem_pio2+0xea>
 800809c:	a38a      	add	r3, pc, #552	; (adr r3, 80082c8 <__ieee754_rem_pio2+0x2e8>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f7f8 f8fb 	bl	800029c <__adddf3>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9c4 2300 	strd	r2, r3, [r4]
 80080ae:	4630      	mov	r0, r6
 80080b0:	4639      	mov	r1, r7
 80080b2:	f7f8 f8f1 	bl	8000298 <__aeabi_dsub>
 80080b6:	a384      	add	r3, pc, #528	; (adr r3, 80082c8 <__ieee754_rem_pio2+0x2e8>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 f8ee 	bl	800029c <__adddf3>
 80080c0:	f04f 35ff 	mov.w	r5, #4294967295
 80080c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80080c8:	e7c6      	b.n	8008058 <__ieee754_rem_pio2+0x78>
 80080ca:	a381      	add	r3, pc, #516	; (adr r3, 80082d0 <__ieee754_rem_pio2+0x2f0>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 f8e4 	bl	800029c <__adddf3>
 80080d4:	a380      	add	r3, pc, #512	; (adr r3, 80082d8 <__ieee754_rem_pio2+0x2f8>)
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	f7f8 f8dd 	bl	800029c <__adddf3>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	e9c4 2300 	strd	r2, r3, [r4]
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7f8 f8d3 	bl	8000298 <__aeabi_dsub>
 80080f2:	a379      	add	r3, pc, #484	; (adr r3, 80082d8 <__ieee754_rem_pio2+0x2f8>)
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	e7e0      	b.n	80080bc <__ieee754_rem_pio2+0xdc>
 80080fa:	4b82      	ldr	r3, [pc, #520]	; (8008304 <__ieee754_rem_pio2+0x324>)
 80080fc:	4598      	cmp	r8, r3
 80080fe:	f300 80d0 	bgt.w	80082a2 <__ieee754_rem_pio2+0x2c2>
 8008102:	f000 fe23 	bl	8008d4c <fabs>
 8008106:	ec57 6b10 	vmov	r6, r7, d0
 800810a:	ee10 0a10 	vmov	r0, s0
 800810e:	a374      	add	r3, pc, #464	; (adr r3, 80082e0 <__ieee754_rem_pio2+0x300>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	4639      	mov	r1, r7
 8008116:	f7f8 fa77 	bl	8000608 <__aeabi_dmul>
 800811a:	2200      	movs	r2, #0
 800811c:	4b7a      	ldr	r3, [pc, #488]	; (8008308 <__ieee754_rem_pio2+0x328>)
 800811e:	f7f8 f8bd 	bl	800029c <__adddf3>
 8008122:	f7f8 fd0b 	bl	8000b3c <__aeabi_d2iz>
 8008126:	4605      	mov	r5, r0
 8008128:	f7f8 fa04 	bl	8000534 <__aeabi_i2d>
 800812c:	a364      	add	r3, pc, #400	; (adr r3, 80082c0 <__ieee754_rem_pio2+0x2e0>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008136:	f7f8 fa67 	bl	8000608 <__aeabi_dmul>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4630      	mov	r0, r6
 8008140:	4639      	mov	r1, r7
 8008142:	f7f8 f8a9 	bl	8000298 <__aeabi_dsub>
 8008146:	a360      	add	r3, pc, #384	; (adr r3, 80082c8 <__ieee754_rem_pio2+0x2e8>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	4682      	mov	sl, r0
 800814e:	468b      	mov	fp, r1
 8008150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008154:	f7f8 fa58 	bl	8000608 <__aeabi_dmul>
 8008158:	2d1f      	cmp	r5, #31
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	dc0c      	bgt.n	800817a <__ieee754_rem_pio2+0x19a>
 8008160:	1e6a      	subs	r2, r5, #1
 8008162:	4b6a      	ldr	r3, [pc, #424]	; (800830c <__ieee754_rem_pio2+0x32c>)
 8008164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008168:	4543      	cmp	r3, r8
 800816a:	d006      	beq.n	800817a <__ieee754_rem_pio2+0x19a>
 800816c:	4632      	mov	r2, r6
 800816e:	463b      	mov	r3, r7
 8008170:	4650      	mov	r0, sl
 8008172:	4659      	mov	r1, fp
 8008174:	f7f8 f890 	bl	8000298 <__aeabi_dsub>
 8008178:	e00e      	b.n	8008198 <__ieee754_rem_pio2+0x1b8>
 800817a:	4632      	mov	r2, r6
 800817c:	463b      	mov	r3, r7
 800817e:	4650      	mov	r0, sl
 8008180:	4659      	mov	r1, fp
 8008182:	f7f8 f889 	bl	8000298 <__aeabi_dsub>
 8008186:	ea4f 5328 	mov.w	r3, r8, asr #20
 800818a:	9305      	str	r3, [sp, #20]
 800818c:	9a05      	ldr	r2, [sp, #20]
 800818e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b10      	cmp	r3, #16
 8008196:	dc02      	bgt.n	800819e <__ieee754_rem_pio2+0x1be>
 8008198:	e9c4 0100 	strd	r0, r1, [r4]
 800819c:	e039      	b.n	8008212 <__ieee754_rem_pio2+0x232>
 800819e:	a34c      	add	r3, pc, #304	; (adr r3, 80082d0 <__ieee754_rem_pio2+0x2f0>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a8:	f7f8 fa2e 	bl	8000608 <__aeabi_dmul>
 80081ac:	4606      	mov	r6, r0
 80081ae:	460f      	mov	r7, r1
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4650      	mov	r0, sl
 80081b6:	4659      	mov	r1, fp
 80081b8:	f7f8 f86e 	bl	8000298 <__aeabi_dsub>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4680      	mov	r8, r0
 80081c2:	4689      	mov	r9, r1
 80081c4:	4650      	mov	r0, sl
 80081c6:	4659      	mov	r1, fp
 80081c8:	f7f8 f866 	bl	8000298 <__aeabi_dsub>
 80081cc:	4632      	mov	r2, r6
 80081ce:	463b      	mov	r3, r7
 80081d0:	f7f8 f862 	bl	8000298 <__aeabi_dsub>
 80081d4:	a340      	add	r3, pc, #256	; (adr r3, 80082d8 <__ieee754_rem_pio2+0x2f8>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e2:	f7f8 fa11 	bl	8000608 <__aeabi_dmul>
 80081e6:	4632      	mov	r2, r6
 80081e8:	463b      	mov	r3, r7
 80081ea:	f7f8 f855 	bl	8000298 <__aeabi_dsub>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4606      	mov	r6, r0
 80081f4:	460f      	mov	r7, r1
 80081f6:	4640      	mov	r0, r8
 80081f8:	4649      	mov	r1, r9
 80081fa:	f7f8 f84d 	bl	8000298 <__aeabi_dsub>
 80081fe:	9a05      	ldr	r2, [sp, #20]
 8008200:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b31      	cmp	r3, #49	; 0x31
 8008208:	dc20      	bgt.n	800824c <__ieee754_rem_pio2+0x26c>
 800820a:	e9c4 0100 	strd	r0, r1, [r4]
 800820e:	46c2      	mov	sl, r8
 8008210:	46cb      	mov	fp, r9
 8008212:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008216:	4650      	mov	r0, sl
 8008218:	4642      	mov	r2, r8
 800821a:	464b      	mov	r3, r9
 800821c:	4659      	mov	r1, fp
 800821e:	f7f8 f83b 	bl	8000298 <__aeabi_dsub>
 8008222:	463b      	mov	r3, r7
 8008224:	4632      	mov	r2, r6
 8008226:	f7f8 f837 	bl	8000298 <__aeabi_dsub>
 800822a:	9b04      	ldr	r3, [sp, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008232:	f6bf af11 	bge.w	8008058 <__ieee754_rem_pio2+0x78>
 8008236:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800823a:	6063      	str	r3, [r4, #4]
 800823c:	f8c4 8000 	str.w	r8, [r4]
 8008240:	60a0      	str	r0, [r4, #8]
 8008242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008246:	60e3      	str	r3, [r4, #12]
 8008248:	426d      	negs	r5, r5
 800824a:	e705      	b.n	8008058 <__ieee754_rem_pio2+0x78>
 800824c:	a326      	add	r3, pc, #152	; (adr r3, 80082e8 <__ieee754_rem_pio2+0x308>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008256:	f7f8 f9d7 	bl	8000608 <__aeabi_dmul>
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f8 f817 	bl	8000298 <__aeabi_dsub>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4682      	mov	sl, r0
 8008270:	468b      	mov	fp, r1
 8008272:	4640      	mov	r0, r8
 8008274:	4649      	mov	r1, r9
 8008276:	f7f8 f80f 	bl	8000298 <__aeabi_dsub>
 800827a:	4632      	mov	r2, r6
 800827c:	463b      	mov	r3, r7
 800827e:	f7f8 f80b 	bl	8000298 <__aeabi_dsub>
 8008282:	a31b      	add	r3, pc, #108	; (adr r3, 80082f0 <__ieee754_rem_pio2+0x310>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	4606      	mov	r6, r0
 800828a:	460f      	mov	r7, r1
 800828c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008290:	f7f8 f9ba 	bl	8000608 <__aeabi_dmul>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f7 fffe 	bl	8000298 <__aeabi_dsub>
 800829c:	4606      	mov	r6, r0
 800829e:	460f      	mov	r7, r1
 80082a0:	e764      	b.n	800816c <__ieee754_rem_pio2+0x18c>
 80082a2:	4b1b      	ldr	r3, [pc, #108]	; (8008310 <__ieee754_rem_pio2+0x330>)
 80082a4:	4598      	cmp	r8, r3
 80082a6:	dd35      	ble.n	8008314 <__ieee754_rem_pio2+0x334>
 80082a8:	ee10 2a10 	vmov	r2, s0
 80082ac:	463b      	mov	r3, r7
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f7 fff1 	bl	8000298 <__aeabi_dsub>
 80082b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80082ba:	e9c4 0100 	strd	r0, r1, [r4]
 80082be:	e6a1      	b.n	8008004 <__ieee754_rem_pio2+0x24>
 80082c0:	54400000 	.word	0x54400000
 80082c4:	3ff921fb 	.word	0x3ff921fb
 80082c8:	1a626331 	.word	0x1a626331
 80082cc:	3dd0b461 	.word	0x3dd0b461
 80082d0:	1a600000 	.word	0x1a600000
 80082d4:	3dd0b461 	.word	0x3dd0b461
 80082d8:	2e037073 	.word	0x2e037073
 80082dc:	3ba3198a 	.word	0x3ba3198a
 80082e0:	6dc9c883 	.word	0x6dc9c883
 80082e4:	3fe45f30 	.word	0x3fe45f30
 80082e8:	2e000000 	.word	0x2e000000
 80082ec:	3ba3198a 	.word	0x3ba3198a
 80082f0:	252049c1 	.word	0x252049c1
 80082f4:	397b839a 	.word	0x397b839a
 80082f8:	3fe921fb 	.word	0x3fe921fb
 80082fc:	4002d97b 	.word	0x4002d97b
 8008300:	3ff921fb 	.word	0x3ff921fb
 8008304:	413921fb 	.word	0x413921fb
 8008308:	3fe00000 	.word	0x3fe00000
 800830c:	08009364 	.word	0x08009364
 8008310:	7fefffff 	.word	0x7fefffff
 8008314:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008318:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800831c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008320:	4630      	mov	r0, r6
 8008322:	460f      	mov	r7, r1
 8008324:	f7f8 fc0a 	bl	8000b3c <__aeabi_d2iz>
 8008328:	f7f8 f904 	bl	8000534 <__aeabi_i2d>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4630      	mov	r0, r6
 8008332:	4639      	mov	r1, r7
 8008334:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008338:	f7f7 ffae 	bl	8000298 <__aeabi_dsub>
 800833c:	2200      	movs	r2, #0
 800833e:	4b1f      	ldr	r3, [pc, #124]	; (80083bc <__ieee754_rem_pio2+0x3dc>)
 8008340:	f7f8 f962 	bl	8000608 <__aeabi_dmul>
 8008344:	460f      	mov	r7, r1
 8008346:	4606      	mov	r6, r0
 8008348:	f7f8 fbf8 	bl	8000b3c <__aeabi_d2iz>
 800834c:	f7f8 f8f2 	bl	8000534 <__aeabi_i2d>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4630      	mov	r0, r6
 8008356:	4639      	mov	r1, r7
 8008358:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800835c:	f7f7 ff9c 	bl	8000298 <__aeabi_dsub>
 8008360:	2200      	movs	r2, #0
 8008362:	4b16      	ldr	r3, [pc, #88]	; (80083bc <__ieee754_rem_pio2+0x3dc>)
 8008364:	f7f8 f950 	bl	8000608 <__aeabi_dmul>
 8008368:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800836c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008370:	f04f 0803 	mov.w	r8, #3
 8008374:	2600      	movs	r6, #0
 8008376:	2700      	movs	r7, #0
 8008378:	4632      	mov	r2, r6
 800837a:	463b      	mov	r3, r7
 800837c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008380:	f108 3aff 	add.w	sl, r8, #4294967295
 8008384:	f7f8 fba8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008388:	b9b0      	cbnz	r0, 80083b8 <__ieee754_rem_pio2+0x3d8>
 800838a:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <__ieee754_rem_pio2+0x3e0>)
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	2302      	movs	r3, #2
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	462a      	mov	r2, r5
 8008394:	4643      	mov	r3, r8
 8008396:	4621      	mov	r1, r4
 8008398:	a806      	add	r0, sp, #24
 800839a:	f000 f8dd 	bl	8008558 <__kernel_rem_pio2>
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	4605      	mov	r5, r0
 80083a4:	f6bf ae58 	bge.w	8008058 <__ieee754_rem_pio2+0x78>
 80083a8:	6863      	ldr	r3, [r4, #4]
 80083aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	68e3      	ldr	r3, [r4, #12]
 80083b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083b6:	e746      	b.n	8008246 <__ieee754_rem_pio2+0x266>
 80083b8:	46d0      	mov	r8, sl
 80083ba:	e7dd      	b.n	8008378 <__ieee754_rem_pio2+0x398>
 80083bc:	41700000 	.word	0x41700000
 80083c0:	080093e4 	.word	0x080093e4
 80083c4:	00000000 	.word	0x00000000

080083c8 <__kernel_cos>:
 80083c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	ec59 8b10 	vmov	r8, r9, d0
 80083d0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80083d4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80083d8:	ed2d 8b02 	vpush	{d8}
 80083dc:	eeb0 8a41 	vmov.f32	s16, s2
 80083e0:	eef0 8a61 	vmov.f32	s17, s3
 80083e4:	da07      	bge.n	80083f6 <__kernel_cos+0x2e>
 80083e6:	ee10 0a10 	vmov	r0, s0
 80083ea:	4649      	mov	r1, r9
 80083ec:	f7f8 fba6 	bl	8000b3c <__aeabi_d2iz>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f000 8089 	beq.w	8008508 <__kernel_cos+0x140>
 80083f6:	4642      	mov	r2, r8
 80083f8:	464b      	mov	r3, r9
 80083fa:	4640      	mov	r0, r8
 80083fc:	4649      	mov	r1, r9
 80083fe:	f7f8 f903 	bl	8000608 <__aeabi_dmul>
 8008402:	2200      	movs	r2, #0
 8008404:	4b4e      	ldr	r3, [pc, #312]	; (8008540 <__kernel_cos+0x178>)
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	f7f8 f8fd 	bl	8000608 <__aeabi_dmul>
 800840e:	a340      	add	r3, pc, #256	; (adr r3, 8008510 <__kernel_cos+0x148>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	4682      	mov	sl, r0
 8008416:	468b      	mov	fp, r1
 8008418:	4620      	mov	r0, r4
 800841a:	4629      	mov	r1, r5
 800841c:	f7f8 f8f4 	bl	8000608 <__aeabi_dmul>
 8008420:	a33d      	add	r3, pc, #244	; (adr r3, 8008518 <__kernel_cos+0x150>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f7f7 ff39 	bl	800029c <__adddf3>
 800842a:	4622      	mov	r2, r4
 800842c:	462b      	mov	r3, r5
 800842e:	f7f8 f8eb 	bl	8000608 <__aeabi_dmul>
 8008432:	a33b      	add	r3, pc, #236	; (adr r3, 8008520 <__kernel_cos+0x158>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f7f7 ff2e 	bl	8000298 <__aeabi_dsub>
 800843c:	4622      	mov	r2, r4
 800843e:	462b      	mov	r3, r5
 8008440:	f7f8 f8e2 	bl	8000608 <__aeabi_dmul>
 8008444:	a338      	add	r3, pc, #224	; (adr r3, 8008528 <__kernel_cos+0x160>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 ff27 	bl	800029c <__adddf3>
 800844e:	4622      	mov	r2, r4
 8008450:	462b      	mov	r3, r5
 8008452:	f7f8 f8d9 	bl	8000608 <__aeabi_dmul>
 8008456:	a336      	add	r3, pc, #216	; (adr r3, 8008530 <__kernel_cos+0x168>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f7 ff1c 	bl	8000298 <__aeabi_dsub>
 8008460:	4622      	mov	r2, r4
 8008462:	462b      	mov	r3, r5
 8008464:	f7f8 f8d0 	bl	8000608 <__aeabi_dmul>
 8008468:	a333      	add	r3, pc, #204	; (adr r3, 8008538 <__kernel_cos+0x170>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f7f7 ff15 	bl	800029c <__adddf3>
 8008472:	4622      	mov	r2, r4
 8008474:	462b      	mov	r3, r5
 8008476:	f7f8 f8c7 	bl	8000608 <__aeabi_dmul>
 800847a:	4622      	mov	r2, r4
 800847c:	462b      	mov	r3, r5
 800847e:	f7f8 f8c3 	bl	8000608 <__aeabi_dmul>
 8008482:	ec53 2b18 	vmov	r2, r3, d8
 8008486:	4604      	mov	r4, r0
 8008488:	460d      	mov	r5, r1
 800848a:	4640      	mov	r0, r8
 800848c:	4649      	mov	r1, r9
 800848e:	f7f8 f8bb 	bl	8000608 <__aeabi_dmul>
 8008492:	460b      	mov	r3, r1
 8008494:	4602      	mov	r2, r0
 8008496:	4629      	mov	r1, r5
 8008498:	4620      	mov	r0, r4
 800849a:	f7f7 fefd 	bl	8000298 <__aeabi_dsub>
 800849e:	4b29      	ldr	r3, [pc, #164]	; (8008544 <__kernel_cos+0x17c>)
 80084a0:	429e      	cmp	r6, r3
 80084a2:	4680      	mov	r8, r0
 80084a4:	4689      	mov	r9, r1
 80084a6:	dc11      	bgt.n	80084cc <__kernel_cos+0x104>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4650      	mov	r0, sl
 80084ae:	4659      	mov	r1, fp
 80084b0:	f7f7 fef2 	bl	8000298 <__aeabi_dsub>
 80084b4:	460b      	mov	r3, r1
 80084b6:	4924      	ldr	r1, [pc, #144]	; (8008548 <__kernel_cos+0x180>)
 80084b8:	4602      	mov	r2, r0
 80084ba:	2000      	movs	r0, #0
 80084bc:	f7f7 feec 	bl	8000298 <__aeabi_dsub>
 80084c0:	ecbd 8b02 	vpop	{d8}
 80084c4:	ec41 0b10 	vmov	d0, r0, r1
 80084c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084cc:	4b1f      	ldr	r3, [pc, #124]	; (800854c <__kernel_cos+0x184>)
 80084ce:	491e      	ldr	r1, [pc, #120]	; (8008548 <__kernel_cos+0x180>)
 80084d0:	429e      	cmp	r6, r3
 80084d2:	bfcc      	ite	gt
 80084d4:	4d1e      	ldrgt	r5, [pc, #120]	; (8008550 <__kernel_cos+0x188>)
 80084d6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80084da:	2400      	movs	r4, #0
 80084dc:	4622      	mov	r2, r4
 80084de:	462b      	mov	r3, r5
 80084e0:	2000      	movs	r0, #0
 80084e2:	f7f7 fed9 	bl	8000298 <__aeabi_dsub>
 80084e6:	4622      	mov	r2, r4
 80084e8:	4606      	mov	r6, r0
 80084ea:	460f      	mov	r7, r1
 80084ec:	462b      	mov	r3, r5
 80084ee:	4650      	mov	r0, sl
 80084f0:	4659      	mov	r1, fp
 80084f2:	f7f7 fed1 	bl	8000298 <__aeabi_dsub>
 80084f6:	4642      	mov	r2, r8
 80084f8:	464b      	mov	r3, r9
 80084fa:	f7f7 fecd 	bl	8000298 <__aeabi_dsub>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4630      	mov	r0, r6
 8008504:	4639      	mov	r1, r7
 8008506:	e7d9      	b.n	80084bc <__kernel_cos+0xf4>
 8008508:	2000      	movs	r0, #0
 800850a:	490f      	ldr	r1, [pc, #60]	; (8008548 <__kernel_cos+0x180>)
 800850c:	e7d8      	b.n	80084c0 <__kernel_cos+0xf8>
 800850e:	bf00      	nop
 8008510:	be8838d4 	.word	0xbe8838d4
 8008514:	bda8fae9 	.word	0xbda8fae9
 8008518:	bdb4b1c4 	.word	0xbdb4b1c4
 800851c:	3e21ee9e 	.word	0x3e21ee9e
 8008520:	809c52ad 	.word	0x809c52ad
 8008524:	3e927e4f 	.word	0x3e927e4f
 8008528:	19cb1590 	.word	0x19cb1590
 800852c:	3efa01a0 	.word	0x3efa01a0
 8008530:	16c15177 	.word	0x16c15177
 8008534:	3f56c16c 	.word	0x3f56c16c
 8008538:	5555554c 	.word	0x5555554c
 800853c:	3fa55555 	.word	0x3fa55555
 8008540:	3fe00000 	.word	0x3fe00000
 8008544:	3fd33332 	.word	0x3fd33332
 8008548:	3ff00000 	.word	0x3ff00000
 800854c:	3fe90000 	.word	0x3fe90000
 8008550:	3fd20000 	.word	0x3fd20000
 8008554:	00000000 	.word	0x00000000

08008558 <__kernel_rem_pio2>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	ed2d 8b02 	vpush	{d8}
 8008560:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008564:	1ed4      	subs	r4, r2, #3
 8008566:	9308      	str	r3, [sp, #32]
 8008568:	9101      	str	r1, [sp, #4]
 800856a:	4bc5      	ldr	r3, [pc, #788]	; (8008880 <__kernel_rem_pio2+0x328>)
 800856c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800856e:	9009      	str	r0, [sp, #36]	; 0x24
 8008570:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	9b08      	ldr	r3, [sp, #32]
 8008578:	3b01      	subs	r3, #1
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	2318      	movs	r3, #24
 800857e:	fb94 f4f3 	sdiv	r4, r4, r3
 8008582:	f06f 0317 	mvn.w	r3, #23
 8008586:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800858a:	fb04 3303 	mla	r3, r4, r3, r3
 800858e:	eb03 0a02 	add.w	sl, r3, r2
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	9a07      	ldr	r2, [sp, #28]
 8008596:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008870 <__kernel_rem_pio2+0x318>
 800859a:	eb03 0802 	add.w	r8, r3, r2
 800859e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80085a0:	1aa7      	subs	r7, r4, r2
 80085a2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80085a6:	ae22      	add	r6, sp, #136	; 0x88
 80085a8:	2500      	movs	r5, #0
 80085aa:	4545      	cmp	r5, r8
 80085ac:	dd13      	ble.n	80085d6 <__kernel_rem_pio2+0x7e>
 80085ae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008870 <__kernel_rem_pio2+0x318>
 80085b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80085b6:	2600      	movs	r6, #0
 80085b8:	9b04      	ldr	r3, [sp, #16]
 80085ba:	429e      	cmp	r6, r3
 80085bc:	dc32      	bgt.n	8008624 <__kernel_rem_pio2+0xcc>
 80085be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c0:	9302      	str	r3, [sp, #8]
 80085c2:	9b08      	ldr	r3, [sp, #32]
 80085c4:	199d      	adds	r5, r3, r6
 80085c6:	ab22      	add	r3, sp, #136	; 0x88
 80085c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80085cc:	9306      	str	r3, [sp, #24]
 80085ce:	ec59 8b18 	vmov	r8, r9, d8
 80085d2:	2700      	movs	r7, #0
 80085d4:	e01f      	b.n	8008616 <__kernel_rem_pio2+0xbe>
 80085d6:	42ef      	cmn	r7, r5
 80085d8:	d407      	bmi.n	80085ea <__kernel_rem_pio2+0x92>
 80085da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80085de:	f7f7 ffa9 	bl	8000534 <__aeabi_i2d>
 80085e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80085e6:	3501      	adds	r5, #1
 80085e8:	e7df      	b.n	80085aa <__kernel_rem_pio2+0x52>
 80085ea:	ec51 0b18 	vmov	r0, r1, d8
 80085ee:	e7f8      	b.n	80085e2 <__kernel_rem_pio2+0x8a>
 80085f0:	9906      	ldr	r1, [sp, #24]
 80085f2:	9d02      	ldr	r5, [sp, #8]
 80085f4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80085f8:	9106      	str	r1, [sp, #24]
 80085fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80085fe:	9502      	str	r5, [sp, #8]
 8008600:	f7f8 f802 	bl	8000608 <__aeabi_dmul>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f7 fe46 	bl	800029c <__adddf3>
 8008610:	3701      	adds	r7, #1
 8008612:	4680      	mov	r8, r0
 8008614:	4689      	mov	r9, r1
 8008616:	9b07      	ldr	r3, [sp, #28]
 8008618:	429f      	cmp	r7, r3
 800861a:	dde9      	ble.n	80085f0 <__kernel_rem_pio2+0x98>
 800861c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008620:	3601      	adds	r6, #1
 8008622:	e7c9      	b.n	80085b8 <__kernel_rem_pio2+0x60>
 8008624:	9b04      	ldr	r3, [sp, #16]
 8008626:	aa0e      	add	r2, sp, #56	; 0x38
 8008628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800862c:	930c      	str	r3, [sp, #48]	; 0x30
 800862e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008630:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008634:	9c04      	ldr	r4, [sp, #16]
 8008636:	930b      	str	r3, [sp, #44]	; 0x2c
 8008638:	ab9a      	add	r3, sp, #616	; 0x268
 800863a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800863e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008642:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008646:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800864a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800864e:	ab9a      	add	r3, sp, #616	; 0x268
 8008650:	445b      	add	r3, fp
 8008652:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8008656:	2500      	movs	r5, #0
 8008658:	1b63      	subs	r3, r4, r5
 800865a:	2b00      	cmp	r3, #0
 800865c:	dc78      	bgt.n	8008750 <__kernel_rem_pio2+0x1f8>
 800865e:	4650      	mov	r0, sl
 8008660:	ec49 8b10 	vmov	d0, r8, r9
 8008664:	f000 fc00 	bl	8008e68 <scalbn>
 8008668:	ec57 6b10 	vmov	r6, r7, d0
 800866c:	2200      	movs	r2, #0
 800866e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008672:	ee10 0a10 	vmov	r0, s0
 8008676:	4639      	mov	r1, r7
 8008678:	f7f7 ffc6 	bl	8000608 <__aeabi_dmul>
 800867c:	ec41 0b10 	vmov	d0, r0, r1
 8008680:	f000 fb6e 	bl	8008d60 <floor>
 8008684:	2200      	movs	r2, #0
 8008686:	ec51 0b10 	vmov	r0, r1, d0
 800868a:	4b7e      	ldr	r3, [pc, #504]	; (8008884 <__kernel_rem_pio2+0x32c>)
 800868c:	f7f7 ffbc 	bl	8000608 <__aeabi_dmul>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4630      	mov	r0, r6
 8008696:	4639      	mov	r1, r7
 8008698:	f7f7 fdfe 	bl	8000298 <__aeabi_dsub>
 800869c:	460f      	mov	r7, r1
 800869e:	4606      	mov	r6, r0
 80086a0:	f7f8 fa4c 	bl	8000b3c <__aeabi_d2iz>
 80086a4:	9006      	str	r0, [sp, #24]
 80086a6:	f7f7 ff45 	bl	8000534 <__aeabi_i2d>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4630      	mov	r0, r6
 80086b0:	4639      	mov	r1, r7
 80086b2:	f7f7 fdf1 	bl	8000298 <__aeabi_dsub>
 80086b6:	f1ba 0f00 	cmp.w	sl, #0
 80086ba:	4606      	mov	r6, r0
 80086bc:	460f      	mov	r7, r1
 80086be:	dd6c      	ble.n	800879a <__kernel_rem_pio2+0x242>
 80086c0:	1e62      	subs	r2, r4, #1
 80086c2:	ab0e      	add	r3, sp, #56	; 0x38
 80086c4:	f1ca 0118 	rsb	r1, sl, #24
 80086c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80086cc:	9d06      	ldr	r5, [sp, #24]
 80086ce:	fa40 f301 	asr.w	r3, r0, r1
 80086d2:	441d      	add	r5, r3
 80086d4:	408b      	lsls	r3, r1
 80086d6:	1ac0      	subs	r0, r0, r3
 80086d8:	ab0e      	add	r3, sp, #56	; 0x38
 80086da:	9506      	str	r5, [sp, #24]
 80086dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80086e0:	f1ca 0317 	rsb	r3, sl, #23
 80086e4:	fa40 f303 	asr.w	r3, r0, r3
 80086e8:	9302      	str	r3, [sp, #8]
 80086ea:	9b02      	ldr	r3, [sp, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dd62      	ble.n	80087b6 <__kernel_rem_pio2+0x25e>
 80086f0:	9b06      	ldr	r3, [sp, #24]
 80086f2:	2200      	movs	r2, #0
 80086f4:	3301      	adds	r3, #1
 80086f6:	9306      	str	r3, [sp, #24]
 80086f8:	4615      	mov	r5, r2
 80086fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80086fe:	4294      	cmp	r4, r2
 8008700:	f300 8095 	bgt.w	800882e <__kernel_rem_pio2+0x2d6>
 8008704:	f1ba 0f00 	cmp.w	sl, #0
 8008708:	dd07      	ble.n	800871a <__kernel_rem_pio2+0x1c2>
 800870a:	f1ba 0f01 	cmp.w	sl, #1
 800870e:	f000 80a2 	beq.w	8008856 <__kernel_rem_pio2+0x2fe>
 8008712:	f1ba 0f02 	cmp.w	sl, #2
 8008716:	f000 80c1 	beq.w	800889c <__kernel_rem_pio2+0x344>
 800871a:	9b02      	ldr	r3, [sp, #8]
 800871c:	2b02      	cmp	r3, #2
 800871e:	d14a      	bne.n	80087b6 <__kernel_rem_pio2+0x25e>
 8008720:	4632      	mov	r2, r6
 8008722:	463b      	mov	r3, r7
 8008724:	2000      	movs	r0, #0
 8008726:	4958      	ldr	r1, [pc, #352]	; (8008888 <__kernel_rem_pio2+0x330>)
 8008728:	f7f7 fdb6 	bl	8000298 <__aeabi_dsub>
 800872c:	4606      	mov	r6, r0
 800872e:	460f      	mov	r7, r1
 8008730:	2d00      	cmp	r5, #0
 8008732:	d040      	beq.n	80087b6 <__kernel_rem_pio2+0x25e>
 8008734:	4650      	mov	r0, sl
 8008736:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008878 <__kernel_rem_pio2+0x320>
 800873a:	f000 fb95 	bl	8008e68 <scalbn>
 800873e:	4630      	mov	r0, r6
 8008740:	4639      	mov	r1, r7
 8008742:	ec53 2b10 	vmov	r2, r3, d0
 8008746:	f7f7 fda7 	bl	8000298 <__aeabi_dsub>
 800874a:	4606      	mov	r6, r0
 800874c:	460f      	mov	r7, r1
 800874e:	e032      	b.n	80087b6 <__kernel_rem_pio2+0x25e>
 8008750:	2200      	movs	r2, #0
 8008752:	4b4e      	ldr	r3, [pc, #312]	; (800888c <__kernel_rem_pio2+0x334>)
 8008754:	4640      	mov	r0, r8
 8008756:	4649      	mov	r1, r9
 8008758:	f7f7 ff56 	bl	8000608 <__aeabi_dmul>
 800875c:	f7f8 f9ee 	bl	8000b3c <__aeabi_d2iz>
 8008760:	f7f7 fee8 	bl	8000534 <__aeabi_i2d>
 8008764:	2200      	movs	r2, #0
 8008766:	4b4a      	ldr	r3, [pc, #296]	; (8008890 <__kernel_rem_pio2+0x338>)
 8008768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800876c:	f7f7 ff4c 	bl	8000608 <__aeabi_dmul>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f7 fd8e 	bl	8000298 <__aeabi_dsub>
 800877c:	f7f8 f9de 	bl	8000b3c <__aeabi_d2iz>
 8008780:	ab0e      	add	r3, sp, #56	; 0x38
 8008782:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8008786:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800878a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800878e:	f7f7 fd85 	bl	800029c <__adddf3>
 8008792:	3501      	adds	r5, #1
 8008794:	4680      	mov	r8, r0
 8008796:	4689      	mov	r9, r1
 8008798:	e75e      	b.n	8008658 <__kernel_rem_pio2+0x100>
 800879a:	d105      	bne.n	80087a8 <__kernel_rem_pio2+0x250>
 800879c:	1e63      	subs	r3, r4, #1
 800879e:	aa0e      	add	r2, sp, #56	; 0x38
 80087a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80087a4:	15c3      	asrs	r3, r0, #23
 80087a6:	e79f      	b.n	80086e8 <__kernel_rem_pio2+0x190>
 80087a8:	2200      	movs	r2, #0
 80087aa:	4b3a      	ldr	r3, [pc, #232]	; (8008894 <__kernel_rem_pio2+0x33c>)
 80087ac:	f7f8 f9b2 	bl	8000b14 <__aeabi_dcmpge>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d139      	bne.n	8008828 <__kernel_rem_pio2+0x2d0>
 80087b4:	9002      	str	r0, [sp, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	2300      	movs	r3, #0
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f8 f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f000 80c7 	beq.w	8008956 <__kernel_rem_pio2+0x3fe>
 80087c8:	1e65      	subs	r5, r4, #1
 80087ca:	462b      	mov	r3, r5
 80087cc:	2200      	movs	r2, #0
 80087ce:	9904      	ldr	r1, [sp, #16]
 80087d0:	428b      	cmp	r3, r1
 80087d2:	da6a      	bge.n	80088aa <__kernel_rem_pio2+0x352>
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	f000 8088 	beq.w	80088ea <__kernel_rem_pio2+0x392>
 80087da:	ab0e      	add	r3, sp, #56	; 0x38
 80087dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80087e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80b4 	beq.w	8008952 <__kernel_rem_pio2+0x3fa>
 80087ea:	4650      	mov	r0, sl
 80087ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008878 <__kernel_rem_pio2+0x320>
 80087f0:	f000 fb3a 	bl	8008e68 <scalbn>
 80087f4:	00ec      	lsls	r4, r5, #3
 80087f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80087f8:	191e      	adds	r6, r3, r4
 80087fa:	ec59 8b10 	vmov	r8, r9, d0
 80087fe:	f106 0a08 	add.w	sl, r6, #8
 8008802:	462f      	mov	r7, r5
 8008804:	2f00      	cmp	r7, #0
 8008806:	f280 80df 	bge.w	80089c8 <__kernel_rem_pio2+0x470>
 800880a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008870 <__kernel_rem_pio2+0x318>
 800880e:	f04f 0a00 	mov.w	sl, #0
 8008812:	eba5 030a 	sub.w	r3, r5, sl
 8008816:	2b00      	cmp	r3, #0
 8008818:	f2c0 810a 	blt.w	8008a30 <__kernel_rem_pio2+0x4d8>
 800881c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008898 <__kernel_rem_pio2+0x340>
 8008820:	ec59 8b18 	vmov	r8, r9, d8
 8008824:	2700      	movs	r7, #0
 8008826:	e0f5      	b.n	8008a14 <__kernel_rem_pio2+0x4bc>
 8008828:	2302      	movs	r3, #2
 800882a:	9302      	str	r3, [sp, #8]
 800882c:	e760      	b.n	80086f0 <__kernel_rem_pio2+0x198>
 800882e:	ab0e      	add	r3, sp, #56	; 0x38
 8008830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008834:	b94d      	cbnz	r5, 800884a <__kernel_rem_pio2+0x2f2>
 8008836:	b12b      	cbz	r3, 8008844 <__kernel_rem_pio2+0x2ec>
 8008838:	a80e      	add	r0, sp, #56	; 0x38
 800883a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800883e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008842:	2301      	movs	r3, #1
 8008844:	3201      	adds	r2, #1
 8008846:	461d      	mov	r5, r3
 8008848:	e759      	b.n	80086fe <__kernel_rem_pio2+0x1a6>
 800884a:	a80e      	add	r0, sp, #56	; 0x38
 800884c:	1acb      	subs	r3, r1, r3
 800884e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008852:	462b      	mov	r3, r5
 8008854:	e7f6      	b.n	8008844 <__kernel_rem_pio2+0x2ec>
 8008856:	1e62      	subs	r2, r4, #1
 8008858:	ab0e      	add	r3, sp, #56	; 0x38
 800885a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008862:	a90e      	add	r1, sp, #56	; 0x38
 8008864:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008868:	e757      	b.n	800871a <__kernel_rem_pio2+0x1c2>
 800886a:	bf00      	nop
 800886c:	f3af 8000 	nop.w
	...
 800887c:	3ff00000 	.word	0x3ff00000
 8008880:	08009530 	.word	0x08009530
 8008884:	40200000 	.word	0x40200000
 8008888:	3ff00000 	.word	0x3ff00000
 800888c:	3e700000 	.word	0x3e700000
 8008890:	41700000 	.word	0x41700000
 8008894:	3fe00000 	.word	0x3fe00000
 8008898:	080094f0 	.word	0x080094f0
 800889c:	1e62      	subs	r2, r4, #1
 800889e:	ab0e      	add	r3, sp, #56	; 0x38
 80088a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80088a8:	e7db      	b.n	8008862 <__kernel_rem_pio2+0x30a>
 80088aa:	a90e      	add	r1, sp, #56	; 0x38
 80088ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	430a      	orrs	r2, r1
 80088b4:	e78b      	b.n	80087ce <__kernel_rem_pio2+0x276>
 80088b6:	3301      	adds	r3, #1
 80088b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80088bc:	2900      	cmp	r1, #0
 80088be:	d0fa      	beq.n	80088b6 <__kernel_rem_pio2+0x35e>
 80088c0:	9a08      	ldr	r2, [sp, #32]
 80088c2:	4422      	add	r2, r4
 80088c4:	00d2      	lsls	r2, r2, #3
 80088c6:	a922      	add	r1, sp, #136	; 0x88
 80088c8:	18e3      	adds	r3, r4, r3
 80088ca:	9206      	str	r2, [sp, #24]
 80088cc:	440a      	add	r2, r1
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	f10b 0108 	add.w	r1, fp, #8
 80088d4:	f102 0308 	add.w	r3, r2, #8
 80088d8:	1c66      	adds	r6, r4, #1
 80088da:	910a      	str	r1, [sp, #40]	; 0x28
 80088dc:	2500      	movs	r5, #0
 80088de:	930d      	str	r3, [sp, #52]	; 0x34
 80088e0:	9b02      	ldr	r3, [sp, #8]
 80088e2:	42b3      	cmp	r3, r6
 80088e4:	da04      	bge.n	80088f0 <__kernel_rem_pio2+0x398>
 80088e6:	461c      	mov	r4, r3
 80088e8:	e6a6      	b.n	8008638 <__kernel_rem_pio2+0xe0>
 80088ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ec:	2301      	movs	r3, #1
 80088ee:	e7e3      	b.n	80088b8 <__kernel_rem_pio2+0x360>
 80088f0:	9b06      	ldr	r3, [sp, #24]
 80088f2:	18ef      	adds	r7, r5, r3
 80088f4:	ab22      	add	r3, sp, #136	; 0x88
 80088f6:	441f      	add	r7, r3
 80088f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80088fe:	f7f7 fe19 	bl	8000534 <__aeabi_i2d>
 8008902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008904:	461c      	mov	r4, r3
 8008906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008908:	e9c7 0100 	strd	r0, r1, [r7]
 800890c:	eb03 0b05 	add.w	fp, r3, r5
 8008910:	2700      	movs	r7, #0
 8008912:	f04f 0800 	mov.w	r8, #0
 8008916:	f04f 0900 	mov.w	r9, #0
 800891a:	9b07      	ldr	r3, [sp, #28]
 800891c:	429f      	cmp	r7, r3
 800891e:	dd08      	ble.n	8008932 <__kernel_rem_pio2+0x3da>
 8008920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008922:	aa72      	add	r2, sp, #456	; 0x1c8
 8008924:	18eb      	adds	r3, r5, r3
 8008926:	4413      	add	r3, r2
 8008928:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800892c:	3601      	adds	r6, #1
 800892e:	3508      	adds	r5, #8
 8008930:	e7d6      	b.n	80088e0 <__kernel_rem_pio2+0x388>
 8008932:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008936:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800893a:	f7f7 fe65 	bl	8000608 <__aeabi_dmul>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4640      	mov	r0, r8
 8008944:	4649      	mov	r1, r9
 8008946:	f7f7 fca9 	bl	800029c <__adddf3>
 800894a:	3701      	adds	r7, #1
 800894c:	4680      	mov	r8, r0
 800894e:	4689      	mov	r9, r1
 8008950:	e7e3      	b.n	800891a <__kernel_rem_pio2+0x3c2>
 8008952:	3d01      	subs	r5, #1
 8008954:	e741      	b.n	80087da <__kernel_rem_pio2+0x282>
 8008956:	f1ca 0000 	rsb	r0, sl, #0
 800895a:	ec47 6b10 	vmov	d0, r6, r7
 800895e:	f000 fa83 	bl	8008e68 <scalbn>
 8008962:	ec57 6b10 	vmov	r6, r7, d0
 8008966:	2200      	movs	r2, #0
 8008968:	4b99      	ldr	r3, [pc, #612]	; (8008bd0 <__kernel_rem_pio2+0x678>)
 800896a:	ee10 0a10 	vmov	r0, s0
 800896e:	4639      	mov	r1, r7
 8008970:	f7f8 f8d0 	bl	8000b14 <__aeabi_dcmpge>
 8008974:	b1f8      	cbz	r0, 80089b6 <__kernel_rem_pio2+0x45e>
 8008976:	2200      	movs	r2, #0
 8008978:	4b96      	ldr	r3, [pc, #600]	; (8008bd4 <__kernel_rem_pio2+0x67c>)
 800897a:	4630      	mov	r0, r6
 800897c:	4639      	mov	r1, r7
 800897e:	f7f7 fe43 	bl	8000608 <__aeabi_dmul>
 8008982:	f7f8 f8db 	bl	8000b3c <__aeabi_d2iz>
 8008986:	4680      	mov	r8, r0
 8008988:	f7f7 fdd4 	bl	8000534 <__aeabi_i2d>
 800898c:	2200      	movs	r2, #0
 800898e:	4b90      	ldr	r3, [pc, #576]	; (8008bd0 <__kernel_rem_pio2+0x678>)
 8008990:	f7f7 fe3a 	bl	8000608 <__aeabi_dmul>
 8008994:	460b      	mov	r3, r1
 8008996:	4602      	mov	r2, r0
 8008998:	4639      	mov	r1, r7
 800899a:	4630      	mov	r0, r6
 800899c:	f7f7 fc7c 	bl	8000298 <__aeabi_dsub>
 80089a0:	f7f8 f8cc 	bl	8000b3c <__aeabi_d2iz>
 80089a4:	1c65      	adds	r5, r4, #1
 80089a6:	ab0e      	add	r3, sp, #56	; 0x38
 80089a8:	f10a 0a18 	add.w	sl, sl, #24
 80089ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80089b0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80089b4:	e719      	b.n	80087ea <__kernel_rem_pio2+0x292>
 80089b6:	4630      	mov	r0, r6
 80089b8:	4639      	mov	r1, r7
 80089ba:	f7f8 f8bf 	bl	8000b3c <__aeabi_d2iz>
 80089be:	ab0e      	add	r3, sp, #56	; 0x38
 80089c0:	4625      	mov	r5, r4
 80089c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80089c6:	e710      	b.n	80087ea <__kernel_rem_pio2+0x292>
 80089c8:	ab0e      	add	r3, sp, #56	; 0x38
 80089ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80089ce:	f7f7 fdb1 	bl	8000534 <__aeabi_i2d>
 80089d2:	4642      	mov	r2, r8
 80089d4:	464b      	mov	r3, r9
 80089d6:	f7f7 fe17 	bl	8000608 <__aeabi_dmul>
 80089da:	2200      	movs	r2, #0
 80089dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80089e0:	4b7c      	ldr	r3, [pc, #496]	; (8008bd4 <__kernel_rem_pio2+0x67c>)
 80089e2:	4640      	mov	r0, r8
 80089e4:	4649      	mov	r1, r9
 80089e6:	f7f7 fe0f 	bl	8000608 <__aeabi_dmul>
 80089ea:	3f01      	subs	r7, #1
 80089ec:	4680      	mov	r8, r0
 80089ee:	4689      	mov	r9, r1
 80089f0:	e708      	b.n	8008804 <__kernel_rem_pio2+0x2ac>
 80089f2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80089fe:	f7f7 fe03 	bl	8000608 <__aeabi_dmul>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4640      	mov	r0, r8
 8008a08:	4649      	mov	r1, r9
 8008a0a:	f7f7 fc47 	bl	800029c <__adddf3>
 8008a0e:	3701      	adds	r7, #1
 8008a10:	4680      	mov	r8, r0
 8008a12:	4689      	mov	r9, r1
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	429f      	cmp	r7, r3
 8008a18:	dc01      	bgt.n	8008a1e <__kernel_rem_pio2+0x4c6>
 8008a1a:	45ba      	cmp	sl, r7
 8008a1c:	dae9      	bge.n	80089f2 <__kernel_rem_pio2+0x49a>
 8008a1e:	ab4a      	add	r3, sp, #296	; 0x128
 8008a20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a24:	e9c3 8900 	strd	r8, r9, [r3]
 8008a28:	f10a 0a01 	add.w	sl, sl, #1
 8008a2c:	3e08      	subs	r6, #8
 8008a2e:	e6f0      	b.n	8008812 <__kernel_rem_pio2+0x2ba>
 8008a30:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d85b      	bhi.n	8008aee <__kernel_rem_pio2+0x596>
 8008a36:	e8df f003 	tbb	[pc, r3]
 8008a3a:	264a      	.short	0x264a
 8008a3c:	0226      	.short	0x0226
 8008a3e:	ab9a      	add	r3, sp, #616	; 0x268
 8008a40:	441c      	add	r4, r3
 8008a42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008a46:	46a2      	mov	sl, r4
 8008a48:	46ab      	mov	fp, r5
 8008a4a:	f1bb 0f00 	cmp.w	fp, #0
 8008a4e:	dc6c      	bgt.n	8008b2a <__kernel_rem_pio2+0x5d2>
 8008a50:	46a2      	mov	sl, r4
 8008a52:	46ab      	mov	fp, r5
 8008a54:	f1bb 0f01 	cmp.w	fp, #1
 8008a58:	f300 8086 	bgt.w	8008b68 <__kernel_rem_pio2+0x610>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	2d01      	cmp	r5, #1
 8008a62:	f300 80a0 	bgt.w	8008ba6 <__kernel_rem_pio2+0x64e>
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008a6c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 809e 	bne.w	8008bb2 <__kernel_rem_pio2+0x65a>
 8008a76:	9b01      	ldr	r3, [sp, #4]
 8008a78:	e9c3 7800 	strd	r7, r8, [r3]
 8008a7c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008a80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008a84:	e033      	b.n	8008aee <__kernel_rem_pio2+0x596>
 8008a86:	3408      	adds	r4, #8
 8008a88:	ab4a      	add	r3, sp, #296	; 0x128
 8008a8a:	441c      	add	r4, r3
 8008a8c:	462e      	mov	r6, r5
 8008a8e:	2000      	movs	r0, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	2e00      	cmp	r6, #0
 8008a94:	da3a      	bge.n	8008b0c <__kernel_rem_pio2+0x5b4>
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d03d      	beq.n	8008b18 <__kernel_rem_pio2+0x5c0>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008aa2:	9c01      	ldr	r4, [sp, #4]
 8008aa4:	e9c4 2300 	strd	r2, r3, [r4]
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008ab0:	f7f7 fbf2 	bl	8000298 <__aeabi_dsub>
 8008ab4:	ae4c      	add	r6, sp, #304	; 0x130
 8008ab6:	2401      	movs	r4, #1
 8008ab8:	42a5      	cmp	r5, r4
 8008aba:	da30      	bge.n	8008b1e <__kernel_rem_pio2+0x5c6>
 8008abc:	9b02      	ldr	r3, [sp, #8]
 8008abe:	b113      	cbz	r3, 8008ac6 <__kernel_rem_pio2+0x56e>
 8008ac0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008acc:	e00f      	b.n	8008aee <__kernel_rem_pio2+0x596>
 8008ace:	ab9a      	add	r3, sp, #616	; 0x268
 8008ad0:	441c      	add	r4, r3
 8008ad2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	2d00      	cmp	r5, #0
 8008adc:	da10      	bge.n	8008b00 <__kernel_rem_pio2+0x5a8>
 8008ade:	9b02      	ldr	r3, [sp, #8]
 8008ae0:	b113      	cbz	r3, 8008ae8 <__kernel_rem_pio2+0x590>
 8008ae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	9b01      	ldr	r3, [sp, #4]
 8008aea:	e9c3 0100 	strd	r0, r1, [r3]
 8008aee:	9b06      	ldr	r3, [sp, #24]
 8008af0:	f003 0007 	and.w	r0, r3, #7
 8008af4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008af8:	ecbd 8b02 	vpop	{d8}
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b04:	f7f7 fbca 	bl	800029c <__adddf3>
 8008b08:	3d01      	subs	r5, #1
 8008b0a:	e7e6      	b.n	8008ada <__kernel_rem_pio2+0x582>
 8008b0c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b10:	f7f7 fbc4 	bl	800029c <__adddf3>
 8008b14:	3e01      	subs	r6, #1
 8008b16:	e7bc      	b.n	8008a92 <__kernel_rem_pio2+0x53a>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	e7c1      	b.n	8008aa2 <__kernel_rem_pio2+0x54a>
 8008b1e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008b22:	f7f7 fbbb 	bl	800029c <__adddf3>
 8008b26:	3401      	adds	r4, #1
 8008b28:	e7c6      	b.n	8008ab8 <__kernel_rem_pio2+0x560>
 8008b2a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008b2e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008b32:	4640      	mov	r0, r8
 8008b34:	ec53 2b17 	vmov	r2, r3, d7
 8008b38:	4649      	mov	r1, r9
 8008b3a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b3e:	f7f7 fbad 	bl	800029c <__adddf3>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4606      	mov	r6, r0
 8008b48:	460f      	mov	r7, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 fba3 	bl	8000298 <__aeabi_dsub>
 8008b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b56:	f7f7 fba1 	bl	800029c <__adddf3>
 8008b5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b5e:	e9ca 0100 	strd	r0, r1, [sl]
 8008b62:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8008b66:	e770      	b.n	8008a4a <__kernel_rem_pio2+0x4f2>
 8008b68:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008b6c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008b70:	4630      	mov	r0, r6
 8008b72:	ec53 2b17 	vmov	r2, r3, d7
 8008b76:	4639      	mov	r1, r7
 8008b78:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b7c:	f7f7 fb8e 	bl	800029c <__adddf3>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4680      	mov	r8, r0
 8008b86:	4689      	mov	r9, r1
 8008b88:	4630      	mov	r0, r6
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	f7f7 fb84 	bl	8000298 <__aeabi_dsub>
 8008b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b94:	f7f7 fb82 	bl	800029c <__adddf3>
 8008b98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b9c:	e9ca 0100 	strd	r0, r1, [sl]
 8008ba0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8008ba4:	e756      	b.n	8008a54 <__kernel_rem_pio2+0x4fc>
 8008ba6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008baa:	f7f7 fb77 	bl	800029c <__adddf3>
 8008bae:	3d01      	subs	r5, #1
 8008bb0:	e756      	b.n	8008a60 <__kernel_rem_pio2+0x508>
 8008bb2:	9b01      	ldr	r3, [sp, #4]
 8008bb4:	9a01      	ldr	r2, [sp, #4]
 8008bb6:	601f      	str	r7, [r3, #0]
 8008bb8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008bbc:	605c      	str	r4, [r3, #4]
 8008bbe:	609d      	str	r5, [r3, #8]
 8008bc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008bc4:	60d3      	str	r3, [r2, #12]
 8008bc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bca:	6110      	str	r0, [r2, #16]
 8008bcc:	6153      	str	r3, [r2, #20]
 8008bce:	e78e      	b.n	8008aee <__kernel_rem_pio2+0x596>
 8008bd0:	41700000 	.word	0x41700000
 8008bd4:	3e700000 	.word	0x3e700000

08008bd8 <__kernel_sin>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	ec55 4b10 	vmov	r4, r5, d0
 8008be0:	b085      	sub	sp, #20
 8008be2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008be6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008bea:	ed8d 1b00 	vstr	d1, [sp]
 8008bee:	9002      	str	r0, [sp, #8]
 8008bf0:	da06      	bge.n	8008c00 <__kernel_sin+0x28>
 8008bf2:	ee10 0a10 	vmov	r0, s0
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	f7f7 ffa0 	bl	8000b3c <__aeabi_d2iz>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d051      	beq.n	8008ca4 <__kernel_sin+0xcc>
 8008c00:	4622      	mov	r2, r4
 8008c02:	462b      	mov	r3, r5
 8008c04:	4620      	mov	r0, r4
 8008c06:	4629      	mov	r1, r5
 8008c08:	f7f7 fcfe 	bl	8000608 <__aeabi_dmul>
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	468b      	mov	fp, r1
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 fcf6 	bl	8000608 <__aeabi_dmul>
 8008c1c:	a341      	add	r3, pc, #260	; (adr r3, 8008d24 <__kernel_sin+0x14c>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	4680      	mov	r8, r0
 8008c24:	4689      	mov	r9, r1
 8008c26:	4650      	mov	r0, sl
 8008c28:	4659      	mov	r1, fp
 8008c2a:	f7f7 fced 	bl	8000608 <__aeabi_dmul>
 8008c2e:	a33f      	add	r3, pc, #252	; (adr r3, 8008d2c <__kernel_sin+0x154>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 fb30 	bl	8000298 <__aeabi_dsub>
 8008c38:	4652      	mov	r2, sl
 8008c3a:	465b      	mov	r3, fp
 8008c3c:	f7f7 fce4 	bl	8000608 <__aeabi_dmul>
 8008c40:	a33c      	add	r3, pc, #240	; (adr r3, 8008d34 <__kernel_sin+0x15c>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f7 fb29 	bl	800029c <__adddf3>
 8008c4a:	4652      	mov	r2, sl
 8008c4c:	465b      	mov	r3, fp
 8008c4e:	f7f7 fcdb 	bl	8000608 <__aeabi_dmul>
 8008c52:	a33a      	add	r3, pc, #232	; (adr r3, 8008d3c <__kernel_sin+0x164>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 fb1e 	bl	8000298 <__aeabi_dsub>
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	465b      	mov	r3, fp
 8008c60:	f7f7 fcd2 	bl	8000608 <__aeabi_dmul>
 8008c64:	a337      	add	r3, pc, #220	; (adr r3, 8008d44 <__kernel_sin+0x16c>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fb17 	bl	800029c <__adddf3>
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	4606      	mov	r6, r0
 8008c72:	460f      	mov	r7, r1
 8008c74:	b9db      	cbnz	r3, 8008cae <__kernel_sin+0xd6>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	4659      	mov	r1, fp
 8008c7e:	f7f7 fcc3 	bl	8000608 <__aeabi_dmul>
 8008c82:	a325      	add	r3, pc, #148	; (adr r3, 8008d18 <__kernel_sin+0x140>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 fb06 	bl	8000298 <__aeabi_dsub>
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	464b      	mov	r3, r9
 8008c90:	f7f7 fcba 	bl	8000608 <__aeabi_dmul>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4620      	mov	r0, r4
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	f7f7 fafe 	bl	800029c <__adddf3>
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	ec45 4b10 	vmov	d0, r4, r5
 8008ca8:	b005      	add	sp, #20
 8008caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4b1b      	ldr	r3, [pc, #108]	; (8008d20 <__kernel_sin+0x148>)
 8008cb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cb6:	f7f7 fca7 	bl	8000608 <__aeabi_dmul>
 8008cba:	4632      	mov	r2, r6
 8008cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc0:	463b      	mov	r3, r7
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	f7f7 fc9f 	bl	8000608 <__aeabi_dmul>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd2:	f7f7 fae1 	bl	8000298 <__aeabi_dsub>
 8008cd6:	4652      	mov	r2, sl
 8008cd8:	465b      	mov	r3, fp
 8008cda:	f7f7 fc95 	bl	8000608 <__aeabi_dmul>
 8008cde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ce2:	f7f7 fad9 	bl	8000298 <__aeabi_dsub>
 8008ce6:	a30c      	add	r3, pc, #48	; (adr r3, 8008d18 <__kernel_sin+0x140>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	4606      	mov	r6, r0
 8008cee:	460f      	mov	r7, r1
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	f7f7 fc88 	bl	8000608 <__aeabi_dmul>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 facc 	bl	800029c <__adddf3>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4620      	mov	r0, r4
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	f7f7 fac4 	bl	8000298 <__aeabi_dsub>
 8008d10:	e7c6      	b.n	8008ca0 <__kernel_sin+0xc8>
 8008d12:	bf00      	nop
 8008d14:	f3af 8000 	nop.w
 8008d18:	55555549 	.word	0x55555549
 8008d1c:	3fc55555 	.word	0x3fc55555
 8008d20:	3fe00000 	.word	0x3fe00000
 8008d24:	5acfd57c 	.word	0x5acfd57c
 8008d28:	3de5d93a 	.word	0x3de5d93a
 8008d2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008d30:	3e5ae5e6 	.word	0x3e5ae5e6
 8008d34:	57b1fe7d 	.word	0x57b1fe7d
 8008d38:	3ec71de3 	.word	0x3ec71de3
 8008d3c:	19c161d5 	.word	0x19c161d5
 8008d40:	3f2a01a0 	.word	0x3f2a01a0
 8008d44:	1110f8a6 	.word	0x1110f8a6
 8008d48:	3f811111 	.word	0x3f811111

08008d4c <fabs>:
 8008d4c:	ec51 0b10 	vmov	r0, r1, d0
 8008d50:	ee10 2a10 	vmov	r2, s0
 8008d54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d58:	ec43 2b10 	vmov	d0, r2, r3
 8008d5c:	4770      	bx	lr
	...

08008d60 <floor>:
 8008d60:	ec51 0b10 	vmov	r0, r1, d0
 8008d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008d6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008d70:	2e13      	cmp	r6, #19
 8008d72:	460c      	mov	r4, r1
 8008d74:	ee10 5a10 	vmov	r5, s0
 8008d78:	4680      	mov	r8, r0
 8008d7a:	dc34      	bgt.n	8008de6 <floor+0x86>
 8008d7c:	2e00      	cmp	r6, #0
 8008d7e:	da16      	bge.n	8008dae <floor+0x4e>
 8008d80:	a335      	add	r3, pc, #212	; (adr r3, 8008e58 <floor+0xf8>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f7f7 fa89 	bl	800029c <__adddf3>
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f7f7 fecb 	bl	8000b28 <__aeabi_dcmpgt>
 8008d92:	b148      	cbz	r0, 8008da8 <floor+0x48>
 8008d94:	2c00      	cmp	r4, #0
 8008d96:	da59      	bge.n	8008e4c <floor+0xec>
 8008d98:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008d9c:	4a30      	ldr	r2, [pc, #192]	; (8008e60 <floor+0x100>)
 8008d9e:	432b      	orrs	r3, r5
 8008da0:	2500      	movs	r5, #0
 8008da2:	42ab      	cmp	r3, r5
 8008da4:	bf18      	it	ne
 8008da6:	4614      	movne	r4, r2
 8008da8:	4621      	mov	r1, r4
 8008daa:	4628      	mov	r0, r5
 8008dac:	e025      	b.n	8008dfa <floor+0x9a>
 8008dae:	4f2d      	ldr	r7, [pc, #180]	; (8008e64 <floor+0x104>)
 8008db0:	4137      	asrs	r7, r6
 8008db2:	ea01 0307 	and.w	r3, r1, r7
 8008db6:	4303      	orrs	r3, r0
 8008db8:	d01f      	beq.n	8008dfa <floor+0x9a>
 8008dba:	a327      	add	r3, pc, #156	; (adr r3, 8008e58 <floor+0xf8>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	f7f7 fa6c 	bl	800029c <__adddf3>
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f7f7 feae 	bl	8000b28 <__aeabi_dcmpgt>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d0eb      	beq.n	8008da8 <floor+0x48>
 8008dd0:	2c00      	cmp	r4, #0
 8008dd2:	bfbe      	ittt	lt
 8008dd4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008dd8:	fa43 f606 	asrlt.w	r6, r3, r6
 8008ddc:	19a4      	addlt	r4, r4, r6
 8008dde:	ea24 0407 	bic.w	r4, r4, r7
 8008de2:	2500      	movs	r5, #0
 8008de4:	e7e0      	b.n	8008da8 <floor+0x48>
 8008de6:	2e33      	cmp	r6, #51	; 0x33
 8008de8:	dd0b      	ble.n	8008e02 <floor+0xa2>
 8008dea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008dee:	d104      	bne.n	8008dfa <floor+0x9a>
 8008df0:	ee10 2a10 	vmov	r2, s0
 8008df4:	460b      	mov	r3, r1
 8008df6:	f7f7 fa51 	bl	800029c <__adddf3>
 8008dfa:	ec41 0b10 	vmov	d0, r0, r1
 8008dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e02:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008e06:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0a:	fa23 f707 	lsr.w	r7, r3, r7
 8008e0e:	4207      	tst	r7, r0
 8008e10:	d0f3      	beq.n	8008dfa <floor+0x9a>
 8008e12:	a311      	add	r3, pc, #68	; (adr r3, 8008e58 <floor+0xf8>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 fa40 	bl	800029c <__adddf3>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f7f7 fe82 	bl	8000b28 <__aeabi_dcmpgt>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d0bf      	beq.n	8008da8 <floor+0x48>
 8008e28:	2c00      	cmp	r4, #0
 8008e2a:	da02      	bge.n	8008e32 <floor+0xd2>
 8008e2c:	2e14      	cmp	r6, #20
 8008e2e:	d103      	bne.n	8008e38 <floor+0xd8>
 8008e30:	3401      	adds	r4, #1
 8008e32:	ea25 0507 	bic.w	r5, r5, r7
 8008e36:	e7b7      	b.n	8008da8 <floor+0x48>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008e3e:	fa03 f606 	lsl.w	r6, r3, r6
 8008e42:	4435      	add	r5, r6
 8008e44:	4545      	cmp	r5, r8
 8008e46:	bf38      	it	cc
 8008e48:	18e4      	addcc	r4, r4, r3
 8008e4a:	e7f2      	b.n	8008e32 <floor+0xd2>
 8008e4c:	2500      	movs	r5, #0
 8008e4e:	462c      	mov	r4, r5
 8008e50:	e7aa      	b.n	8008da8 <floor+0x48>
 8008e52:	bf00      	nop
 8008e54:	f3af 8000 	nop.w
 8008e58:	8800759c 	.word	0x8800759c
 8008e5c:	7e37e43c 	.word	0x7e37e43c
 8008e60:	bff00000 	.word	0xbff00000
 8008e64:	000fffff 	.word	0x000fffff

08008e68 <scalbn>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	ec55 4b10 	vmov	r4, r5, d0
 8008e6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008e72:	4606      	mov	r6, r0
 8008e74:	462b      	mov	r3, r5
 8008e76:	b9aa      	cbnz	r2, 8008ea4 <scalbn+0x3c>
 8008e78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008e7c:	4323      	orrs	r3, r4
 8008e7e:	d03b      	beq.n	8008ef8 <scalbn+0x90>
 8008e80:	4b31      	ldr	r3, [pc, #196]	; (8008f48 <scalbn+0xe0>)
 8008e82:	4629      	mov	r1, r5
 8008e84:	2200      	movs	r2, #0
 8008e86:	ee10 0a10 	vmov	r0, s0
 8008e8a:	f7f7 fbbd 	bl	8000608 <__aeabi_dmul>
 8008e8e:	4b2f      	ldr	r3, [pc, #188]	; (8008f4c <scalbn+0xe4>)
 8008e90:	429e      	cmp	r6, r3
 8008e92:	4604      	mov	r4, r0
 8008e94:	460d      	mov	r5, r1
 8008e96:	da12      	bge.n	8008ebe <scalbn+0x56>
 8008e98:	a327      	add	r3, pc, #156	; (adr r3, 8008f38 <scalbn+0xd0>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fbb3 	bl	8000608 <__aeabi_dmul>
 8008ea2:	e009      	b.n	8008eb8 <scalbn+0x50>
 8008ea4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008ea8:	428a      	cmp	r2, r1
 8008eaa:	d10c      	bne.n	8008ec6 <scalbn+0x5e>
 8008eac:	ee10 2a10 	vmov	r2, s0
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	f7f7 f9f2 	bl	800029c <__adddf3>
 8008eb8:	4604      	mov	r4, r0
 8008eba:	460d      	mov	r5, r1
 8008ebc:	e01c      	b.n	8008ef8 <scalbn+0x90>
 8008ebe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	3a36      	subs	r2, #54	; 0x36
 8008ec6:	4432      	add	r2, r6
 8008ec8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008ecc:	428a      	cmp	r2, r1
 8008ece:	dd0b      	ble.n	8008ee8 <scalbn+0x80>
 8008ed0:	ec45 4b11 	vmov	d1, r4, r5
 8008ed4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008f40 <scalbn+0xd8>
 8008ed8:	f000 f83c 	bl	8008f54 <copysign>
 8008edc:	a318      	add	r3, pc, #96	; (adr r3, 8008f40 <scalbn+0xd8>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	ec51 0b10 	vmov	r0, r1, d0
 8008ee6:	e7da      	b.n	8008e9e <scalbn+0x36>
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	dd08      	ble.n	8008efe <scalbn+0x96>
 8008eec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ef0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ef4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ef8:	ec45 4b10 	vmov	d0, r4, r5
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008f02:	da0d      	bge.n	8008f20 <scalbn+0xb8>
 8008f04:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f08:	429e      	cmp	r6, r3
 8008f0a:	ec45 4b11 	vmov	d1, r4, r5
 8008f0e:	dce1      	bgt.n	8008ed4 <scalbn+0x6c>
 8008f10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008f38 <scalbn+0xd0>
 8008f14:	f000 f81e 	bl	8008f54 <copysign>
 8008f18:	a307      	add	r3, pc, #28	; (adr r3, 8008f38 <scalbn+0xd0>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	e7e0      	b.n	8008ee2 <scalbn+0x7a>
 8008f20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f24:	3236      	adds	r2, #54	; 0x36
 8008f26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f2e:	4620      	mov	r0, r4
 8008f30:	4629      	mov	r1, r5
 8008f32:	2200      	movs	r2, #0
 8008f34:	4b06      	ldr	r3, [pc, #24]	; (8008f50 <scalbn+0xe8>)
 8008f36:	e7b2      	b.n	8008e9e <scalbn+0x36>
 8008f38:	c2f8f359 	.word	0xc2f8f359
 8008f3c:	01a56e1f 	.word	0x01a56e1f
 8008f40:	8800759c 	.word	0x8800759c
 8008f44:	7e37e43c 	.word	0x7e37e43c
 8008f48:	43500000 	.word	0x43500000
 8008f4c:	ffff3cb0 	.word	0xffff3cb0
 8008f50:	3c900000 	.word	0x3c900000

08008f54 <copysign>:
 8008f54:	ec51 0b10 	vmov	r0, r1, d0
 8008f58:	ee11 0a90 	vmov	r0, s3
 8008f5c:	ee10 2a10 	vmov	r2, s0
 8008f60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008f68:	ea41 0300 	orr.w	r3, r1, r0
 8008f6c:	ec43 2b10 	vmov	d0, r2, r3
 8008f70:	4770      	bx	lr
	...

08008f74 <_init>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	bf00      	nop
 8008f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7a:	bc08      	pop	{r3}
 8008f7c:	469e      	mov	lr, r3
 8008f7e:	4770      	bx	lr

08008f80 <_fini>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	bf00      	nop
 8008f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f86:	bc08      	pop	{r3}
 8008f88:	469e      	mov	lr, r3
 8008f8a:	4770      	bx	lr
